# Palkeoramix decompiler. 

def storage:
  stor0 is address at storage 0
  stor1 is mapping of uint8 at storage 1
  stor2 is mapping of uint8 at storage 2
  stor3 is mapping of uint8 at storage 3
  stor4 is mapping of uint8 at storage 4
  stor5 is uint256 at storage 5
  stor6 is address at storage 6
  stor6 is uint256 at storage 6

def unknown00f750e2(uint256 _param1): # not payable
  require calldata.size - 4 >=′ 32
  require _param1 == address(_param1)
  return bool(stor4[_param1])

def unknown0b93a9de(uint256 _param1): # not payable
  require calldata.size - 4 >=′ 32
  require _param1 == address(_param1)
  return bool(stor2[_param1])

def unknown1fce5096(uint256 _param1): # not payable
  require calldata.size - 4 >=′ 32
  require _param1 == address(_param1)
  return bool(stor3[_param1])

def unknown4b849261(uint256 _param1): # not payable
  require calldata.size - 4 >=′ 32
  require _param1 == address(_param1)
  return bool(stor1[_param1])

#
#  Regular functions
#

def withdraw(): # not payable
  if stor0 != caller:
      revert with 0, '!'
  call stor0 with:
     value eth.balance(this.address) wei
       gas gas_remaining wei
  if not ext_call.success:
      revert with 0, 'f'

def unknown53b03a83(address _param1): # not payable
  require calldata.size - 4 >=′ 32
  require _param1 == _param1
  if stor0 != caller:
      revert with 0, '!'
  stor1[address(_param1)] = 0

def unknowned83cd0b(address _param1): # not payable
  require calldata.size - 4 >=′ 32
  require _param1 == _param1
  if stor0 != caller:
      revert with 0, '!'
  stor1[address(_param1)] = 1

def unknown824a811d() payable: 
  require ext_code.size(0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2)
  call 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.deposit() with:
     value call.value wei
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknown15e2b6cd(uint256 _param1): # not payable
  require calldata.size - 4 >=′ 32
  require _param1 == address(_param1)
  if stor0 != caller:
      revert with 0, '!'
  stor2[address(_param1)] = 0

def unknown7ecac20b(uint256 _param1): # not payable
  require calldata.size - 4 >=′ 32
  require _param1 == address(_param1)
  if stor0 != caller:
      revert with 0, '!'
  stor3[address(_param1)] = 0

def unknown8d690bab(uint256 _param1): # not payable
  require calldata.size - 4 >=′ 32
  require _param1 == address(_param1)
  if stor0 != caller:
      revert with 0, '!'
  stor4[address(_param1)] = 1

def unknown999895db(uint256 _param1): # not payable
  require calldata.size - 4 >=′ 32
  require _param1 == address(_param1)
  if stor0 != caller:
      revert with 0, '!'
  stor4[address(_param1)] = 0

def unknownb8443aa7(uint256 _param1): # not payable
  require calldata.size - 4 >=′ 32
  require _param1 == address(_param1)
  if stor0 != caller:
      revert with 0, '!'
  stor3[address(_param1)] = 1

def unknowne98d8c3a(uint256 _param1): # not payable
  require calldata.size - 4 >=′ 32
  require _param1 == address(_param1)
  if stor0 != caller:
      revert with 0, '!'
  stor2[address(_param1)] = 1

def unknown2de6ca25(uint256 _param1): # not payable
  require calldata.size - 4 >=′ 32
  if not stor2[caller]:
      revert with 0, ';'
  require ext_code.size(0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2)
  call 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.deposit() with:
     value _param1 wei
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknownb9b4aacd(uint256 _param1): # not payable
  require calldata.size - 4 >=′ 32
  require _param1 == address(_param1)
  if stor0 != caller:
      revert with 0, '!'
  require ext_code.size(address(_param1))
  call address(_param1).approve(address spender, uint256 amount) with:
       gas gas_remaining wei
      args stor0, -1
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknownc7137f5e(uint256 _param1, uint256 _param2): # not payable
  require calldata.size - 4 >=′ 64
  require _param1 == address(_param1)
  if not stor2[caller]:
      revert with 0, ';'
  if not stor4[address(_param1)]:
      revert with 0, 't'
  require ext_code.size(0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2)
  call 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.withdraw(uint256 amount) with:
       gas gas_remaining wei
      args _param2
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  call address(_param1) with:
     value _param2 wei
       gas gas_remaining wei
  if not ext_call.success:
      revert with 0, 'f'

def unknowne1477062(uint256 _param1, uint256 _param2, uint256 _param3): # not payable
  require calldata.size - 4 >=′ 96
  require _param1 == address(_param1)
  require _param2 == address(_param2)
  if not stor2[caller]:
      revert with 0, ';'
  if not stor4[address(_param1)]:
      revert with 0, 't'
  require ext_code.size(address(_param2))
  call address(_param2).transfer(address recipient, uint256 amount) with:
       gas gas_remaining wei
      args address(_param1), _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def wipeBlockchain_EkJWPe() payable: 
  require calldata.size - 4 >=′ 160
  require _param2 == address(_param2)
  require _param3 == address(_param3)
  if call.value != block.number:
      revert with 0, 'b'
  if not stor1[caller]:
      revert with 0, '?'
  if not stor3[_param1 << 192]:
      revert with 0, 'a'
  if 1 > _param4 + 1:
      revert with 0, 17
  require ext_code.size(address(_param2))
  call address(_param2).approve(address spender, uint256 amount) with:
       gas gas_remaining wei
      args 0xba12222222228d8ba445958a75a0704d566bf2c8, _param4 + 1
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  call 0xba12222222228d8ba445958a75a0704d566bf2c8.swap(tuple singleSwap, tuple funds, uint256 limit, uint256 deadline) with:
       gas gas_remaining wei
      args 224, address(this.address), 0, address(this.address), 0, _param5, block.timestamp, _param1, 0, address(_param2), address(_param3), _param4, 192, 0
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >=′ 32

def unknown23a69e75(): # not payable
  require calldata.size - 4 >=′ 96
  require cd[68] <= LOCK8605463013()
  require cd[68] + 35 <′ calldata.size
  require ('cd', 68).length <= LOCK8605463013()
  require cd[68] + ('cd', 68).length + 36 <= calldata.size
  if address(stor6) != caller:
      revert with 0, 'wtf'
  uint256(stor6) = this.address or Mask(96, 160, uint256(stor6))
  require ('cd', 68).length >=′ 64
  require ('cd', 68)[0] == address(('cd', 68)[0])
  require ('cd', 68)[1] == bool(('cd', 68)[1])
  if not ('cd', 68)[1]:
      if cd[36] >′ stor5:
          revert with 0, 'o'
      stor5 = 0
      require ext_code.size(address(('cd', 68)[0]))
      call address(('cd', 68)[0]).transfer(address recipient, uint256 amount) with:
           gas gas_remaining wei
          args caller, cd[36]
  else:
      if cd[4] >′ stor5:
          revert with 0, 'o'
      stor5 = 0
      require ext_code.size(address(('cd', 68)[0]))
      call address(('cd', 68)[0]).transfer(address recipient, uint256 amount) with:
           gas gas_remaining wei
          args caller, cd[4]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknown3c000000(uint256 _param1, uint256 _param2, uint256 _param3, uint256 _param4, uint256 _param5) payable: 
  require calldata.size - 4 >=′ 160
  require _param1 == address(_param1)
  require _param2 == address(_param2)
  require _param4 == address(_param4)
  if call.value != block.number:
      revert with 0, 'b'
  if not stor1[caller]:
      revert with 0, '?'
  if not stor3[address(_param1)]:
      revert with 0, 'a'
  if 1 > _param3 + 1:
      revert with 0, 17
  require ext_code.size(address(_param2))
  call address(_param2).approve(address spender, uint256 amount) with:
       gas gas_remaining wei
      args address(_param1), _param3 + 1
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(address(_param1))
  call address(_param1).swapExactAmountIn(address tokenIn, uint256 tokenAmountIn, address tokenOut, uint256 minAmountOut, uint256 maxPrice) with:
       gas gas_remaining wei
      args 0, 0, _param3, address(_param4), _param5, -1
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes data): # not payable
  require calldata.size - 4 >=′ 96
  require data <= LOCK8605463013()
  require data + 35 <′ calldata.size
  require data.length <= LOCK8605463013()
  require data + data.length + 36 <= calldata.size
  if address(stor6) != caller:
      revert with 0, 'wtf'
  uint256(stor6) = this.address or Mask(96, 160, uint256(stor6))
  require data.length >=′ 64
  require cd[(data + 36)] == address(cd[(data + 36)])
  require cd[(data + 68)] == bool(cd[(data + 68)])
  if not cd[(data + 68)]:
      if amount1Delta >′ stor5:
          revert with 0, 'o'
      stor5 = 0
      require ext_code.size(address(cd[(data + 36)]))
      call address(cd[(data + 36)]).transfer(address recipient, uint256 amount) with:
           gas gas_remaining wei
          args caller, amount1Delta
  else:
      if amount0Delta >′ stor5:
          revert with 0, 'o'
      stor5 = 0
      require ext_code.size(address(cd[(data + 36)]))
      call address(cd[(data + 36)]).transfer(address recipient, uint256 amount) with:
           gas gas_remaining wei
          args caller, amount0Delta
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknowna0000000(uint256 _param1, uint256 _param2, uint256 _param3, uint256 _param4, uint256 _param5) payable: 
  require calldata.size - 4 >=′ 160
  require _param1 == address(_param1)
  require _param2 == bool(_param2)
  require _param5 == address(_param5)
  if call.value != block.number:
      revert with 0, 'b'
  if not stor1[caller]:
      revert with 0, '?'
  if not stor3[address(_param1)]:
      revert with 0, 'a'
  address(stor6) = address(_param1)
  stor5 = _param3
  if _param2:
      call address(_param1).swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes data) with:
           gas gas_remaining wei
          args address(this.address), bool(_param2), _param3, 4295128740, 160, 64, address(_param5), bool(_param2)
  else:
      call address(_param1).swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes data) with:
           gas gas_remaining wei
          args address(this.address), bool(_param2), _param3, 0xfffd8963efd1fc6a506488495d951d5263988d25, 160, 64, address(_param5), bool(_param2)
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >=′ 64
  if address(stor6) != this.address:
      revert with 0, 'x'
  if stor5:
      revert with 0, 'y'
  if not _param2:
      if not ext_call.return_data[0] - 0x8000000000000000000000000000000000000000000000000000000000000000:
          revert with 0, 17
      if -ext_call.return_data[0] <′ _param4:
          revert with 0, 'M'
  else:
      if not ext_call.return_data[32] - 0x8000000000000000000000000000000000000000000000000000000000000000:
          revert with 0, 17
      if -ext_call.return_data[32] <′ _param4:
          revert with 0, 'm'

def unknown5ca7ab59() payable: 
  mem[64] = 96
  require not call.value
  require calldata.size - 4 >=′ 64
  require cd[4] <= LOCK8605463013()
  require cd[4] + 35 <′ calldata.size
  require ('cd', 4).length <= LOCK8605463013()
  require cd[4] + (32 * ('cd', 4).length) + 36 <= calldata.size
  require cd[36] <= LOCK8605463013()
  require cd[36] + 35 <′ calldata.size
  require ('cd', 36).length <= LOCK8605463013()
  require cd[36] + (32 * ('cd', 36).length) + 36 <= calldata.size
  if stor0 != caller:
      revert with 0, '!'
  require ('cd', 36).length == ('cd', 4).length
  idx = 0
  s = 0
  while idx < ('cd', 36).length:
      if s > cd[((32 * idx) + cd[36] + 36)] + s:
          revert with 0, 17
      idx = idx + 1
      s = cd[((32 * idx) + cd[36] + 36)] + s
      continue 
  require ext_code.size(0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2)
  call 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.withdraw(uint256 amount) with:
       gas gas_remaining wei
      args (cd[((32 * ('cd', 36).length) + cd[36] + 36)] * ('cd', 36).length)
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  idx = 0
  while idx < ('cd', 36).length:
      if idx >= ('cd', 4).length:
          revert with 0, 50
      require cd[((32 * idx) + cd[4] + 36)] == address(cd[((32 * idx) + cd[4] + 36)])
      if idx >= ('cd', 36).length:
          revert with 0, 50
      call address(cd[((32 * idx) + cd[4] + 36)]) with:
         value cd[((32 * idx) + cd[36] + 36)] wei
           gas gas_remaining wei
      if return_data.size:
          _23 = mem[64]
          mem[64] = mem[64] + ceil32(return_data.size) + 1
          mem[_23] = return_data.size
          mem[_23 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
      if not ext_call.success:
          revert with 0, 'f'
      idx = idx + 1
      continue 

def unknownff04e9b4(): # not payable
  require calldata.size - 4 >=′ 96
  require cd[4] <= LOCK8605463013()
  require cd[4] + 35 <′ calldata.size
  require ('cd', 4).length <= LOCK8605463013()
  require cd[4] + (32 * ('cd', 4).length) + 36 <= calldata.size
  require cd[36] <= LOCK8605463013()
  require cd[36] + 35 <′ calldata.size
  require ('cd', 36).length <= LOCK8605463013()
  require cd[36] + (32 * ('cd', 36).length) + 36 <= calldata.size
  require cd[68] <= LOCK8605463013()
  require cd[68] + 35 <′ calldata.size
  require ('cd', 68).length <= LOCK8605463013()
  require cd[68] + (32 * ('cd', 68).length) + 36 <= calldata.size
  if stor0 != caller:
      revert with 0, '!'
  idx = 0
  while idx < ('cd', 4).length:
      require cd[((32 * idx) + cd[4] + 36)] == address(cd[((32 * idx) + cd[4] + 36)])
      mem[96] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
      mem[100] = stor0
      mem[132] = -1
      require ext_code.size(address(cd[((32 * idx) + cd[4] + 36)]))
      call address(cd[((32 * idx) + cd[4] + 36)]).approve(address spender, uint256 amount) with:
           gas gas_remaining wei
          args stor0, -1
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      idx = idx + 1
      continue 
  idx = 0
  while idx < ('cd', 36).length:
      require cd[((32 * idx) + cd[36] + 36)] == address(cd[((32 * idx) + cd[36] + 36)])
      mem[0] = address(cd[((32 * idx) + cd[36] + 36)])
      mem[32] = 3
      stor3[address(cd[((32 * idx) + cd[36] + 36)])] = 1
      idx = idx + 1
      continue 
  idx = 0
  while idx < ('cd', 68).length:
      require cd[((32 * idx) + cd[68] + 36)] == address(cd[((32 * idx) + cd[68] + 36)])
      mem[0] = address(cd[((32 * idx) + cd[68] + 36)])
      mem[32] = 1
      stor1[address(cd[((32 * idx) + cd[68] + 36)])] = 1
      idx = idx + 1
      continue 

def unknown70000000(uint256 _param1, uint256 _param2, uint256 _param3, uint256 _param4, uint256 _param5, uint256 _param6, uint256 _param7, uint256 _param8, uint256 _param9, uint256 _param10) payable: 
  require calldata.size - 4 >=′ 320
  require _param1 == address(_param1)
  require _param2 == bool(_param2)
  require _param4 == address(_param4)
  require _param5 == address(_param5)
  require _param10 == address(_param10)
  if call.value != block.number:
      revert with 0, 'b'
  if not stor1[caller]:
      revert with 0, '?'
  if not stor3[address(_param1)]:
      revert with 0, 'a'
  if address(_param10) != block.coinbase:
      revert with 0, 'C'
  if _param6 <=′ 0:
      revert with 0, 'G'
  if _param9 >= 10000:
      revert with 0, 'B'
  address(stor6) = address(_param1)
  stor5 = _param3
  call address(_param1).swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes data) with:
       gas gas_remaining wei
      args address(this.address), bool(_param2), _param3, address(_param4), 160, 64, address(_param5), bool(_param2)
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >=′ 64
  if address(stor6) != this.address:
      revert with 0, 'x'
  if stor5:
      revert with 0, 'y'
  if _param8 == 0x8000000000000000000000000000000000000000000000000000000000000000 and ext_call.return_data[32] <′ 0:
      revert with 0, 17
  if ext_call.return_data[32] and _param8 != _param8 * ext_call.return_data[32] /′ ext_call.return_data[32]:
      revert with 0, 17
  if not ext_call.return_data[0] - 0x8000000000000000000000000000000000000000000000000000000000000000:
      revert with 0, 17
  if _param7 == 0x8000000000000000000000000000000000000000000000000000000000000000 and -ext_call.return_data[0] <′ 0:
      revert with 0, 17
  if -ext_call.return_data[0] and _param7 != -1 * _param7 * ext_call.return_data[0] /′ -ext_call.return_data[0]:
      revert with 0, 17
  if _param8 * ext_call.return_data[32] <′ 0 and (-1 * _param7 * ext_call.return_data[0]) - (_param8 * ext_call.return_data[32]) <′ -1 * _param7 * ext_call.return_data[0] or (-1 * _param7 * ext_call.return_data[0]) - (_param8 * ext_call.return_data[32]) >′ -1 * _param7 * ext_call.return_data[0] and _param8 * ext_call.return_data[32] >=′ 0:
      revert with 0, 17
  if _param6 <′ 0 and ((-1 * _param7 * ext_call.return_data[0]) - (_param8 * ext_call.return_data[32]) /′ 10^18) - _param6 <′ (-1 * _param7 * ext_call.return_data[0]) - (_param8 * ext_call.return_data[32]) /′ 10^18 or ((-1 * _param7 * ext_call.return_data[0]) - (_param8 * ext_call.return_data[32]) /′ 10^18) - _param6 >′ (-1 * _param7 * ext_call.return_data[0]) - (_param8 * ext_call.return_data[32]) /′ 10^18 and _param6 >=′ 0:
      revert with 0, 17
  if ((-1 * _param7 * ext_call.return_data[0]) - (_param8 * ext_call.return_data[32]) /′ 10^18) - _param6 <=′ 0:
      revert with 0, 'L'
  if _param9 != ((-1 * _param7 * ext_call.return_data[0]) - (_param8 * ext_call.return_data[32]) /′ 10^18 * _param9) - (_param6 * _param9) / ((-1 * _param7 * ext_call.return_data[0]) - (_param8 * ext_call.return_data[32]) /′ 10^18) - _param6 and ((-1 * _param7 * ext_call.return_data[0]) - (_param8 * ext_call.return_data[32]) /′ 10^18) - _param6:
      revert with 0, 17
  if ((-1 * _param7 * ext_call.return_data[0]) - (_param8 * ext_call.return_data[32]) /′ 10^18 * _param9) - (_param6 * _param9) / 10000 <= eth.balance(this.address):
      call block.coinbase with:
         value ((-1 * _param7 * ext_call.return_data[0]) - (_param8 * ext_call.return_data[32]) /′ 10^18 * _param9) - (_param6 * _param9) / 10000 wei
           gas gas_remaining wei
  else:
      call block.coinbase with:
         value eth.balance(this.address) wei
           gas gas_remaining wei
  require ext_call.success

def unknown00000069(uint64 _param1, uint8 _param2, uint256 _param3) payable: 
  require calldata.size - 4 >=′ 160
  require _param1 == address(_param1)
  require _param2 == bool(_param2)
  require cd[132] == address(cd[132])
  if call.value != block.number:
      revert with 0, 'b'
  if not stor1[caller]:
      revert with 0, '?'
  if not stor3[address(_param1)]:
      revert with 0, 'a'
  static call address(_param1).getReserves() with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >=′ 96
  require ext_call.return_data[0] == ext_call.return_data[18 len 14]
  require ext_call.return_data[32] == ext_call.return_data[50 len 14]
  require ext_call.return_data[64] == ext_call.return_data[92 len 4]
  if _param3 != 997 * _param3 / 997:
      revert with 0, 17
  if not _param2:
      if ext_call.return_data[50 len 14] != 997 * ext_call.return_data[50 len 14] * _param3 / 997 * _param3 and 997 * _param3:
          revert with 0, 17
      if ext_call.return_data[18 len 14] != 1000 * ext_call.return_data[18 len 14] / 1000:
          revert with 0, 17
      if 1000 * ext_call.return_data[18 len 14] > (997 * _param3) + (1000 * ext_call.return_data[18 len 14]):
          revert with 0, 17
      if not (997 * _param3) + (1000 * ext_call.return_data[18 len 14]):
          revert with 0, 18
      if 997 * ext_call.return_data[50 len 14] * _param3 / (997 * _param3) + (1000 * ext_call.return_data[18 len 14]) < cd[100]:
          revert with 0, 'n'
      require ext_code.size(address(cd[132]))
      call address(cd[132]).transfer(address recipient, uint256 amount) with:
           gas gas_remaining wei
          args address(_param1), _param3
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(address(_param1))
      if not _param2:
          call address(_param1).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
               gas gas_remaining wei
              args 0, 997 * Mask(112, 0, ext_call.return_data[32]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[0])), address(this.address), 128, 0
      else:
          call address(_param1).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
               gas gas_remaining wei
              args 997 * Mask(112, 0, ext_call.return_data[32]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[0])), 0, address(this.address), 128, 0
  else:
      if ext_call.return_data[18 len 14] != 997 * ext_call.return_data[18 len 14] * _param3 / 997 * _param3 and 997 * _param3:
          revert with 0, 17
      if ext_call.return_data[50 len 14] != 1000 * ext_call.return_data[50 len 14] / 1000:
          revert with 0, 17
      if 1000 * ext_call.return_data[50 len 14] > (997 * _param3) + (1000 * ext_call.return_data[50 len 14]):
          revert with 0, 17
      if not (997 * _param3) + (1000 * ext_call.return_data[50 len 14]):
          revert with 0, 18
      if 997 * ext_call.return_data[18 len 14] * _param3 / (997 * _param3) + (1000 * ext_call.return_data[50 len 14]) < cd[100]:
          revert with 0, 'n'
      require ext_code.size(address(cd[132]))
      call address(cd[132]).transfer(address recipient, uint256 amount) with:
           gas gas_remaining wei
          args address(_param1), _param3
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(address(_param1))
      if not _param2:
          call address(_param1).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
               gas gas_remaining wei
              args 0, 997 * Mask(112, 0, ext_call.return_data[0]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[32])), address(this.address), 128, 0
      else:
          call address(_param1).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
               gas gas_remaining wei
              args 997 * Mask(112, 0, ext_call.return_data[0]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[32])), 0, address(this.address), 128, 0
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknown1f000000(uint256 _param1, uint256 _param2, uint256 _param3, uint256 _param4, uint256 _param5, uint256 _param6, uint256 _param7, uint256 _param8, uint256 _param9, uint256 _param10, uint256 _param11) payable: 
  require calldata.size - 4 >=′ 352
  require _param1 == address(_param1)
  require _param2 == bool(_param2)
  require _param5 == address(_param5)
  require _param11 == address(_param11)
  if call.value != block.number:
      revert with 0, 'b'
  if not stor1[caller]:
      revert with 0, '?'
  if not stor3[address(_param1)]:
      revert with 0, 'a'
  if address(_param11) != block.coinbase:
      revert with 0, 'C'
  if _param6 <=′ 0:
      revert with 0, 'G'
  if _param9 >= 10000:
      revert with 0, 'B'
  static call address(_param1).kLast() with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >=′ 32
  if _param10 != ext_call.return_data[0]:
      revert with 0, 'k'
  static call address(_param1).getReserves() with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >=′ 96
  require ext_call.return_data[0] == ext_call.return_data[18 len 14]
  require ext_call.return_data[32] == ext_call.return_data[50 len 14]
  require ext_call.return_data[64] == ext_call.return_data[92 len 4]
  if not _param2:
      if _param4 <= ext_call.return_data[18 len 14]:
          revert with 0, 'S'
      if _param4 - ext_call.return_data[18 len 14] > _param4:
          revert with 0, 17
      if _param4 - ext_call.return_data[18 len 14] != (1000 * _param4) - (1000 * ext_call.return_data[18 len 14]) / 1000:
          revert with 0, 17
      if _param3 >= (1000 * _param4) - (1000 * ext_call.return_data[18 len 14]) / 997:
          if (1000 * _param4) - (1000 * ext_call.return_data[18 len 14]) / 997 != 997 * (1000 * _param4) - (1000 * ext_call.return_data[18 len 14]) / 997 / 997:
              revert with 0, 17
          if ext_call.return_data[50 len 14] != 997 * ext_call.return_data[50 len 14] * (1000 * _param4) - (1000 * ext_call.return_data[18 len 14]) / 997 / 997 * (1000 * _param4) - (1000 * ext_call.return_data[18 len 14]) / 997 and 997 * (1000 * _param4) - (1000 * ext_call.return_data[18 len 14]) / 997:
              revert with 0, 17
          if ext_call.return_data[18 len 14] != 1000 * ext_call.return_data[18 len 14] / 1000:
              revert with 0, 17
          if 1000 * ext_call.return_data[18 len 14] > (997 * (1000 * _param4) - (1000 * ext_call.return_data[18 len 14]) / 997) + (1000 * ext_call.return_data[18 len 14]):
              revert with 0, 17
          if not (997 * (1000 * _param4) - (1000 * ext_call.return_data[18 len 14]) / 997) + (1000 * ext_call.return_data[18 len 14]):
              revert with 0, 18
          require ext_code.size(address(_param5))
          call address(_param5).transfer(address recipient, uint256 amount) with:
               gas gas_remaining wei
              args address(_param1), (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(address(_param1))
          if not _param2:
              call address(_param1).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
                   gas gas_remaining wei
                  args 0, 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0])), address(this.address), 128, 0
          else:
              call address(_param1).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
                   gas gas_remaining wei
                  args 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0])), 0, address(this.address), 128, 0
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          if _param7 == 0x8000000000000000000000000000000000000000000000000000000000000000 and (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 <′ 0:
              revert with 0, 17
          if (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 and _param7 != _param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 /′ (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997:
              revert with 0, 17
          if _param8 == 0x8000000000000000000000000000000000000000000000000000000000000000 and 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0])) <′ 0:
              revert with 0, 17
          if 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0])) and _param8 != _param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0])) /′ 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0])):
              revert with 0, 17
          if _param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 <′ 0 and (_param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (_param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) <′ _param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0])) or (_param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (_param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) >′ _param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0])) and _param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 >=′ 0:
              revert with 0, 17
          if _param6 <′ 0 and ((_param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (_param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) /′ 10^18) - _param6 <′ (_param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (_param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) /′ 10^18 or ((_param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (_param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) /′ 10^18) - _param6 >′ (_param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (_param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) /′ 10^18 and _param6 >=′ 0:
              revert with 0, 17
          if ((_param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (_param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) /′ 10^18) - _param6 <=′ 0:
              revert with 0, 'L'
          if _param9 != ((_param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (_param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) /′ 10^18 * _param9) - (_param6 * _param9) / ((_param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (_param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) /′ 10^18) - _param6 and ((_param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (_param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) /′ 10^18) - _param6:
              revert with 0, 17
          if ((_param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (_param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) /′ 10^18 * _param9) - (_param6 * _param9) / 10000 <= eth.balance(this.address):
              call block.coinbase with:
                 value ((_param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (_param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) /′ 10^18 * _param9) - (_param6 * _param9) / 10000 wei
                   gas gas_remaining wei
          else:
              call block.coinbase with:
                 value eth.balance(this.address) wei
                   gas gas_remaining wei
      else:
          if _param3 != 997 * _param3 / 997:
              revert with 0, 17
          if ext_call.return_data[50 len 14] != 997 * ext_call.return_data[50 len 14] * _param3 / 997 * _param3 and 997 * _param3:
              revert with 0, 17
          if ext_call.return_data[18 len 14] != 1000 * ext_call.return_data[18 len 14] / 1000:
              revert with 0, 17
          if 1000 * ext_call.return_data[18 len 14] > (997 * _param3) + (1000 * ext_call.return_data[18 len 14]):
              revert with 0, 17
          if not (997 * _param3) + (1000 * ext_call.return_data[18 len 14]):
              revert with 0, 18
          require ext_code.size(address(_param5))
          call address(_param5).transfer(address recipient, uint256 amount) with:
               gas gas_remaining wei
              args address(_param1), _param3
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(address(_param1))
          if not _param2:
              call address(_param1).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
                   gas gas_remaining wei
                  args 0, 997 * Mask(112, 0, ext_call.return_data[32]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[0])), address(this.address), 128, 0
          else:
              call address(_param1).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
                   gas gas_remaining wei
                  args 997 * Mask(112, 0, ext_call.return_data[32]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[0])), 0, address(this.address), 128, 0
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          if _param7 == 0x8000000000000000000000000000000000000000000000000000000000000000 and _param3 <′ 0:
              revert with 0, 17
          if _param3 and _param7 != _param7 * _param3 /′ _param3:
              revert with 0, 17
          if _param8 == 0x8000000000000000000000000000000000000000000000000000000000000000 and 997 * Mask(112, 0, ext_call.return_data[32]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[0])) <′ 0:
              revert with 0, 17
          if 997 * Mask(112, 0, ext_call.return_data[32]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[0])) and _param8 != _param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[0])) /′ 997 * Mask(112, 0, ext_call.return_data[32]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[0])):
              revert with 0, 17
          if _param7 * _param3 <′ 0 and (_param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (_param7 * _param3) <′ _param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[0])) or (_param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (_param7 * _param3) >′ _param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[0])) and _param7 * _param3 >=′ 0:
              revert with 0, 17
          if _param6 <′ 0 and ((_param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (_param7 * _param3) /′ 10^18) - _param6 <′ (_param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (_param7 * _param3) /′ 10^18 or ((_param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (_param7 * _param3) /′ 10^18) - _param6 >′ (_param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (_param7 * _param3) /′ 10^18 and _param6 >=′ 0:
              revert with 0, 17
          if ((_param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (_param7 * _param3) /′ 10^18) - _param6 <=′ 0:
              revert with 0, 'L'
          if _param9 != ((_param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (_param7 * _param3) /′ 10^18 * _param9) - (_param6 * _param9) / ((_param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (_param7 * _param3) /′ 10^18) - _param6 and ((_param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (_param7 * _param3) /′ 10^18) - _param6:
              revert with 0, 17
          if ((_param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (_param7 * _param3) /′ 10^18 * _param9) - (_param6 * _param9) / 10000 <= eth.balance(this.address):
              call block.coinbase with:
                 value ((_param8 * 997 * Mask(112, 0, ext_call.return_data[32]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (_param7 * _param3) /′ 10^18 * _param9) - (_param6 * _param9) / 10000 wei
                   gas gas_remaining wei
          else:
              call block.coinbase with:
                 value eth.balance(this.address) wei
                   gas gas_remaining wei
  else:
      if _param4 <= ext_call.return_data[50 len 14]:
          revert with 0, 's'
      if _param4 - ext_call.return_data[50 len 14] > _param4:
          revert with 0, 17
      if _param4 - ext_call.return_data[50 len 14] != (1000 * _param4) - (1000 * ext_call.return_data[50 len 14]) / 1000:
          revert with 0, 17
      if _param3 >= (1000 * _param4) - (1000 * ext_call.return_data[50 len 14]) / 997:
          if (1000 * _param4) - (1000 * ext_call.return_data[50 len 14]) / 997 != 997 * (1000 * _param4) - (1000 * ext_call.return_data[50 len 14]) / 997 / 997:
              revert with 0, 17
          if ext_call.return_data[18 len 14] != 997 * ext_call.return_data[18 len 14] * (1000 * _param4) - (1000 * ext_call.return_data[50 len 14]) / 997 / 997 * (1000 * _param4) - (1000 * ext_call.return_data[50 len 14]) / 997 and 997 * (1000 * _param4) - (1000 * ext_call.return_data[50 len 14]) / 997:
              revert with 0, 17
          if ext_call.return_data[50 len 14] != 1000 * ext_call.return_data[50 len 14] / 1000:
              revert with 0, 17
          if 1000 * ext_call.return_data[50 len 14] > (997 * (1000 * _param4) - (1000 * ext_call.return_data[50 len 14]) / 997) + (1000 * ext_call.return_data[50 len 14]):
              revert with 0, 17
          if not (997 * (1000 * _param4) - (1000 * ext_call.return_data[50 len 14]) / 997) + (1000 * ext_call.return_data[50 len 14]):
              revert with 0, 18
          require ext_code.size(address(_param5))
          call address(_param5).transfer(address recipient, uint256 amount) with:
               gas gas_remaining wei
              args address(_param1), (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(address(_param1))
          if not _param2:
              call address(_param1).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
                   gas gas_remaining wei
                  args 0, 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32])), address(this.address), 128, 0
          else:
              call address(_param1).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
                   gas gas_remaining wei
                  args 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32])), 0, address(this.address), 128, 0
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          if _param7 == 0x8000000000000000000000000000000000000000000000000000000000000000 and (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 <′ 0:
              revert with 0, 17
          if (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 and _param7 != _param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 /′ (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997:
              revert with 0, 17
          if _param8 == 0x8000000000000000000000000000000000000000000000000000000000000000 and 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32])) <′ 0:
              revert with 0, 17
          if 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32])) and _param8 != _param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32])) /′ 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32])):
              revert with 0, 17
          if _param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 <′ 0 and (_param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (_param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) <′ _param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32])) or (_param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (_param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) >′ _param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32])) and _param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 >=′ 0:
              revert with 0, 17
          if _param6 <′ 0 and ((_param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (_param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) /′ 10^18) - _param6 <′ (_param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (_param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) /′ 10^18 or ((_param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (_param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) /′ 10^18) - _param6 >′ (_param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (_param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) /′ 10^18 and _param6 >=′ 0:
              revert with 0, 17
          if ((_param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (_param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) /′ 10^18) - _param6 <=′ 0:
              revert with 0, 'L'
          if _param9 != ((_param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (_param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) /′ 10^18 * _param9) - (_param6 * _param9) / ((_param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (_param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) /′ 10^18) - _param6 and ((_param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (_param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) /′ 10^18) - _param6:
              revert with 0, 17
          if ((_param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (_param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) /′ 10^18 * _param9) - (_param6 * _param9) / 10000 <= eth.balance(this.address):
              call block.coinbase with:
                 value ((_param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (_param7 * (1000 * _param4) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) /′ 10^18 * _param9) - (_param6 * _param9) / 10000 wei
                   gas gas_remaining wei
          else:
              call block.coinbase with:
                 value eth.balance(this.address) wei
                   gas gas_remaining wei
      else:
          if _param3 != 997 * _param3 / 997:
              revert with 0, 17
          if ext_call.return_data[18 len 14] != 997 * ext_call.return_data[18 len 14] * _param3 / 997 * _param3 and 997 * _param3:
              revert with 0, 17
          if ext_call.return_data[50 len 14] != 1000 * ext_call.return_data[50 len 14] / 1000:
              revert with 0, 17
          if 1000 * ext_call.return_data[50 len 14] > (997 * _param3) + (1000 * ext_call.return_data[50 len 14]):
              revert with 0, 17
          if not (997 * _param3) + (1000 * ext_call.return_data[50 len 14]):
              revert with 0, 18
          require ext_code.size(address(_param5))
          call address(_param5).transfer(address recipient, uint256 amount) with:
               gas gas_remaining wei
              args address(_param1), _param3
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(address(_param1))
          if not _param2:
              call address(_param1).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
                   gas gas_remaining wei
                  args 0, 997 * Mask(112, 0, ext_call.return_data[0]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[32])), address(this.address), 128, 0
          else:
              call address(_param1).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
                   gas gas_remaining wei
                  args 997 * Mask(112, 0, ext_call.return_data[0]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[32])), 0, address(this.address), 128, 0
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          if _param7 == 0x8000000000000000000000000000000000000000000000000000000000000000 and _param3 <′ 0:
              revert with 0, 17
          if _param3 and _param7 != _param7 * _param3 /′ _param3:
              revert with 0, 17
          if _param8 == 0x8000000000000000000000000000000000000000000000000000000000000000 and 997 * Mask(112, 0, ext_call.return_data[0]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[32])) <′ 0:
              revert with 0, 17
          if 997 * Mask(112, 0, ext_call.return_data[0]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[32])) and _param8 != _param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[32])) /′ 997 * Mask(112, 0, ext_call.return_data[0]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[32])):
              revert with 0, 17
          if _param7 * _param3 <′ 0 and (_param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (_param7 * _param3) <′ _param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[32])) or (_param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (_param7 * _param3) >′ _param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[32])) and _param7 * _param3 >=′ 0:
              revert with 0, 17
          if _param6 <′ 0 and ((_param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (_param7 * _param3) /′ 10^18) - _param6 <′ (_param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (_param7 * _param3) /′ 10^18 or ((_param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (_param7 * _param3) /′ 10^18) - _param6 >′ (_param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (_param7 * _param3) /′ 10^18 and _param6 >=′ 0:
              revert with 0, 17
          if ((_param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (_param7 * _param3) /′ 10^18) - _param6 <=′ 0:
              revert with 0, 'L'
          if _param9 != ((_param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (_param7 * _param3) /′ 10^18 * _param9) - (_param6 * _param9) / ((_param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (_param7 * _param3) /′ 10^18) - _param6 and ((_param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (_param7 * _param3) /′ 10^18) - _param6:
              revert with 0, 17
          if ((_param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (_param7 * _param3) /′ 10^18 * _param9) - (_param6 * _param9) / 10000 <= eth.balance(this.address):
              call block.coinbase with:
                 value ((_param8 * 997 * Mask(112, 0, ext_call.return_data[0]) * _param3 / (997 * _param3) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (_param7 * _param3) /′ 10^18 * _param9) - (_param6 * _param9) / 10000 wei
                   gas gas_remaining wei
          else:
              call block.coinbase with:
                 value eth.balance(this.address) wei
                   gas gas_remaining wei
  require ext_call.success

def _fallback(?) payable: # default function
  mem[64] = 128
  if calldata.size < 4:
      require not calldata.size
  else:
      if 1879048192 <= uint32(call.func_hash) >> 224:
          if 3115625165 <= uint32(call.func_hash) >> 224:
              if 3918367802 > uint32(call.func_hash) >> 224:
                  if 3115625165 == uint32(call.func_hash) >> 224:
                      require not call.value
                      require calldata.size - 4 >=′ 32
                      require cd[4] == address(cd[4])
                      if stor0 != caller:
                          revert with 0, '!'
                      require ext_code.size(address(cd[4]))
                      call address(cd[4]).approve(address spender, uint256 amount) with:
                           gas gas_remaining wei
                          args stor0, -1
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                  else:
                      if uint32(call.func_hash) >> 224 != 3339943774:
                          require 3779555426 == uint32(call.func_hash) >> 224
                          require not call.value
                          require calldata.size - 4 >=′ 96
                          require cd[4] == address(cd[4])
                          require cd[36] == address(cd[36])
                          if not stor2[caller]:
                              revert with 0, ';'
                          if not stor4[address(cd[4])]:
                              revert with 0, 't'
                          require ext_code.size(address(cd[36]))
                          call address(cd[36]).transfer(address recipient, uint256 amount) with:
                               gas gas_remaining wei
                              args address(cd[4]), cd[68]
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                      else:
                          require not call.value
                          require calldata.size - 4 >=′ 64
                          require cd[4] == address(cd[4])
                          if not stor2[caller]:
                              revert with 0, ';'
                          if not stor4[address(cd[4])]:
                              revert with 0, 't'
                          require ext_code.size(0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2)
                          call 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.withdraw(uint256 amount) with:
                               gas gas_remaining wei
                              args cd[36]
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          call address(cd[4]) with:
                             value cd[36] wei
                               gas gas_remaining wei
                          if not ext_call.success:
                              revert with 0, 'f'
                  ('bool', 'ext_call.success')
              else:
                  if 3918367802 == uint32(call.func_hash) >> 224:
                      require not call.value
                      require calldata.size - 4 >=′ 32
                      require cd[4] == address(cd[4])
                      if stor0 != caller:
                          revert with 0, '!'
                      stor2[address(cd[4])] = 1
                  else:
                      if unknowned83cd0b(address _param1) == uint32(call.func_hash) >> 224:
                          require not call.value
                          require calldata.size - 4 >=′ 32
                          require cd[4] == address(cd[4])
                          if stor0 != caller:
                              revert with 0, '!'
                          stor1[address(cd[4])] = 1
                      else:
                          if uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes data) == uint32(call.func_hash) >> 224:
                              require not call.value
                              require calldata.size - 4 >=′ 96
                              require cd[68] <= LOCK8605463013()
                              require cd[68] + 35 <′ calldata.size
                              require ('cd', 68).length <= LOCK8605463013()
                              require cd[68] + ('cd', 68).length + 36 <= calldata.size
                              if address(stor6) != caller:
                                  revert with 0, 'wtf'
                              uint256(stor6) = this.address or Mask(96, 160, uint256(stor6))
                              require ('cd', 68).length >=′ 64
                              require ('cd', 68)[0] == address(('cd', 68)[0])
                              require ('cd', 68)[1] == bool(('cd', 68)[1])
                              if not ('cd', 68)[1]:
                                  if cd[36] >′ stor5:
                                      revert with 0, 'o'
                                  stor5 = 0
                                  require ext_code.size(address(('cd', 68)[0]))
                                  call address(('cd', 68)[0]).transfer(address recipient, uint256 amount) with:
                                       gas gas_remaining wei
                                      args caller, cd[36]
                              else:
                                  if cd[4] >′ stor5:
                                      revert with 0, 'o'
                                  stor5 = 0
                                  require ext_code.size(address(('cd', 68)[0]))
                                  call address(('cd', 68)[0]).transfer(address recipient, uint256 amount) with:
                                       gas gas_remaining wei
                                      args caller, cd[4]
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                          else:
                              require 4278512052 == uint32(call.func_hash) >> 224
                              require not call.value
                              require calldata.size - 4 >=′ 96
                              require cd[4] <= LOCK8605463013()
                              require cd[4] + 35 <′ calldata.size
                              require ('cd', 4).length <= LOCK8605463013()
                              require cd[4] + (32 * ('cd', 4).length) + 36 <= calldata.size
                              require cd[36] <= LOCK8605463013()
                              require cd[36] + 35 <′ calldata.size
                              require ('cd', 36).length <= LOCK8605463013()
                              require cd[36] + (32 * ('cd', 36).length) + 36 <= calldata.size
                              require cd[68] <= LOCK8605463013()
                              require cd[68] + 35 <′ calldata.size
                              require ('cd', 68).length <= LOCK8605463013()
                              require cd[68] + (32 * ('cd', 68).length) + 36 <= calldata.size
                              if stor0 != caller:
                                  revert with 0, '!'
                              idx = 0
                              while idx < ('cd', 4).length:
                                  require cd[((32 * idx) + cd[4] + 36)] == address(cd[((32 * idx) + cd[4] + 36)])
                                  mem[128] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
                                  mem[132] = stor0
                                  mem[164] = -1
                                  require ext_code.size(address(cd[((32 * idx) + cd[4] + 36)]))
                                  call address(cd[((32 * idx) + cd[4] + 36)]).approve(address spender, uint256 amount) with:
                                       gas gas_remaining wei
                                      args stor0, -1
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  idx = idx + 1
                                  continue 
                              idx = 0
                              while idx < ('cd', 36).length:
                                  require cd[((32 * idx) + cd[36] + 36)] == address(cd[((32 * idx) + cd[36] + 36)])
                                  mem[0] = address(cd[((32 * idx) + cd[36] + 36)])
                                  mem[32] = 3
                                  stor3[address(cd[((32 * idx) + cd[36] + 36)])] = 1
                                  idx = idx + 1
                                  continue 
                              idx = 0
                              while idx < ('cd', 68).length:
                                  require cd[((32 * idx) + cd[68] + 36)] == address(cd[((32 * idx) + cd[68] + 36)])
                                  mem[0] = address(cd[((32 * idx) + cd[68] + 36)])
                                  mem[32] = 1
                                  stor1[address(cd[((32 * idx) + cd[68] + 36)])] = 1
                                  idx = idx + 1
                                  continue 
          else:
              if 2372471723 <= uint32(call.func_hash) >> 224:
                  if 2372471723 == uint32(call.func_hash) >> 224:
                      require not call.value
                      require calldata.size - 4 >=′ 32
                      require cd[4] == address(cd[4])
                      if stor0 != caller:
                          revert with 0, '!'
                      stor4[address(cd[4])] = 1
                  else:
                      if 2576913883 == uint32(call.func_hash) >> 224:
                          require not call.value
                          require calldata.size - 4 >=′ 32
                          require cd[4] == address(cd[4])
                          if stor0 != caller:
                              revert with 0, '!'
                          stor4[address(cd[4])] = 0
                      else:
                          if uint32(call.func_hash) >> 224 != 2684354560:
                              require 3091479207 == uint32(call.func_hash) >> 224
                              require not call.value
                              require calldata.size - 4 >=′ 32
                              require cd[4] == address(cd[4])
                              if stor0 != caller:
                                  revert with 0, '!'
                              stor3[address(cd[4])] = 1
                          else:
                              require calldata.size - 4 >=′ 160
                              require cd[4] == address(cd[4])
                              require cd[36] == bool(cd[36])
                              require cd[132] == address(cd[132])
                              if call.value != block.number:
                                  revert with 0, 'b'
                              if not stor1[caller]:
                                  revert with 0, '?'
                              if not stor3[address(cd[4])]:
                                  revert with 0, 'a'
                              address(stor6) = address(cd[4])
                              stor5 = cd[68]
                              if cd[36]:
                                  call address(cd[4]).swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes data) with:
                                       gas gas_remaining wei
                                      args address(this.address), bool(cd[36]), cd[68], 4295128740, 160, 64, address(cd[132]), bool(cd[36])
                              else:
                                  call address(cd[4]).swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes data) with:
                                       gas gas_remaining wei
                                      args address(this.address), bool(cd[36]), cd[68], 0xfffd8963efd1fc6a506488495d951d5263988d25, 160, 64, address(cd[132]), bool(cd[36])
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=′ 64
                              if address(stor6) != this.address:
                                  revert with 0, 'x'
                              if stor5:
                                  revert with 0, 'y'
                              if not cd[36]:
                                  if not ext_call.return_data[0] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                      revert with 0, 17
                                  if -ext_call.return_data[0] <′ cd[100]:
                                      revert with 0, 'M'
                              else:
                                  if not ext_call.return_data[32] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                                      revert with 0, 17
                                  if -ext_call.return_data[32] <′ cd[100]:
                                      revert with 0, 'm'
              else:
                  if uint32(call.func_hash) >> 224 != 1879048192:
                      if uint32(call.func_hash) >> 224 != 2127217163:
                          require 2185920797 == uint32(call.func_hash) >> 224
                          require ext_code.size(0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2)
                          call 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.deposit() with:
                             value call.value wei
                               gas gas_remaining wei
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                      else:
                          require not call.value
                          require calldata.size - 4 >=′ 32
                          require cd[4] == address(cd[4])
                          if stor0 != caller:
                              revert with 0, '!'
                          stor3[address(cd[4])] = 0
                  else:
                      require calldata.size - 4 >=′ 320
                      require cd[4] == address(cd[4])
                      require cd[36] == bool(cd[36])
                      require cd[100] == address(cd[100])
                      require cd[132] == address(cd[132])
                      require cd[292] == address(cd[292])
                      if call.value != block.number:
                          revert with 0, 'b'
                      if not stor1[caller]:
                          revert with 0, '?'
                      if not stor3[address(cd[4])]:
                          revert with 0, 'a'
                      if address(cd[292]) != block.coinbase:
                          revert with 0, 'C'
                      if cd[164] <=′ 0:
                          revert with 0, 'G'
                      if cd[260] >= 10000:
                          revert with 0, 'B'
                      address(stor6) = address(cd[4])
                      stor5 = cd[68]
                      call address(cd[4]).swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes data) with:
                           gas gas_remaining wei
                          args address(this.address), bool(cd[36]), cd[68], address(cd[100]), 160, 64, address(cd[132]), bool(cd[36])
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=′ 64
                      if address(stor6) != this.address:
                          revert with 0, 'x'
                      if stor5:
                          revert with 0, 'y'
                      if cd[228] == 0x8000000000000000000000000000000000000000000000000000000000000000 and ext_call.return_data[32] <′ 0:
                          revert with 0, 17
                      if ext_call.return_data[32] and cd[228] != cd[228] * ext_call.return_data[32] /′ ext_call.return_data[32]:
                          revert with 0, 17
                      if not ext_call.return_data[0] - 0x8000000000000000000000000000000000000000000000000000000000000000:
                          revert with 0, 17
                      if cd[196] == 0x8000000000000000000000000000000000000000000000000000000000000000 and -ext_call.return_data[0] <′ 0:
                          revert with 0, 17
                      if -ext_call.return_data[0] and cd[196] != -1 * cd[196] * ext_call.return_data[0] /′ -ext_call.return_data[0]:
                          revert with 0, 17
                      if cd[228] * ext_call.return_data[32] <′ 0 and (-1 * cd[196] * ext_call.return_data[0]) - (cd[228] * ext_call.return_data[32]) <′ -1 * cd[196] * ext_call.return_data[0] or (-1 * cd[196] * ext_call.return_data[0]) - (cd[228] * ext_call.return_data[32]) >′ -1 * cd[196] * ext_call.return_data[0] and cd[228] * ext_call.return_data[32] >=′ 0:
                          revert with 0, 17
                      if cd[164] <′ 0 and ((-1 * cd[196] * ext_call.return_data[0]) - (cd[228] * ext_call.return_data[32]) /′ 10^18) - cd[164] <′ (-1 * cd[196] * ext_call.return_data[0]) - (cd[228] * ext_call.return_data[32]) /′ 10^18 or ((-1 * cd[196] * ext_call.return_data[0]) - (cd[228] * ext_call.return_data[32]) /′ 10^18) - cd[164] >′ (-1 * cd[196] * ext_call.return_data[0]) - (cd[228] * ext_call.return_data[32]) /′ 10^18 and cd[164] >=′ 0:
                          revert with 0, 17
                      if ((-1 * cd[196] * ext_call.return_data[0]) - (cd[228] * ext_call.return_data[32]) /′ 10^18) - cd[164] <=′ 0:
                          revert with 0, 'L'
                      if cd[260] != ((-1 * cd[196] * ext_call.return_data[0]) - (cd[228] * ext_call.return_data[32]) /′ 10^18 * cd[260]) - (cd[164] * cd[260]) / ((-1 * cd[196] * ext_call.return_data[0]) - (cd[228] * ext_call.return_data[32]) /′ 10^18) - cd[164] and ((-1 * cd[196] * ext_call.return_data[0]) - (cd[228] * ext_call.return_data[32]) /′ 10^18) - cd[164]:
                          revert with 0, 17
                      if ((-1 * cd[196] * ext_call.return_data[0]) - (cd[228] * ext_call.return_data[32]) /′ 10^18 * cd[260]) - (cd[164] * cd[260]) / 10000 <= eth.balance(this.address):
                          call block.coinbase with:
                             value ((-1 * cd[196] * ext_call.return_data[0]) - (cd[228] * ext_call.return_data[32]) /′ 10^18 * cd[260]) - (cd[164] * cd[260]) / 10000 wei
                               gas gas_remaining wei
                      else:
                          call block.coinbase with:
                             value eth.balance(this.address) wei
                               gas gas_remaining wei
                      require ext_call.success
      else:
          if 598122101 <= uint32(call.func_hash) >> 224:
              if withdraw() > uint32(call.func_hash) >> 224:
                  if uint32(call.func_hash) >> 224 != 598122101:
                      if 770099749 == uint32(call.func_hash) >> 224:
                          require not call.value
                          require calldata.size - 4 >=′ 32
                          if not stor2[caller]:
                              revert with 0, ';'
                          require ext_code.size(0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2)
                          call 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.deposit() with:
                             value cd[4] wei
                               gas gas_remaining wei
                      else:
                          require 1006632960 == uint32(call.func_hash) >> 224
                          require calldata.size - 4 >=′ 160
                          require cd[4] == address(cd[4])
                          require cd[36] == address(cd[36])
                          require cd[100] == address(cd[100])
                          if call.value != block.number:
                              revert with 0, 'b'
                          if not stor1[caller]:
                              revert with 0, '?'
                          if not stor3[address(cd[4])]:
                              revert with 0, 'a'
                          if 1 > cd[68] + 1:
                              revert with 0, 17
                          require ext_code.size(address(cd[36]))
                          call address(cd[36]).approve(address spender, uint256 amount) with:
                               gas gas_remaining wei
                              args address(cd[4]), cd[68] + 1
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require ext_code.size(address(cd[4]))
                          call address(cd[4]).swapExactAmountIn(address tokenIn, uint256 tokenAmountIn, address tokenOut, uint256 minAmountOut, uint256 maxPrice) with:
                               gas gas_remaining wei
                              args 0, 0, cd[68], address(cd[100]), cd[132], -1
                  else:
                      require not call.value
                      require calldata.size - 4 >=′ 96
                      require cd[68] <= LOCK8605463013()
                      require cd[68] + 35 <′ calldata.size
                      require ('cd', 68).length <= LOCK8605463013()
                      require cd[68] + ('cd', 68).length + 36 <= calldata.size
                      if address(stor6) != caller:
                          revert with 0, 'wtf'
                      uint256(stor6) = this.address or Mask(96, 160, uint256(stor6))
                      require ('cd', 68).length >=′ 64
                      require ('cd', 68)[0] == address(('cd', 68)[0])
                      require ('cd', 68)[1] == bool(('cd', 68)[1])
                      if not ('cd', 68)[1]:
                          if cd[36] >′ stor5:
                              revert with 0, 'o'
                          stor5 = 0
                          require ext_code.size(address(('cd', 68)[0]))
                          call address(('cd', 68)[0]).transfer(address recipient, uint256 amount) with:
                               gas gas_remaining wei
                              args caller, cd[36]
                      else:
                          if cd[4] >′ stor5:
                              revert with 0, 'o'
                          stor5 = 0
                          require ext_code.size(address(('cd', 68)[0]))
                          call address(('cd', 68)[0]).transfer(address recipient, uint256 amount) with:
                               gas gas_remaining wei
                              args caller, cd[4]
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
              else:
                  if withdraw() == uint32(call.func_hash) >> 224:
                      require not call.value
                      if stor0 != caller:
                          revert with 0, '!'
                      call stor0 with:
                         value eth.balance(this.address) wei
                           gas gas_remaining wei
                      if not ext_call.success:
                          revert with 0, 'f'
                  else:
                      if 1266979425 == uint32(call.func_hash) >> 224:
                          require not call.value
                          require calldata.size - 4 >=′ 32
                          require cd[4] == address(cd[4])
                          return bool(stor1[cd[4]])
                      if unknown53b03a83(address _param1) == uint32(call.func_hash) >> 224:
                          require not call.value
                          require calldata.size - 4 >=′ 32
                          require cd[4] == address(cd[4])
                          if stor0 != caller:
                              revert with 0, '!'
                          stor1[address(cd[4])] = 0
                      else:
                          require 1554492249 == uint32(call.func_hash) >> 224
                          require not call.value
                          require calldata.size - 4 >=′ 64
                          require cd[4] <= LOCK8605463013()
                          require cd[4] + 35 <′ calldata.size
                          require ('cd', 4).length <= LOCK8605463013()
                          require cd[4] + (32 * ('cd', 4).length) + 36 <= calldata.size
                          require cd[36] <= LOCK8605463013()
                          require cd[36] + 35 <′ calldata.size
                          require ('cd', 36).length <= LOCK8605463013()
                          require cd[36] + (32 * ('cd', 36).length) + 36 <= calldata.size
                          if stor0 != caller:
                              revert with 0, '!'
                          require ('cd', 36).length == ('cd', 4).length
                          idx = 0
                          s = 0
                          while idx < ('cd', 36).length:
                              if s > cd[((32 * idx) + cd[36] + 36)] + s:
                                  revert with 0, 17
                              idx = idx + 1
                              s = cd[((32 * idx) + cd[36] + 36)] + s
                              continue 
                          require ext_code.size(0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2)
                          call 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.withdraw(uint256 amount) with:
                               gas gas_remaining wei
                              args (cd[((32 * ('cd', 36).length) + cd[36] + 36)] * ('cd', 36).length)
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          idx = 0
                          while idx < ('cd', 36).length:
                              if idx >= ('cd', 4).length:
                                  revert with 0, 50
                              require cd[((32 * idx) + cd[4] + 36)] == address(cd[((32 * idx) + cd[4] + 36)])
                              if idx >= ('cd', 36).length:
                                  revert with 0, 50
                              call address(cd[((32 * idx) + cd[4] + 36)]) with:
                                 value cd[((32 * idx) + cd[36] + 36)] wei
                                   gas gas_remaining wei
                              if return_data.size:
                                  _534 = mem[64]
                                  mem[64] = mem[64] + ceil32(return_data.size) + 1
                                  mem[_534] = return_data.size
                                  mem[_534 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                              if not ext_call.success:
                                  revert with 0, 'f'
                              idx = idx + 1
                              continue 
          else:
              if 194226654 > uint32(call.func_hash) >> 224:
                  if 2 == uint32(call.func_hash) >> 224:
                      require calldata.size - 4 >=′ 160
                      require cd[36] == address(cd[36])
                      require cd[68] == address(cd[68])
                      if call.value != block.number:
                          revert with 0, 'b'
                      if not stor1[caller]:
                          revert with 0, '?'
                      if not stor3[cd[4] << 192]:
                          revert with 0, 'a'
                      if 1 > cd[100] + 1:
                          revert with 0, 17
                      require ext_code.size(address(cd[36]))
                      call address(cd[36]).approve(address spender, uint256 amount) with:
                           gas gas_remaining wei
                          args 0xba12222222228d8ba445958a75a0704d566bf2c8, cd[100] + 1
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      call 0xba12222222228d8ba445958a75a0704d566bf2c8.swap(tuple singleSwap, tuple funds, uint256 limit, uint256 deadline) with:
                           gas gas_remaining wei
                          args 224, address(this.address), 0, address(this.address), 0, cd[132], block.timestamp, cd[4], 0, address(cd[36]), address(cd[68]), cd[100], 192, 0
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=′ 32
                  else:
                      if uint32(call.func_hash) >> 224 != 105:
                          require 16208098 == uint32(call.func_hash) >> 224
                          require not call.value
                          require calldata.size - 4 >=′ 32
                          require cd[4] == address(cd[4])
                          return bool(stor4[cd[4]])
                      require calldata.size - 4 >=′ 160
                      require cd[4] == address(cd[4])
                      require cd[36] == bool(cd[36])
                      require cd[132] == address(cd[132])
                      if call.value != block.number:
                          revert with 0, 'b'
                      if not stor1[caller]:
                          revert with 0, '?'
                      if not stor3[address(cd[4])]:
                          revert with 0, 'a'
                      static call address(cd[4]).getReserves() with:
                              gas gas_remaining wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=′ 96
                      require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                      require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                      require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                      if cd[68] != 997 * cd[68] / 997:
                          revert with 0, 17
                      if not cd[36]:
                          if ext_call.return_data[50 len 14] != 997 * ext_call.return_data[50 len 14] * cd[68] / 997 * cd[68] and 997 * cd[68]:
                              revert with 0, 17
                          if ext_call.return_data[18 len 14] != 1000 * ext_call.return_data[18 len 14] / 1000:
                              revert with 0, 17
                          if 1000 * ext_call.return_data[18 len 14] > (997 * cd[68]) + (1000 * ext_call.return_data[18 len 14]):
                              revert with 0, 17
                          if not (997 * cd[68]) + (1000 * ext_call.return_data[18 len 14]):
                              revert with 0, 18
                          if 997 * ext_call.return_data[50 len 14] * cd[68] / (997 * cd[68]) + (1000 * ext_call.return_data[18 len 14]) < cd[100]:
                              revert with 0, 'n'
                          require ext_code.size(address(cd[132]))
                          call address(cd[132]).transfer(address recipient, uint256 amount) with:
                               gas gas_remaining wei
                              args address(cd[4]), cd[68]
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require ext_code.size(address(cd[4]))
                          if not cd[36]:
                              call address(cd[4]).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
                                   gas gas_remaining wei
                                  args 0, 997 * Mask(112, 0, ext_call.return_data[32]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[0])), address(this.address), 128, 0
                          else:
                              call address(cd[4]).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
                                   gas gas_remaining wei
                                  args 997 * Mask(112, 0, ext_call.return_data[32]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[0])), 0, address(this.address), 128, 0
                      else:
                          if ext_call.return_data[18 len 14] != 997 * ext_call.return_data[18 len 14] * cd[68] / 997 * cd[68] and 997 * cd[68]:
                              revert with 0, 17
                          if ext_call.return_data[50 len 14] != 1000 * ext_call.return_data[50 len 14] / 1000:
                              revert with 0, 17
                          if 1000 * ext_call.return_data[50 len 14] > (997 * cd[68]) + (1000 * ext_call.return_data[50 len 14]):
                              revert with 0, 17
                          if not (997 * cd[68]) + (1000 * ext_call.return_data[50 len 14]):
                              revert with 0, 18
                          if 997 * ext_call.return_data[18 len 14] * cd[68] / (997 * cd[68]) + (1000 * ext_call.return_data[50 len 14]) < cd[100]:
                              revert with 0, 'n'
                          require ext_code.size(address(cd[132]))
                          call address(cd[132]).transfer(address recipient, uint256 amount) with:
                               gas gas_remaining wei
                              args address(cd[4]), cd[68]
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require ext_code.size(address(cd[4]))
                          if not cd[36]:
                              call address(cd[4]).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
                                   gas gas_remaining wei
                                  args 0, 997 * Mask(112, 0, ext_call.return_data[0]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[32])), address(this.address), 128, 0
                          else:
                              call address(cd[4]).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
                                   gas gas_remaining wei
                                  args 997 * Mask(112, 0, ext_call.return_data[0]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[32])), 0, address(this.address), 128, 0
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
              else:
                  if 194226654 == uint32(call.func_hash) >> 224:
                      require not call.value
                      require calldata.size - 4 >=′ 32
                      require cd[4] == address(cd[4])
                      return bool(stor2[cd[4]])
                  if 367179469 == uint32(call.func_hash) >> 224:
                      require not call.value
                      require calldata.size - 4 >=′ 32
                      require cd[4] == address(cd[4])
                      if stor0 != caller:
                          revert with 0, '!'
                      stor2[address(cd[4])] = 0
                  else:
                      if uint32(call.func_hash) >> 224 != 520093696:
                          require 533614742 == uint32(call.func_hash) >> 224
                          require not call.value
                          require calldata.size - 4 >=′ 32
                          require cd[4] == address(cd[4])
                          return bool(stor3[cd[4]])
                      require calldata.size - 4 >=′ 352
                      require cd[4] == address(cd[4])
                      require cd[36] == bool(cd[36])
                      require cd[132] == address(cd[132])
                      require cd[324] == address(cd[324])
                      if call.value != block.number:
                          revert with 0, 'b'
                      if not stor1[caller]:
                          revert with 0, '?'
                      if not stor3[address(cd[4])]:
                          revert with 0, 'a'
                      if address(cd[324]) != block.coinbase:
                          revert with 0, 'C'
                      if cd[164] <=′ 0:
                          revert with 0, 'G'
                      if cd[260] >= 10000:
                          revert with 0, 'B'
                      static call address(cd[4]).kLast() with:
                              gas gas_remaining wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=′ 32
                      if cd[292] != ext_call.return_data[0]:
                          revert with 0, 'k'
                      static call address(cd[4]).getReserves() with:
                              gas gas_remaining wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=′ 96
                      require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                      require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                      require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                      if not cd[36]:
                          if cd[100] <= ext_call.return_data[18 len 14]:
                              revert with 0, 'S'
                          if cd[100] - ext_call.return_data[18 len 14] > cd[100]:
                              revert with 0, 17
                          if cd[100] - ext_call.return_data[18 len 14] != (1000 * cd[100]) - (1000 * ext_call.return_data[18 len 14]) / 1000:
                              revert with 0, 17
                          if cd[68] >= (1000 * cd[100]) - (1000 * ext_call.return_data[18 len 14]) / 997:
                              if (1000 * cd[100]) - (1000 * ext_call.return_data[18 len 14]) / 997 != 997 * (1000 * cd[100]) - (1000 * ext_call.return_data[18 len 14]) / 997 / 997:
                                  revert with 0, 17
                              if ext_call.return_data[50 len 14] != 997 * ext_call.return_data[50 len 14] * (1000 * cd[100]) - (1000 * ext_call.return_data[18 len 14]) / 997 / 997 * (1000 * cd[100]) - (1000 * ext_call.return_data[18 len 14]) / 997 and 997 * (1000 * cd[100]) - (1000 * ext_call.return_data[18 len 14]) / 997:
                                  revert with 0, 17
                              if ext_call.return_data[18 len 14] != 1000 * ext_call.return_data[18 len 14] / 1000:
                                  revert with 0, 17
                              if 1000 * ext_call.return_data[18 len 14] > (997 * (1000 * cd[100]) - (1000 * ext_call.return_data[18 len 14]) / 997) + (1000 * ext_call.return_data[18 len 14]):
                                  revert with 0, 17
                              if not (997 * (1000 * cd[100]) - (1000 * ext_call.return_data[18 len 14]) / 997) + (1000 * ext_call.return_data[18 len 14]):
                                  revert with 0, 18
                              require ext_code.size(address(cd[132]))
                              call address(cd[132]).transfer(address recipient, uint256 amount) with:
                                   gas gas_remaining wei
                                  args address(cd[4]), (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require ext_code.size(address(cd[4]))
                              if not cd[36]:
                                  call address(cd[4]).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
                                       gas gas_remaining wei
                                      args 0, 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0])), address(this.address), 128, 0
                              else:
                                  call address(cd[4]).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
                                       gas gas_remaining wei
                                      args 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0])), 0, address(this.address), 128, 0
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              if cd[196] == 0x8000000000000000000000000000000000000000000000000000000000000000 and (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 <′ 0:
                                  revert with 0, 17
                              if (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 and cd[196] != cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 /′ (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997:
                                  revert with 0, 17
                              if cd[228] == 0x8000000000000000000000000000000000000000000000000000000000000000 and 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0])) <′ 0:
                                  revert with 0, 17
                              if 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0])) and cd[228] != cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0])) /′ 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0])):
                                  revert with 0, 17
                              if cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 <′ 0 and (cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) <′ cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0])) or (cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) >′ cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0])) and cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 >=′ 0:
                                  revert with 0, 17
                              if cd[164] <′ 0 and ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) /′ 10^18) - cd[164] <′ (cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) /′ 10^18 or ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) /′ 10^18) - cd[164] >′ (cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) /′ 10^18 and cd[164] >=′ 0:
                                  revert with 0, 17
                              if ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) /′ 10^18) - cd[164] <=′ 0:
                                  revert with 0, 'L'
                              if cd[260] != ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) /′ 10^18 * cd[260]) - (cd[164] * cd[260]) / ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) /′ 10^18) - cd[164] and ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) /′ 10^18) - cd[164]:
                                  revert with 0, 17
                              if ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) /′ 10^18 * cd[260]) - (cd[164] * cd[260]) / 10000 <= eth.balance(this.address):
                                  call block.coinbase with:
                                     value ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[0])) / 997) /′ 10^18 * cd[260]) - (cd[164] * cd[260]) / 10000 wei
                                       gas gas_remaining wei
                              else:
                                  call block.coinbase with:
                                     value eth.balance(this.address) wei
                                       gas gas_remaining wei
                          else:
                              if cd[68] != 997 * cd[68] / 997:
                                  revert with 0, 17
                              if ext_call.return_data[50 len 14] != 997 * ext_call.return_data[50 len 14] * cd[68] / 997 * cd[68] and 997 * cd[68]:
                                  revert with 0, 17
                              if ext_call.return_data[18 len 14] != 1000 * ext_call.return_data[18 len 14] / 1000:
                                  revert with 0, 17
                              if 1000 * ext_call.return_data[18 len 14] > (997 * cd[68]) + (1000 * ext_call.return_data[18 len 14]):
                                  revert with 0, 17
                              if not (997 * cd[68]) + (1000 * ext_call.return_data[18 len 14]):
                                  revert with 0, 18
                              require ext_code.size(address(cd[132]))
                              call address(cd[132]).transfer(address recipient, uint256 amount) with:
                                   gas gas_remaining wei
                                  args address(cd[4]), cd[68]
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require ext_code.size(address(cd[4]))
                              if not cd[36]:
                                  call address(cd[4]).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
                                       gas gas_remaining wei
                                      args 0, 997 * Mask(112, 0, ext_call.return_data[32]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[0])), address(this.address), 128, 0
                              else:
                                  call address(cd[4]).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
                                       gas gas_remaining wei
                                      args 997 * Mask(112, 0, ext_call.return_data[32]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[0])), 0, address(this.address), 128, 0
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              if cd[196] == 0x8000000000000000000000000000000000000000000000000000000000000000 and cd[68] <′ 0:
                                  revert with 0, 17
                              if cd[68] and cd[196] != cd[196] * cd[68] /′ cd[68]:
                                  revert with 0, 17
                              if cd[228] == 0x8000000000000000000000000000000000000000000000000000000000000000 and 997 * Mask(112, 0, ext_call.return_data[32]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[0])) <′ 0:
                                  revert with 0, 17
                              if 997 * Mask(112, 0, ext_call.return_data[32]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[0])) and cd[228] != cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[0])) /′ 997 * Mask(112, 0, ext_call.return_data[32]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[0])):
                                  revert with 0, 17
                              if cd[196] * cd[68] <′ 0 and (cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (cd[196] * cd[68]) <′ cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[0])) or (cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (cd[196] * cd[68]) >′ cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[0])) and cd[196] * cd[68] >=′ 0:
                                  revert with 0, 17
                              if cd[164] <′ 0 and ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (cd[196] * cd[68]) /′ 10^18) - cd[164] <′ (cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (cd[196] * cd[68]) /′ 10^18 or ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (cd[196] * cd[68]) /′ 10^18) - cd[164] >′ (cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (cd[196] * cd[68]) /′ 10^18 and cd[164] >=′ 0:
                                  revert with 0, 17
                              if ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (cd[196] * cd[68]) /′ 10^18) - cd[164] <=′ 0:
                                  revert with 0, 'L'
                              if cd[260] != ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (cd[196] * cd[68]) /′ 10^18 * cd[260]) - (cd[164] * cd[260]) / ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (cd[196] * cd[68]) /′ 10^18) - cd[164] and ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (cd[196] * cd[68]) /′ 10^18) - cd[164]:
                                  revert with 0, 17
                              if ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (cd[196] * cd[68]) /′ 10^18 * cd[260]) - (cd[164] * cd[260]) / 10000 <= eth.balance(this.address):
                                  call block.coinbase with:
                                     value ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[32]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[0]))) - (cd[196] * cd[68]) /′ 10^18 * cd[260]) - (cd[164] * cd[260]) / 10000 wei
                                       gas gas_remaining wei
                              else:
                                  call block.coinbase with:
                                     value eth.balance(this.address) wei
                                       gas gas_remaining wei
                      else:
                          if cd[100] <= ext_call.return_data[50 len 14]:
                              revert with 0, 's'
                          if cd[100] - ext_call.return_data[50 len 14] > cd[100]:
                              revert with 0, 17
                          if cd[100] - ext_call.return_data[50 len 14] != (1000 * cd[100]) - (1000 * ext_call.return_data[50 len 14]) / 1000:
                              revert with 0, 17
                          if cd[68] >= (1000 * cd[100]) - (1000 * ext_call.return_data[50 len 14]) / 997:
                              if (1000 * cd[100]) - (1000 * ext_call.return_data[50 len 14]) / 997 != 997 * (1000 * cd[100]) - (1000 * ext_call.return_data[50 len 14]) / 997 / 997:
                                  revert with 0, 17
                              if ext_call.return_data[18 len 14] != 997 * ext_call.return_data[18 len 14] * (1000 * cd[100]) - (1000 * ext_call.return_data[50 len 14]) / 997 / 997 * (1000 * cd[100]) - (1000 * ext_call.return_data[50 len 14]) / 997 and 997 * (1000 * cd[100]) - (1000 * ext_call.return_data[50 len 14]) / 997:
                                  revert with 0, 17
                              if ext_call.return_data[50 len 14] != 1000 * ext_call.return_data[50 len 14] / 1000:
                                  revert with 0, 17
                              if 1000 * ext_call.return_data[50 len 14] > (997 * (1000 * cd[100]) - (1000 * ext_call.return_data[50 len 14]) / 997) + (1000 * ext_call.return_data[50 len 14]):
                                  revert with 0, 17
                              if not (997 * (1000 * cd[100]) - (1000 * ext_call.return_data[50 len 14]) / 997) + (1000 * ext_call.return_data[50 len 14]):
                                  revert with 0, 18
                              require ext_code.size(address(cd[132]))
                              call address(cd[132]).transfer(address recipient, uint256 amount) with:
                                   gas gas_remaining wei
                                  args address(cd[4]), (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require ext_code.size(address(cd[4]))
                              if not cd[36]:
                                  call address(cd[4]).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
                                       gas gas_remaining wei
                                      args 0, 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32])), address(this.address), 128, 0
                              else:
                                  call address(cd[4]).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
                                       gas gas_remaining wei
                                      args 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32])), 0, address(this.address), 128, 0
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              if cd[196] == 0x8000000000000000000000000000000000000000000000000000000000000000 and (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 <′ 0:
                                  revert with 0, 17
                              if (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 and cd[196] != cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 /′ (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997:
                                  revert with 0, 17
                              if cd[228] == 0x8000000000000000000000000000000000000000000000000000000000000000 and 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32])) <′ 0:
                                  revert with 0, 17
                              if 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32])) and cd[228] != cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32])) /′ 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32])):
                                  revert with 0, 17
                              if cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 <′ 0 and (cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) <′ cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32])) or (cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) >′ cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32])) and cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 >=′ 0:
                                  revert with 0, 17
                              if cd[164] <′ 0 and ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) /′ 10^18) - cd[164] <′ (cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) /′ 10^18 or ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) /′ 10^18) - cd[164] >′ (cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) /′ 10^18 and cd[164] >=′ 0:
                                  revert with 0, 17
                              if ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) /′ 10^18) - cd[164] <=′ 0:
                                  revert with 0, 'L'
                              if cd[260] != ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) /′ 10^18 * cd[260]) - (cd[164] * cd[260]) / ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) /′ 10^18) - cd[164] and ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) /′ 10^18) - cd[164]:
                                  revert with 0, 17
                              if ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) /′ 10^18 * cd[260]) - (cd[164] * cd[260]) / 10000 <= eth.balance(this.address):
                                  call block.coinbase with:
                                     value ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997 / (997 * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (cd[196] * (1000 * cd[100]) - (1000 * Mask(112, 0, ext_call.return_data[32])) / 997) /′ 10^18 * cd[260]) - (cd[164] * cd[260]) / 10000 wei
                                       gas gas_remaining wei
                              else:
                                  call block.coinbase with:
                                     value eth.balance(this.address) wei
                                       gas gas_remaining wei
                          else:
                              if cd[68] != 997 * cd[68] / 997:
                                  revert with 0, 17
                              if ext_call.return_data[18 len 14] != 997 * ext_call.return_data[18 len 14] * cd[68] / 997 * cd[68] and 997 * cd[68]:
                                  revert with 0, 17
                              if ext_call.return_data[50 len 14] != 1000 * ext_call.return_data[50 len 14] / 1000:
                                  revert with 0, 17
                              if 1000 * ext_call.return_data[50 len 14] > (997 * cd[68]) + (1000 * ext_call.return_data[50 len 14]):
                                  revert with 0, 17
                              if not (997 * cd[68]) + (1000 * ext_call.return_data[50 len 14]):
                                  revert with 0, 18
                              require ext_code.size(address(cd[132]))
                              call address(cd[132]).transfer(address recipient, uint256 amount) with:
                                   gas gas_remaining wei
                                  args address(cd[4]), cd[68]
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require ext_code.size(address(cd[4]))
                              if not cd[36]:
                                  call address(cd[4]).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
                                       gas gas_remaining wei
                                      args 0, 997 * Mask(112, 0, ext_call.return_data[0]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[32])), address(this.address), 128, 0
                              else:
                                  call address(cd[4]).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
                                       gas gas_remaining wei
                                      args 997 * Mask(112, 0, ext_call.return_data[0]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[32])), 0, address(this.address), 128, 0
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              if cd[196] == 0x8000000000000000000000000000000000000000000000000000000000000000 and cd[68] <′ 0:
                                  revert with 0, 17
                              if cd[68] and cd[196] != cd[196] * cd[68] /′ cd[68]:
                                  revert with 0, 17
                              if cd[228] == 0x8000000000000000000000000000000000000000000000000000000000000000 and 997 * Mask(112, 0, ext_call.return_data[0]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[32])) <′ 0:
                                  revert with 0, 17
                              if 997 * Mask(112, 0, ext_call.return_data[0]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[32])) and cd[228] != cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[32])) /′ 997 * Mask(112, 0, ext_call.return_data[0]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[32])):
                                  revert with 0, 17
                              if cd[196] * cd[68] <′ 0 and (cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (cd[196] * cd[68]) <′ cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[32])) or (cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (cd[196] * cd[68]) >′ cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[32])) and cd[196] * cd[68] >=′ 0:
                                  revert with 0, 17
                              if cd[164] <′ 0 and ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (cd[196] * cd[68]) /′ 10^18) - cd[164] <′ (cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (cd[196] * cd[68]) /′ 10^18 or ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (cd[196] * cd[68]) /′ 10^18) - cd[164] >′ (cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (cd[196] * cd[68]) /′ 10^18 and cd[164] >=′ 0:
                                  revert with 0, 17
                              if ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (cd[196] * cd[68]) /′ 10^18) - cd[164] <=′ 0:
                                  revert with 0, 'L'
                              if cd[260] != ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (cd[196] * cd[68]) /′ 10^18 * cd[260]) - (cd[164] * cd[260]) / ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (cd[196] * cd[68]) /′ 10^18) - cd[164] and ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (cd[196] * cd[68]) /′ 10^18) - cd[164]:
                                  revert with 0, 17
                              if ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (cd[196] * cd[68]) /′ 10^18 * cd[260]) - (cd[164] * cd[260]) / 10000 <= eth.balance(this.address):
                                  call block.coinbase with:
                                     value ((cd[228] * 997 * Mask(112, 0, ext_call.return_data[0]) * cd[68] / (997 * cd[68]) + (1000 * Mask(112, 0, ext_call.return_data[32]))) - (cd[196] * cd[68]) /′ 10^18 * cd[260]) - (cd[164] * cd[260]) / 10000 wei
                                       gas gas_remaining wei
                              else:
                                  call block.coinbase with:
                                     value eth.balance(this.address) wei
                                       gas gas_remaining wei
                      require ext_call.success


