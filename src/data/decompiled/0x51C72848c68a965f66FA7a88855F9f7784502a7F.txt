# Palkeoramix decompiler. 
#
#  I failed with these: 
#  - unknown029074ce()
#  All the rest is below.
#

def storage:
  isActive is uint8 at storage 0
  stor1 is mapping of uint8 at storage 1
  stor2 is mapping of uint8 at storage 2
  stor3 is mapping of uint8 at storage 3
  stor4 is mapping of uint8 at storage 4
  stor5 is mapping of uint8 at storage 5
  stor6 is uint256 at storage 6
  stor7 is mapping of uint256 at storage 7
  stor8 is uint256 at storage 8
  stor9 is mapping of uint256 at storage 9
  stor10 is mapping of uint8 at storage 10
  stor11 is mapping of uint8 at storage 11
  stor12 is mapping of uint8 at storage 12
  unknown692e3a95Address is address at storage 13
  unknownd73c2f66Address is address at storage 14
  stor15 is uint8 at storage 15 offset 160
  stor15 is uint8 at storage 15 offset 168
  unknown628bcd8bAddress is address at storage 15
  stor16 is mapping of uint8 at storage 16
  stor103110227869869686568986787740633315150991662862367176801407715749787711536140 is array of uint256 at storage 0xe3f652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0c
  stor103110227869869686568986787740633315150991662862367176801407715749787711536141 is array of struct at storage 0xe3f652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d
  stor110349606679412691172957834289542550319383271247755660854362242977991410020066 is array of uint256 at storage 0xf3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee2
  stor111414077815863400510004064629973595961579173665589224203503662149373724986686 is array of uint256 at storage 0xf652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3e
  stor115318516691241118471718703228501059160351403813751792683111674144484087260013 is array of uint256 at storage 0xfef3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636d
  stor115318516691241118471718703228501059160351403813751792683111674144484087260014 is array of struct at storage 0xfef3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636e

def isActive(): # not payable
  require calldata.size - 4 >=′ 0
  return bool(isActive)

def _operators(address _param1): # not payable
  require calldata.size - 4 >=′ 32
  require not -Mask(96, 160, _param1)
  return bool(stor2[address(_param1)])

def unknown5bc6665d(uint256 _param1): # not payable
  require calldata.size - 4 >=′ 32
  require not -Mask(96, 160, _param1)
  return bool(stor11[address(_param1)])

def unknown628bcd8b(): # not payable
  require calldata.size - 4 >=′ 0
  return unknown628bcd8bAddress

def unknown6650eb1e(uint256 _param1): # not payable
  require calldata.size - 4 >=′ 32
  require not -Mask(96, 160, _param1)
  return bool(stor10[address(_param1)])

def unknown692e3a95(): # not payable
  require calldata.size - 4 >=′ 0
  return unknown692e3a95Address

def unknownbb25faea(uint256 _param1): # not payable
  require calldata.size - 4 >=′ 32
  require not -Mask(96, 160, _param1)
  return bool(stor12[address(_param1)])

def unknownd368093d(uint128 _param1): # not payable
  require calldata.size - 4 >=′ 32
  require not -Mask(96, 160, _param1)
  return bool(stor5[address(_param1)])

def unknownd73c2f66(): # not payable
  require calldata.size - 4 >=′ 0
  return unknownd73c2f66Address

def unknownea3c986d(uint128 _param1): # not payable
  require calldata.size - 4 >=′ 32
  require not -Mask(96, 160, _param1)
  return bool(stor3[address(_param1)])

def unknownecfdae1a(uint256 _param1): # not payable
  require calldata.size - 4 >=′ 32
  require not -Mask(96, 160, _param1)
  return bool(stor1[address(_param1)])

def unknownfc6594ef(uint256 _param1): # not payable
  require calldata.size - 4 >=′ 32
  require not -Mask(96, 160, _param1)
  return bool(stor4[address(_param1)])

def _fallback(?): # not payable, default function
  require calldata.size - 4 >=′ 32
  require not -Mask(96, 160, _param1)
  return bool(stor16[address(_param1)])

#
#  Regular functions
#

def unknown481c42a2(): # not payable
  require calldata.size - 4 >=′ 0
  return (24 * 3600)

def multiSigOwner(): # not payable
  require calldata.size - 4 >=′ 0
  return 0xce466fc694c971b95bb1193e494942e22197f759

def unknown1e6934b6(): # not payable
  require calldata.size - 4 >=′ 0
  return 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2

def accessControlRegistry(): # not payable
  require calldata.size - 4 >=′ 0
  return 0x7ff4ed8ab94c849b812622eb462682208be06b93

def unknown3794bbc4(): # not payable
  require calldata.size - 4 >=′ 0
  return 0xda11e33ac8fa5160b7b90b53bdd9ffed455c77446a381338e4bc1673dc8d489

def unknown10a43720(): # not payable
  require calldata.size - 4 >=′ 0
  return 0xc4da52dc00000000000000000000000000000000000000000000000000000000

def unknown1132fb89(): # not payable
  require calldata.size - 4 >=′ 0
  return 0x3349cb1d48fb20662e6095e6479f18fe92f1cdcfa7083feba86a52b0e0b47da7

def unknown3bb6ea1e(): # not payable
  require calldata.size - 4 >=′ 0
  return 0x694f935c77678723ade3382dc6b12cdbad34911e45c1fdf18a2919ca4507229b

def unknown3c54863c(): # not payable
  require calldata.size - 4 >=′ 0
  return 0xa15540b82ec51595ba5a0eb42fe10614cacbdd68a77f47e067638ec1ecdcad74

def unknown4103f237(): # not payable
  require calldata.size - 4 >=′ 0
  return 0x4a835202d60ca5f5c7b4d843f8f5b32c1010d0101183f53cb87e7278cac1506b

def unknown47503b3d(): # not payable
  require calldata.size - 4 >=′ 0
  return 0x9952537ab17bc321c435545199d81e39dd24481206e94617263826f8d413013e

def unknown48ea3731(): # not payable
  require calldata.size - 4 >=′ 0
  return 0x42b40d72274ce0717425763fa72c9c163c03cc39120843201fe659e2a4ba0ecb

def unknowna03dc130(): # not payable
  require calldata.size - 4 >=′ 0
  return 0xfe731b89600e8e0f7e24df75443f6beea0a9215f2b20688a2f38548c0aa52f7a

def unknowna93f9118(): # not payable
  require calldata.size - 4 >=′ 0
  return 0x6cc14d89329abdf9fd3c381ad952536dfd2b607e27c55fd69a131af00c5de588

def unknownb221bd4b(): # not payable
  require calldata.size - 4 >=′ 0
  return 0x9d72fc4d06849ee87a319b3fc6aa1dc9403947e59168f4dbfdd67adeaa6fb3f3

def unknownc249597c(): # not payable
  require calldata.size - 4 >=′ 0
  return 0xa1939ff690b675030353919731519dbbe36f04e2789275a109cc765f66cf2990

def unknowne457acdd(): # not payable
  require calldata.size - 4 >=′ 0
  return 0x18d95d9da8db151379226c1975258bfcd99b3de30e212a3fdf374ed7b277b17f

def unknowne6ac82d2(): # not payable
  require calldata.size - 4 >=′ 0
  return 0x1058846c60f6859362a916b9ac3d89a87bcc7068167c55e62515eec51cb0dff8

def unknown6b410e34(): # not payable
  require calldata.size - 4 >=′ 0
  if caller != 0xce466fc694c971b95bb1193e494942e22197f759:
      revert with Error(string reason), 'H2'
  isActive = 1
  return 0

def unknown6d66ea05(): # not payable
  require calldata.size - 4 >=′ 0
  if not stor2[caller]:
      if not stor3[caller]:
          if not stor1[caller]:
              if caller != 0xce466fc694c971b95bb1193e494942e22197f759:
                  if caller != 0x7ff4ed8ab94c849b812622eb462682208be06b93:
                      revert with Error(string reason), 'H11'
  if not unknown692e3a95Address:
      revert with Error(string reason), 'H24'
  if unknown628bcd8bAddress:
      revert with Error(string reason), 'H27'
  revert with Error(string reason), 'H25'

def unknownb0c39a1e(): # not payable
  require calldata.size - 4 >=′ 0
  if not stor2[caller]:
      if not stor3[caller]:
          if not stor1[caller]:
              if caller != 0xce466fc694c971b95bb1193e494942e22197f759:
                  if caller != 0x7ff4ed8ab94c849b812622eb462682208be06b93:
                      revert with Error(string reason), 'H11'
  if not unknown692e3a95Address:
      revert with Error(string reason), 'H24'
  if unknownd73c2f66Address:
      revert with Error(string reason), 'H27'
  revert with Error(string reason), 'H25'

def unknownae9779c6(uint256 _param1): # not payable
  require calldata.size - 4 >=′ 32
  if not isActive:
      revert with Error(string reason), 'H1'
  if not stor3[caller]:
      revert with Error(string reason), 'H28'
  call 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.deposit() with:
     value _param1 wei
       gas gas_remaining wei
  if return_data.size:
      if return_data.size > LOCK8605463013():
          revert with 0, 65
      if ceil32(ceil32(return_data.size)) + 161 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 65 < 64:
          revert with 0, 65
  if not ext_call.success:
      revert with Error(string reason), 'H14'
  else:
      return 0

def unknown2197159c(uint256 _param1): # not payable
  require calldata.size - 4 >=′ 32
  if not isActive:
      revert with Error(string reason), 'H1'
  if not stor3[caller]:
      revert with Error(string reason), 'H28'
  call 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.withdraw(uint256 amount) with:
       gas gas_remaining wei
      args _param1
  if return_data.size:
      if return_data.size > LOCK8605463013():
          revert with 0, 65
      if ceil32(ceil32(return_data.size)) + 193 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 97 < 96:
          revert with 0, 65
  if not ext_call.success:
      revert with Error(string reason), 'H14'
  else:
      return 0

def unknown8b954c70(): # not payable
  require calldata.size - 4 >=′ 0
  if not isActive:
      revert with Error(string reason), 'H1'
  if caller != 0xce466fc694c971b95bb1193e494942e22197f759:
      revert with Error(string reason), 'H2'
  if not unknown692e3a95Address:
      revert with Error(string reason), 'H24'
  if not unknownd73c2f66Address:
      revert with Error(string reason), 'H25'
  require ext_code.size(unknownd73c2f66Address)
  call unknownd73c2f66Address.authorize(address adr) with:
       gas gas_remaining wei
      args unknown692e3a95Address
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  uint8(stor15.field_160) = 1
  log 0x717203b0 
  return 0

def unknown34248ee5(): # not payable
  require calldata.size - 4 >=′ 0
  if not isActive:
      revert with Error(string reason), 'H1'
  if caller != 0xce466fc694c971b95bb1193e494942e22197f759:
      revert with Error(string reason), 'H2'
  if not unknown692e3a95Address:
      revert with Error(string reason), 'H24'
  if not unknown628bcd8bAddress:
      revert with Error(string reason), 'H25'
  require ext_code.size(unknown628bcd8bAddress)
  call unknown628bcd8bAddress.registerAllowedOrderSigner(address signer, bool allowed) with:
       gas gas_remaining wei
      args unknown692e3a95Address, 1
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  uint8(stor15.field_168) = 1
  log 0xe2a15194 
  return 0

def unknownc4da52dc(uint128 _param1, uint128 _param2, uint128 _param3, uint256 _param4): # not payable
  require calldata.size - 4 >=′ 160
  require not -Mask(96, 160, _param1)
  require not -Mask(96, 160, _param2)
  require not -Mask(96, 160, _param3)
  if not stor12[caller]:
      revert with Error(string reason), 'H7'
  if not stor2[tx.origin]:
      revert with Error(string reason), 'H31'
  call _param3.transfer(address recipient, uint256 amount) with:
       gas gas_remaining wei
      args caller, _param4
  if return_data.size:
      if return_data.size > LOCK8605463013():
          revert with 0, 65
      if ceil32(ceil32(return_data.size)) + 225 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
          revert with 0, 65
      else:
          return 0
  else:
      return 0

def unknownada00694(): # not payable
  require calldata.size - 4 >=′ 0
  mem[96] = stor6
  idx = 0
  s = 0xe3f652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d
  t = 128
  while idx < stor6:
      mem[t] = stor[s]
      idx = idx + 1
      s = s + 1
      t = t + 32
      continue 
  if floor32(stor6) + 97 > LOCK8605463013() or floor32(stor6) + 97 < 96:
      revert with 0, 65
  mem[floor32(stor6) + 97] = 32
  mem[floor32(stor6) + 129] = stor6
  idx = 0
  s = 128
  t = floor32(stor6) + 161
  while idx < stor6:
      mem[t] = mem[s + 12 len 20]
      idx = idx + 1
      s = s + 32
      t = t + 32
      continue 
  return Array(len=stor6, data=mem[floor32(stor6) + 161 len 32 * stor6])

def getAllApprovedTokens(): # not payable
  require calldata.size - 4 >=′ 0
  mem[96] = stor8
  idx = 0
  s = 0xfef3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636e
  t = 128
  while idx < stor8:
      mem[t] = stor[s]
      idx = idx + 1
      s = s + 1
      t = t + 32
      continue 
  if floor32(stor8) + 97 > LOCK8605463013() or floor32(stor8) + 97 < 96:
      revert with 0, 65
  mem[floor32(stor8) + 97] = 32
  mem[floor32(stor8) + 129] = stor8
  idx = 0
  s = 128
  t = floor32(stor8) + 161
  while idx < stor8:
      mem[t] = mem[s + 12 len 20]
      idx = idx + 1
      s = s + 32
      t = t + 32
      continue 
  return Array(len=stor8, data=mem[floor32(stor8) + 161 len 32 * stor8])

def isValidSignature(bytes32 _param1, bytes _param2): # not payable
  require calldata.size - 4 >=′ 64
  require _param2 <= LOCK8605463013()
  require _param2 + 35 <′ calldata.size
  if _param2.length > LOCK8605463013():
      revert with 0, 65
  if ceil32(ceil32(_param2.length)) + 97 > LOCK8605463013() or ceil32(ceil32(_param2.length)) + 97 < 96:
      revert with 0, 65
  require _param2 + _param2.length + 36 <= calldata.size
  mem[128 len _param2.length] = _param2[all]
  mem[_param2.length + 128] = 0
  if not isActive:
      revert with Error(string reason), 'H1'
  if not stor16[caller]:
      revert with Error(string reason), 'H19'
  if not unknown692e3a95Address:
      revert with Error(string reason), 'H23'
  if _param2.length != 65:
      revert with Error(string reason), 'ECDSA: invalid signature length'
  if mem[160] <= 0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0:
      revert with Error(string reason), 'ECDSA: invalid signature 'v' value'
  revert with Error(string reason), 'ECDSA: invalid signature 's' value'

def unknown0070c82a(uint256 _param1, uint128 _param2, uint256 _param3, uint256 _param4, uint256 _param5, uint256 _param6) payable: 
  require calldata.size - 4 >=′ 192
  require not -Mask(96, 160, _param2)
  if not isActive:
      revert with Error(string reason), 'H1'
  if not stor12[address(_param2)]:
      revert with Error(string reason), 'H7'
  if not stor2[caller]:
      revert with Error(string reason), 'H4'
  require ext_code.size(address(_param2))
  call address(_param2).exchange(uint256 _indexIn, uint256 _indexOut, uint256 _amountIn, uint256 _minAmountOut) with:
       gas gas_remaining wei
      args _param3, _param4, _param5, _param6
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  if _param1:
      if not stor5[block.coinbase]:
          revert with Error(string reason), 'H17'
      call block.coinbase with:
         value _param1 wei
           gas 0 wei
      if return_data.size:
          if return_data.size > LOCK8605463013():
              revert with 0, 65
          if ceil32(ceil32(return_data.size)) + 97 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 97 < 96:
              revert with 0, 65
          else:
              return 0
      else:
          return 0
  else:
      return 0

def uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes data): # not payable
  require calldata.size - 4 >=′ 96
  require data <= LOCK8605463013()
  require data + 35 <′ calldata.size
  if data.length > LOCK8605463013():
      revert with 0, 65
  if ceil32(ceil32(data.length)) + 97 > LOCK8605463013() or ceil32(ceil32(data.length)) + 97 < 96:
      revert with 0, 65
  require data + data.length + 36 <= calldata.size
  mem[128 len data.length] = data[all]
  mem[data.length + 128] = 0
  if not stor11[caller]:
      revert with Error(string reason), 'H30'
  if ceil32(ceil32(data.length)) + 225 > LOCK8605463013() or 225 < 97:
      revert with 0, 65
  if amount0Delta <=′ 0:
      call Mask(96, 0, data.length), mem[128 len 20].transfer(address recipient, uint256 amount) with:
           gas gas_remaining wei
          args caller, amount1Delta
  else:
      call Mask(96, 0, data.length), mem[128 len 20].transfer(address recipient, uint256 amount) with:
           gas gas_remaining wei
          args caller, amount0Delta
  if return_data.size:
      if return_data.size > LOCK8605463013():
          revert with 0, 65
      if ceil32(ceil32(data.length)) + ceil32(ceil32(return_data.size)) + 226 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
          revert with 0, 65
      else:
          return 0
  else:
      return 0

def unknown484e39c3(uint256 _param1, uint128 _param2, uint256 _param3, uint256 _param4, uint256 _param5, uint256 _param6, uint256 _param7) payable: 
  require calldata.size - 4 >=′ 224
  require not -Mask(96, 160, _param2)
  if not isActive:
      revert with Error(string reason), 'H1'
  if _param7 < block.timestamp:
      revert with Error(string reason), 'H8'
  if not isActive:
      revert with Error(string reason), 'H1'
  if not stor12[address(_param2)]:
      revert with Error(string reason), 'H7'
  if not stor2[caller]:
      revert with Error(string reason), 'H4'
  require ext_code.size(address(_param2))
  call address(_param2).exchange(uint256 _indexIn, uint256 _indexOut, uint256 _amountIn, uint256 _minAmountOut) with:
       gas gas_remaining wei
      args _param3, _param4, _param5, _param6
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  if _param1:
      if not stor5[block.coinbase]:
          revert with Error(string reason), 'H17'
      call block.coinbase with:
         value _param1 wei
           gas 0 wei
      if return_data.size:
          if return_data.size > LOCK8605463013():
              revert with 0, 65
          if ceil32(ceil32(return_data.size)) + 97 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 97 < 96:
              revert with 0, 65
          else:
              return 0
      else:
          return 0
  else:
      return 0

def unknowne2f48005(uint128 _param1, uint256 _param2, uint256 _param3, uint128 _param4, uint256 _param5, uint256 _param6, uint256 _param7) payable: 
  require calldata.size - 4 >=′ 224
  require not -Mask(96, 160, _param1)
  require not _param2 - ('signextend', 2, ('param', '_param2'))
  require not _param3 - ('signextend', 2, ('param', '_param3'))
  require not -Mask(128, 128, _param4)
  if not isActive:
      revert with Error(string reason), 'H1'
  if not stor2[caller]:
      revert with Error(string reason), 'H4'
  if not stor11[address(_param1)]:
      revert with Error(string reason), 'H30'
  if _param7 < block.timestamp:
      revert with Error(string reason), 'H8'
  call address(_param1).mint(address recipient, int24 tickLower, int24 tickUpper, uint128 amount, bytes data) with:
       gas gas_remaining wei
      args this.address, ('signextend', 2, ('param', '_param2')), ('signextend', 2, ('param', '_param3')), _param4 << 128, 160, 0
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  if not ext_call.success:
      if _param5 > 0:
          revert with Error(string reason), 'S15'
      if _param6 > 0:
          revert with Error(string reason), 'S15'
  else:
      if return_data.size < 64:
          if ceil32(return_data.size) + 96 > LOCK8605463013() or ceil32(return_data.size) + 96 < 96:
              revert with 0, 65
          require return_data.size >=′ 64
      if _param5 > ext_call.return_data[0]:
          revert with Error(string reason), 'S15'
      if _param6 > ext_call.return_data[32]:
          revert with Error(string reason), 'S15'
  return 0

def unknown5afcf03d(uint256 _param1, uint128 _param2, uint256 _param3, uint256 _param4, uint256 _param5, uint256 _param6, uint256 _param7, uint256 _param8) payable: 
  require calldata.size - 4 >=′ 256
  require not -Mask(96, 160, _param2)
  require not _param3 - ('signextend', 15, ('param', '_param3'))
  require not _param4 - ('signextend', 15, ('param', '_param4'))
  require not bool(_param7) - _param7
  if not isActive:
      revert with Error(string reason), 'H1'
  if not stor12[address(_param2)]:
      revert with Error(string reason), 'H7'
  if not stor2[caller]:
      revert with Error(string reason), 'H4'
  if block.timestamp > _param8:
      revert with Error(string reason), 'H8'
  require ext_code.size(address(_param2))
  if not _param7:
      call address(_param2).exchange(int128 i, int128 j, uint256 _dx, uint256 _min_dy) with:
           gas gas_remaining wei
          args ('signextend', 15, ('param', '_param3')), ('signextend', 15, ('param', '_param4')), _param5, _param6
  else:
      call address(_param2).exchange(int128 i, int128 j, uint256 _dx, uint256 _min_dy) with:
         value _param5 wei
           gas gas_remaining wei
          args ('signextend', 15, ('param', '_param3')), ('signextend', 15, ('param', '_param4')), _param5, _param6
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  if _param1:
      if not stor5[block.coinbase]:
          revert with Error(string reason), 'H17'
      call block.coinbase with:
         value _param1 wei
           gas 0 wei
      if return_data.size:
          if return_data.size > LOCK8605463013():
              revert with 0, 65
          if ceil32(ceil32(return_data.size)) + 97 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 97 < 96:
              revert with 0, 65
          else:
              return 0
      else:
          return 0
  else:
      return 0

def unknownfb034fb2(uint256 _param1, uint128 _param2, uint256 _param3, uint256 _param4, uint256 _param5, uint256 _param6) payable: 
  require calldata.size - 4 >=′ 192
  require not -Mask(96, 160, _param2)
  if not isActive:
      revert with Error(string reason), 'H1'
  if not stor2[caller]:
      revert with Error(string reason), 'H4'
  if not stor12[address(_param2)]:
      revert with Error(string reason), 'H7'
  call address(_param2).exchange_extended(uint256 i, uint256 j, uint256 dx, uint256 min_dy, bool use_eth, address sender, address receiver, bytes32 cb) with:
       gas gas_remaining wei
      args _param3, _param4, _param5, _param6, 0, this.address, this.address, 0xc4da52dc00000000000000000000000000000000000000000000000000000000
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  if not ext_call.success:
      if _param1:
          if not stor5[block.coinbase]:
              revert with Error(string reason), 'H17'
          call block.coinbase with:
             value _param1 wei
               gas 0 wei
          if return_data.size:
              if return_data.size > LOCK8605463013():
                  revert with 0, 65
              if ceil32(ceil32(return_data.size)) + 97 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 97 < 96:
                  revert with 0, 65
  else:
      if 32 <= return_data.size:
          if _param1:
              if not stor5[block.coinbase]:
                  revert with Error(string reason), 'H17'
              call block.coinbase with:
                 value _param1 wei
                   gas 0 wei
              if return_data.size:
                  if return_data.size > LOCK8605463013():
                      revert with 0, 65
                  if ceil32(ceil32(return_data.size)) + 129 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 33 < 32:
                      revert with 0, 65
      else:
          if ceil32(return_data.size) + 96 > LOCK8605463013() or ceil32(return_data.size) + 96 < 96:
              revert with 0, 65
          require return_data.size >=′ 32
          if _param1:
              if not stor5[block.coinbase]:
                  revert with Error(string reason), 'H17'
              call block.coinbase with:
                 value _param1 wei
                   gas 0 wei
              if return_data.size:
                  if return_data.size > LOCK8605463013():
                      revert with 0, 65
                  if ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 97 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 1 < 0:
                      revert with 0, 65
  return 0

def unknownf7e846e9(uint256 _param1, uint128 _param2, uint256 _param3, uint256 _param4, uint256 _param5, uint256 _param6, uint256 _param7, uint256 _param8) payable: 
  require calldata.size - 4 >=′ 256
  require not -Mask(96, 160, _param2)
  require not _param3 - ('signextend', 15, ('param', '_param3'))
  require not _param4 - ('signextend', 15, ('param', '_param4'))
  require not bool(_param7) - _param7
  if not isActive:
      revert with Error(string reason), 'H1'
  if not stor12[address(_param2)]:
      revert with Error(string reason), 'H7'
  if not stor2[caller]:
      revert with Error(string reason), 'H4'
  if block.timestamp > _param8:
      revert with Error(string reason), 'H8'
  if not _param7:
      call address(_param2).exchange(int128 i, int128 j, uint256 _dx, uint256 _min_dy) with:
           gas gas_remaining wei
          args ('signextend', 15, ('param', '_param3')), ('signextend', 15, ('param', '_param4')), _param5, _param6
  else:
      call address(_param2).exchange(int128 i, int128 j, uint256 _dx, uint256 _min_dy) with:
         value _param5 wei
           gas gas_remaining wei
          args ('signextend', 15, ('param', '_param3')), ('signextend', 15, ('param', '_param4')), _param5, _param6
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  if not ext_call.success:
      if _param1:
          if not stor5[block.coinbase]:
              revert with Error(string reason), 'H17'
          call block.coinbase with:
             value _param1 wei
               gas 0 wei
          if return_data.size:
              if return_data.size > LOCK8605463013():
                  revert with 0, 65
              if ceil32(ceil32(return_data.size)) + 97 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 97 < 96:
                  revert with 0, 65
  else:
      if return_data.size >= 32:
          if _param1:
              if not stor5[block.coinbase]:
                  revert with Error(string reason), 'H17'
              call block.coinbase with:
                 value _param1 wei
                   gas 0 wei
              if return_data.size:
                  if return_data.size > LOCK8605463013():
                      revert with 0, 65
                  if ceil32(ceil32(return_data.size)) + 129 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 33 < 32:
                      revert with 0, 65
      else:
          if ceil32(return_data.size) + 96 > LOCK8605463013() or ceil32(return_data.size) + 96 < 96:
              revert with 0, 65
          require return_data.size >=′ 32
          if _param1:
              if not stor5[block.coinbase]:
                  revert with Error(string reason), 'H17'
              call block.coinbase with:
                 value _param1 wei
                   gas 0 wei
              if return_data.size:
                  if return_data.size > LOCK8605463013():
                      revert with 0, 65
                  if ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 97 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 1 < 0:
                      revert with 0, 65
  return 0

def unknowna1c20303(uint256 _param1, uint128 _param2, uint128 _param3, uint256 _param4, uint256 _param5, uint256 _param6) payable: 
  require calldata.size - 4 >=′ 192
  require not -Mask(96, 160, _param2)
  require not -Mask(96, 160, _param3)
  if not isActive:
      revert with Error(string reason), 'H1'
  if not stor10[address(_param2)]:
      revert with Error(string reason), 'H29'
  if not stor2[caller]:
      revert with Error(string reason), 'H4'
  call _param3.transfer(address recipient, uint256 amount) with:
       gas gas_remaining wei
      args address(_param2), _param4
  if not return_data.size:
      require ext_code.size(address(_param2))
      call address(_param2).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
           gas gas_remaining wei
          args _param5, _param6, this.address, 128, 0
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      if ext_call.success:
          if _param1:
              if not stor5[block.coinbase]:
                  revert with Error(string reason), 'H17'
              call block.coinbase with:
                 value _param1 wei
                   gas 0 wei
              if return_data.size:
                  if return_data.size > LOCK8605463013():
                      revert with 0, 65
                  if ceil32(ceil32(return_data.size)) + 225 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 225 < 224:
                      revert with 0, 65
      else:
          if _param1:
              if not stor5[block.coinbase]:
                  revert with Error(string reason), 'H17'
              call block.coinbase with:
                 value _param1 wei
                   gas 0 wei
              if return_data.size:
                  if return_data.size > LOCK8605463013():
                      revert with 0, 65
                  if ceil32(ceil32(return_data.size)) + 225 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                      revert with 0, 65
  else:
      if return_data.size > LOCK8605463013():
          revert with 0, 65
      if ceil32(ceil32(return_data.size)) + 225 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
          revert with 0, 65
      require ext_code.size(address(_param2))
      call address(_param2).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
           gas gas_remaining wei
          args _param5, _param6, this.address, 128, 0
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      if not ext_call.success:
          if _param1:
              if not stor5[block.coinbase]:
                  revert with Error(string reason), 'H17'
              call block.coinbase with:
                 value _param1 wei
                   gas 0 wei
              if return_data.size:
                  if return_data.size > LOCK8605463013():
                      revert with 0, 65
                  if (2 * ceil32(ceil32(return_data.size))) + 226 > LOCK8605463013() or (2 * ceil32(ceil32(return_data.size))) + 130 < ceil32(ceil32(return_data.size)) + 129:
                      revert with 0, 65
      else:
          if ceil32(ceil32(return_data.size)) + 225 > LOCK8605463013():
              revert with 0, 65
          if _param1:
              if not stor5[block.coinbase]:
                  revert with Error(string reason), 'H17'
              call block.coinbase with:
                 value _param1 wei
                   gas 0 wei
              if return_data.size:
                  if return_data.size > LOCK8605463013():
                      revert with 0, 65
                  if (2 * ceil32(ceil32(return_data.size))) + 226 > LOCK8605463013() or (2 * ceil32(ceil32(return_data.size))) + 226 < ceil32(ceil32(return_data.size)) + 225:
                      revert with 0, 65
  return 0

def unknown30a28ffc(uint256 _param1, uint128 _param2, uint128 _param3, uint256 _param4, uint256 _param5, uint256 _param6, uint256 _param7) payable: 
  require calldata.size - 4 >=′ 224
  require not -Mask(96, 160, _param2)
  require not -Mask(96, 160, _param3)
  if not isActive:
      revert with Error(string reason), 'H1'
  if _param7 < block.timestamp:
      revert with Error(string reason), 'H8'
  if not isActive:
      revert with Error(string reason), 'H1'
  if not stor10[address(_param2)]:
      revert with Error(string reason), 'H29'
  if not stor2[caller]:
      revert with Error(string reason), 'H4'
  call _param3.transfer(address recipient, uint256 amount) with:
       gas gas_remaining wei
      args address(_param2), _param4
  if not return_data.size:
      require ext_code.size(address(_param2))
      call address(_param2).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
           gas gas_remaining wei
          args _param5, _param6, this.address, 128, 0
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      if ext_call.success:
          if _param1:
              if not stor5[block.coinbase]:
                  revert with Error(string reason), 'H17'
              call block.coinbase with:
                 value _param1 wei
                   gas 0 wei
              if return_data.size:
                  if return_data.size > LOCK8605463013():
                      revert with 0, 65
                  if ceil32(ceil32(return_data.size)) + 225 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 225 < 224:
                      revert with 0, 65
      else:
          if _param1:
              if not stor5[block.coinbase]:
                  revert with Error(string reason), 'H17'
              call block.coinbase with:
                 value _param1 wei
                   gas 0 wei
              if return_data.size:
                  if return_data.size > LOCK8605463013():
                      revert with 0, 65
                  if ceil32(ceil32(return_data.size)) + 225 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                      revert with 0, 65
  else:
      if return_data.size > LOCK8605463013():
          revert with 0, 65
      if ceil32(ceil32(return_data.size)) + 225 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
          revert with 0, 65
      require ext_code.size(address(_param2))
      call address(_param2).swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) with:
           gas gas_remaining wei
          args _param5, _param6, this.address, 128, 0
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      if not ext_call.success:
          if _param1:
              if not stor5[block.coinbase]:
                  revert with Error(string reason), 'H17'
              call block.coinbase with:
                 value _param1 wei
                   gas 0 wei
              if return_data.size:
                  if return_data.size > LOCK8605463013():
                      revert with 0, 65
                  if (2 * ceil32(ceil32(return_data.size))) + 226 > LOCK8605463013() or (2 * ceil32(ceil32(return_data.size))) + 130 < ceil32(ceil32(return_data.size)) + 129:
                      revert with 0, 65
      else:
          if ceil32(ceil32(return_data.size)) + 225 > LOCK8605463013():
              revert with 0, 65
          if _param1:
              if not stor5[block.coinbase]:
                  revert with Error(string reason), 'H17'
              call block.coinbase with:
                 value _param1 wei
                   gas 0 wei
              if return_data.size:
                  if return_data.size > LOCK8605463013():
                      revert with 0, 65
                  if (2 * ceil32(ceil32(return_data.size))) + 226 > LOCK8605463013() or (2 * ceil32(ceil32(return_data.size))) + 226 < ceil32(ceil32(return_data.size)) + 225:
                      revert with 0, 65
  return 0

def unknown771d503f(uint256 _param1, uint128 _param2, uint256 _param3, uint256 _param4, uint256 _param5, array _param6) payable: 
  require calldata.size - 4 >=′ 192
  require not -Mask(96, 160, _param2)
  require not bool(_param5) - _param5
  require _param6 <= LOCK8605463013()
  require _param6 + 35 <′ calldata.size
  require _param6.length <= LOCK8605463013()
  require _param6 + _param6.length + 36 <= calldata.size
  if not isActive:
      revert with Error(string reason), 'H1'
  if not stor11[address(_param2)]:
      revert with Error(string reason), 'H30'
  if not stor2[caller]:
      revert with Error(string reason), 'H4'
  if not _param5:
      call address(_param2).swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes data) with:
           gas gas_remaining wei
          args address(this.address), bool(_param5), _param3, 0xfffd8963efd1fc6a506488495d951d5263988d25, Array(len=_param6.length, data=_param6[all])
  else:
      call address(_param2).swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes data) with:
           gas gas_remaining wei
          args address(this.address), bool(_param5), _param3, 4295128740, Array(len=_param6.length, data=_param6[all])
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  if not ext_call.success:
      if _param4 > 0:
          revert with Error(string reason), 'S13'
      if _param1:
          if not stor5[block.coinbase]:
              revert with Error(string reason), 'H17'
          call block.coinbase with:
             value _param1 wei
               gas 0 wei
          if return_data.size:
              if return_data.size > LOCK8605463013():
                  revert with 0, 65
              if ceil32(ceil32(return_data.size)) + 97 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 97 < 96:
                  revert with 0, 65
  else:
      if return_data.size >= 64:
          if ext_call.return_data[0] <=′ 0:
              if ext_call.return_data[0] == 0x8000000000000000000000000000000000000000000000000000000000000000:
                  revert with 0, 17
              if _param4 > -ext_call.return_data[0]:
                  revert with Error(string reason), 'S13'
          else:
              if ext_call.return_data[32] == 0x8000000000000000000000000000000000000000000000000000000000000000:
                  revert with 0, 17
              if _param4 > -ext_call.return_data[32]:
                  revert with Error(string reason), 'S13'
          if _param1:
              if not stor5[block.coinbase]:
                  revert with Error(string reason), 'H17'
              call block.coinbase with:
                 value _param1 wei
                   gas 0 wei
              if return_data.size:
                  if return_data.size > LOCK8605463013():
                      revert with 0, 65
                  if ceil32(ceil32(return_data.size)) + 161 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 65 < 64:
                      revert with 0, 65
      else:
          if ceil32(return_data.size) + 96 > LOCK8605463013() or ceil32(return_data.size) + 96 < 96:
              revert with 0, 65
          require return_data.size >=′ 64
          if ext_call.return_data[0] <=′ 0:
              if ext_call.return_data[0] == 0x8000000000000000000000000000000000000000000000000000000000000000:
                  revert with 0, 17
              if _param4 > -ext_call.return_data[0]:
                  revert with Error(string reason), 'S13'
          else:
              if ext_call.return_data[32] == 0x8000000000000000000000000000000000000000000000000000000000000000:
                  revert with 0, 17
              if _param4 > -ext_call.return_data[32]:
                  revert with Error(string reason), 'S13'
          if _param1:
              if not stor5[block.coinbase]:
                  revert with Error(string reason), 'H17'
              call block.coinbase with:
                 value _param1 wei
                   gas 0 wei
              if return_data.size:
                  if return_data.size > LOCK8605463013():
                      revert with 0, 65
                  if ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 97 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 1 < 0:
                      revert with 0, 65
  return 0

def unknown122067ed(uint256 _param1, uint128 _param2, uint256 _param3, uint256 _param4, uint256 _param5, uint256 _param6, array _param7) payable: 
  require calldata.size - 4 >=′ 224
  require not -Mask(96, 160, _param2)
  require not bool(_param5) - _param5
  require _param7 <= LOCK8605463013()
  require _param7 + 35 <′ calldata.size
  require _param7.length <= LOCK8605463013()
  require _param7 + _param7.length + 36 <= calldata.size
  if not isActive:
      revert with Error(string reason), 'H1'
  if _param6 < block.timestamp:
      revert with Error(string reason), 'H8'
  if not isActive:
      revert with Error(string reason), 'H1'
  if not stor11[address(_param2)]:
      revert with Error(string reason), 'H30'
  if not stor2[caller]:
      revert with Error(string reason), 'H4'
  if not _param5:
      call address(_param2).swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes data) with:
           gas gas_remaining wei
          args address(this.address), bool(_param5), _param3, 0xfffd8963efd1fc6a506488495d951d5263988d25, Array(len=_param7.length, data=_param7[all])
  else:
      call address(_param2).swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes data) with:
           gas gas_remaining wei
          args address(this.address), bool(_param5), _param3, 4295128740, Array(len=_param7.length, data=_param7[all])
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  if not ext_call.success:
      if _param4 > 0:
          revert with Error(string reason), 'S13'
      if _param1:
          if not stor5[block.coinbase]:
              revert with Error(string reason), 'H17'
          call block.coinbase with:
             value _param1 wei
               gas 0 wei
          if return_data.size:
              if return_data.size > LOCK8605463013():
                  revert with 0, 65
              if ceil32(ceil32(return_data.size)) + 97 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 97 < 96:
                  revert with 0, 65
  else:
      if return_data.size >= 64:
          if ext_call.return_data[0] <=′ 0:
              if ext_call.return_data[0] == 0x8000000000000000000000000000000000000000000000000000000000000000:
                  revert with 0, 17
              if _param4 > -ext_call.return_data[0]:
                  revert with Error(string reason), 'S13'
          else:
              if ext_call.return_data[32] == 0x8000000000000000000000000000000000000000000000000000000000000000:
                  revert with 0, 17
              if _param4 > -ext_call.return_data[32]:
                  revert with Error(string reason), 'S13'
          if _param1:
              if not stor5[block.coinbase]:
                  revert with Error(string reason), 'H17'
              call block.coinbase with:
                 value _param1 wei
                   gas 0 wei
              if return_data.size:
                  if return_data.size > LOCK8605463013():
                      revert with 0, 65
                  if ceil32(ceil32(return_data.size)) + 161 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 65 < 64:
                      revert with 0, 65
      else:
          if ceil32(return_data.size) + 96 > LOCK8605463013() or ceil32(return_data.size) + 96 < 96:
              revert with 0, 65
          require return_data.size >=′ 64
          if ext_call.return_data[0] <=′ 0:
              if ext_call.return_data[0] == 0x8000000000000000000000000000000000000000000000000000000000000000:
                  revert with 0, 17
              if _param4 > -ext_call.return_data[0]:
                  revert with Error(string reason), 'S13'
          else:
              if ext_call.return_data[32] == 0x8000000000000000000000000000000000000000000000000000000000000000:
                  revert with 0, 17
              if _param4 > -ext_call.return_data[32]:
                  revert with Error(string reason), 'S13'
          if _param1:
              if not stor5[block.coinbase]:
                  revert with Error(string reason), 'H17'
              call block.coinbase with:
                 value _param1 wei
                   gas 0 wei
              if return_data.size:
                  if return_data.size > LOCK8605463013():
                      revert with 0, 65
                  if ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 97 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 1 < 0:
                      revert with 0, 65
  return 0

def unknown394b1de1(): # not payable
  require calldata.size - 4 >=′ 96
  require cd[4] <= LOCK8605463013()
  require cd[4] + 35 <′ calldata.size
  if ('cd', 4).length > LOCK8605463013():
      revert with 0, 65
  if ceil32(32 * ('cd', 4).length) + 97 > LOCK8605463013() or ceil32(32 * ('cd', 4).length) + 97 < 96:
      revert with 0, 65
  mem[96] = ('cd', 4).length
  require cd[4] + (32 * ('cd', 4).length) + 36 <= calldata.size
  s = 128
  idx = cd[4] + 36
  while idx < cd[4] + (32 * ('cd', 4).length) + 36:
      require not -Mask(96, 160, cd[idx])
      mem[s] = cd[idx]
      s = s + 32
      idx = idx + 32
      continue 
  require cd[36] <= LOCK8605463013()
  require cd[36] + 35 <′ calldata.size
  if ('cd', 36).length > LOCK8605463013():
      revert with 0, 65
  if ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + 98 > LOCK8605463013() or ceil32(32 * ('cd', 36).length) + 98 < 97:
      revert with 0, 65
  mem[ceil32(32 * ('cd', 4).length) + 97] = ('cd', 36).length
  require cd[36] + (32 * ('cd', 36).length) + 36 <= calldata.size
  s = ceil32(32 * ('cd', 4).length) + 129
  idx = cd[36] + 36
  while idx < cd[36] + (32 * ('cd', 36).length) + 36:
      mem[s] = cd[idx]
      s = s + 32
      idx = idx + 32
      continue 
  require cd[68] <= LOCK8605463013()
  require cd[68] + 35 <′ calldata.size
  if ('cd', 68).length > LOCK8605463013():
      revert with 0, 65
  if ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + ceil32(32 * ('cd', 68).length) + 99 > LOCK8605463013() or ceil32(32 * ('cd', 68).length) + 99 < 98:
      revert with 0, 65
  mem[64] = ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + ceil32(32 * ('cd', 68).length) + 99
  mem[ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + 98] = ('cd', 68).length
  require cd[68] + (32 * ('cd', 68).length) + 36 <= calldata.size
  s = ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + 130
  idx = cd[68] + 36
  while idx < cd[68] + (32 * ('cd', 68).length) + 36:
      require not -Mask(96, 160, cd[idx])
      mem[s] = cd[idx]
      s = s + 32
      idx = idx + 32
      continue 
  if not isActive:
      revert with Error(string reason), 'H1'
  mem[0] = caller
  mem[32] = 1
  if not stor1[caller]:
      revert with Error(string reason), 'H5'
  idx = var64002
  while idx < ('cd', 68).length:
      if idx >= ('cd', 68).length:
          revert with 0, 50
      mem[0] = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + 142 len 20]
      mem[32] = 4
      if not stor4[mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + 142 len 20]]:
          revert with Error(string reason), 'H6'
      if idx == -1:
          revert with 0, 17
      idx = idx + 1
      continue 
  if ('cd', 36).length != ('cd', 4).length:
      revert with Error(string reason), 'H15'
  if ('cd', 68).length != ('cd', 36).length:
      revert with Error(string reason), 'H15'
  idx = var102002
  while idx < ('cd', 4).length:
      if idx >= mem[96]:
          revert with 0, 50
      _283 = mem[(32 * idx) + 128]
      if idx >= mem[ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + 98]:
          revert with 0, 50
      _285 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + 130]
      if idx >= mem[ceil32(32 * ('cd', 4).length) + 97]:
          revert with 0, 50
      _287 = mem[(32 * idx) + ceil32(32 * ('cd', 4).length) + 129]
      _288 = mem[64]
      mem[mem[64] + 32] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000
      mem[mem[64] + 36] = address(_285)
      mem[mem[64] + 68] = _287
      mem[mem[64]] = 68
      if mem[64] + 128 > LOCK8605463013() or mem[64] + 128 < mem[64]:
          revert with 0, 65
      if mem[64] + 192 > LOCK8605463013() or 192 < 128:
          revert with 0, 65
      mem[64] = mem[64] + 192
      mem[_288 + 128] = 32
      mem[_288 + 160] = 'SafeERC20: low-level call failed'
      if not ext_code.size(address(_283)):
          revert with Error(string reason), 'Address: call to non-contract'
      call address(_283).mem[_288 + 32 len 4] with:
           gas gas_remaining wei
          args mem[_288 + 36 len 64]
      if not return_data.size:
          if not ext_call.success:
              if mem[96]:
                  revert with memory
                    from 128
                     len mem[96]
              mem[_288 + 192] = 0x8c379a000000000000000000000000000000000000000000000000000000000
              mem[_288 + 196] = 32
              idx = 0
              while idx < 32:
                  mem[idx + _288 + 260] = mem[_288 + idx + 160]
                  idx = idx + 32
                  continue 
              revert with Error(string reason), 32, 32, mem[_288 + 260]
          if mem[96]:
              require mem[96] >=′ 32
              require not bool(mem[128]) - mem[128]
              if not mem[128]:
                  revert with Error(string reason), 'SafeERC20: ERC20 operation did not succeed'
      else:
          if return_data.size > LOCK8605463013():
              revert with 0, 65
          if _288 + ceil32(ceil32(return_data.size)) + 193 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 193 < 192:
              revert with 0, 65
          mem[64] = _288 + ceil32(ceil32(return_data.size)) + 193
          mem[_288 + 192] = return_data.size
          mem[_288 + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
          if not ext_call.success:
              if return_data.size:
                  revert with ext_call.return_data[0 len return_data.size]
              mem[_288 + ceil32(ceil32(return_data.size)) + 193] = 0x8c379a000000000000000000000000000000000000000000000000000000000
              mem[_288 + ceil32(ceil32(return_data.size)) + 197] = 32
              idx = 0
              while idx < 32:
                  mem[idx + _288 + ceil32(ceil32(return_data.size)) + 261] = mem[_288 + idx + 160]
                  idx = idx + 32
                  continue 
              revert with Error(string reason), 32, 32, mem[_288 + ceil32(ceil32(return_data.size)) + 261]
          if return_data.size:
              require return_data.size >=′ 32
              require not bool(mem[_288 + 224]) - mem[_288 + 224]
              if not mem[_288 + 224]:
                  revert with Error(string reason), 'SafeERC20: ERC20 operation did not succeed'
      if idx == -1:
          revert with 0, 17
      idx = idx + 1
      continue 

def unknownb87d3b28(uint256 _param1, uint128 _param2, uint256 _param3, uint256 _param4, uint128 _param5, uint256 _param6, uint256 _param7, uint256 _param8) payable: 
  require calldata.size - 4 >=′ 256
  require not -Mask(96, 160, _param2)
  require not _param3 - ('signextend', 2, ('param', '_param3'))
  require not _param4 - ('signextend', 2, ('param', '_param4'))
  require not -Mask(128, 128, _param5)
  if not isActive:
      revert with Error(string reason), 'H1'
  if not stor2[caller]:
      revert with Error(string reason), 'H4'
  if not stor11[address(_param2)]:
      revert with Error(string reason), 'H30'
  if _param8 < block.timestamp:
      revert with Error(string reason), 'H8'
  call address(_param2).burn(int24 tickLower, int24 tickUpper, uint128 amount) with:
       gas gas_remaining wei
      args ('signextend', 2, ('param', '_param3')), ('signextend', 2, ('param', '_param4')), _param5
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  if not ext_call.success:
      if _param6 > 0:
          revert with Error(string reason), 'S15'
      if _param7 > 0:
          revert with Error(string reason), 'S15'
      call address(_param2).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
           gas gas_remaining wei
          args this.address, ('signextend', 2, ('param', '_param3')), ('signextend', 2, ('param', '_param4')), LOCK8605463013(), LOCK8605463013()
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      if not ext_call.success:
          if _param1:
              if not stor5[block.coinbase]:
                  revert with Error(string reason), 'H17'
              call block.coinbase with:
                 value _param1 wei
                   gas 0 wei
              if return_data.size:
                  if return_data.size > LOCK8605463013():
                      revert with 0, 65
                  if ceil32(ceil32(return_data.size)) + 97 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 97 < 96:
                      revert with 0, 65
      else:
          if return_data.size >= 64:
              require not -Mask(128, 128, ext_call.return_data[32])
              if _param1:
                  if not stor5[block.coinbase]:
                      revert with Error(string reason), 'H17'
                  call block.coinbase with:
                     value _param1 wei
                       gas 0 wei
                  if return_data.size:
                      if return_data.size > LOCK8605463013():
                          revert with 0, 65
                      if ceil32(ceil32(return_data.size)) + 161 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 65 < 64:
                          revert with 0, 65
          else:
              if ceil32(return_data.size) + 96 > LOCK8605463013() or ceil32(return_data.size) + 96 < 96:
                  revert with 0, 65
              require return_data.size >=′ 64
              require not -Mask(128, 128, ext_call.return_data[32])
              if _param1:
                  if not stor5[block.coinbase]:
                      revert with Error(string reason), 'H17'
                  call block.coinbase with:
                     value _param1 wei
                       gas 0 wei
                  if return_data.size:
                      if return_data.size > LOCK8605463013():
                          revert with 0, 65
                      if ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 97 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 1 < 0:
                          revert with 0, 65
  else:
      if 64 <= return_data.size:
          if _param6 > ext_call.return_data[0]:
              revert with Error(string reason), 'S15'
          if _param7 > ext_call.return_data[32]:
              revert with Error(string reason), 'S15'
          call address(_param2).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
               gas gas_remaining wei
              args this.address, ('signextend', 2, ('param', '_param3')), ('signextend', 2, ('param', '_param4')), LOCK8605463013(), LOCK8605463013()
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          if not ext_call.success:
              if _param1:
                  if not stor5[block.coinbase]:
                      revert with Error(string reason), 'H17'
                  call block.coinbase with:
                     value _param1 wei
                       gas 0 wei
                  if return_data.size:
                      if return_data.size > LOCK8605463013():
                          revert with 0, 65
                      if ceil32(ceil32(return_data.size)) + 161 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 65 < 64:
                          revert with 0, 65
          else:
              if return_data.size >= 64:
                  require not -Mask(128, 128, ext_call.return_data[32])
                  if _param1:
                      if not stor5[block.coinbase]:
                          revert with Error(string reason), 'H17'
                      call block.coinbase with:
                         value _param1 wei
                           gas 0 wei
                      if return_data.size:
                          if return_data.size > LOCK8605463013():
                              revert with 0, 65
                          if ceil32(ceil32(return_data.size)) + 225 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 65 < 64:
                              revert with 0, 65
              else:
                  if ceil32(return_data.size) + 160 > LOCK8605463013() or ceil32(return_data.size) + 160 < 160:
                      revert with 0, 65
                  require return_data.size >=′ 64
                  require not -Mask(128, 128, ext_call.return_data[32])
                  if _param1:
                      if not stor5[block.coinbase]:
                          revert with Error(string reason), 'H17'
                      call block.coinbase with:
                         value _param1 wei
                           gas 0 wei
                      if return_data.size:
                          if return_data.size > LOCK8605463013():
                              revert with 0, 65
                          if ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 161 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 1 < 0:
                              revert with 0, 65
      else:
          if ceil32(return_data.size) + 96 > LOCK8605463013() or ceil32(return_data.size) + 96 < 96:
              revert with 0, 65
          require return_data.size >=′ 64
          if _param6 > ext_call.return_data[0]:
              revert with Error(string reason), 'S15'
          if _param7 > ext_call.return_data[32]:
              revert with Error(string reason), 'S15'
          call address(_param2).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
               gas gas_remaining wei
              args this.address, ('signextend', 2, ('param', '_param3')), ('signextend', 2, ('param', '_param4')), LOCK8605463013(), LOCK8605463013()
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          if not ext_call.success:
              if _param1:
                  if not stor5[block.coinbase]:
                      revert with Error(string reason), 'H17'
                  call block.coinbase with:
                     value _param1 wei
                       gas 0 wei
                  if return_data.size:
                      if return_data.size > LOCK8605463013():
                          revert with 0, 65
                      if ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 97 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 1 < 0:
                          revert with 0, 65
          else:
              if return_data.size >= 64:
                  if ceil32(return_data.size) + 160 > LOCK8605463013() or 160 < 96:
                      revert with 0, 65
                  require not -Mask(128, 128, ext_call.return_data[32])
                  if _param1:
                      if not stor5[block.coinbase]:
                          revert with Error(string reason), 'H17'
                      call block.coinbase with:
                         value _param1 wei
                           gas 0 wei
                      if return_data.size:
                          if return_data.size > LOCK8605463013():
                              revert with 0, 65
                          if ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 161 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 65 < 64:
                              revert with 0, 65
              else:
                  if (2 * ceil32(return_data.size)) + 96 > LOCK8605463013() or 2 * ceil32(return_data.size) < ceil32(return_data.size):
                      revert with 0, 65
                  require return_data.size >=′ 64
                  require not -Mask(128, 128, ext_call.return_data[32])
                  if _param1:
                      if not stor5[block.coinbase]:
                          revert with Error(string reason), 'H17'
                      call block.coinbase with:
                         value _param1 wei
                           gas 0 wei
                      if return_data.size:
                          if return_data.size > LOCK8605463013():
                              revert with 0, 65
                          if (2 * ceil32(return_data.size)) + ceil32(ceil32(return_data.size)) + 97 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 1 < 0:
                              revert with 0, 65
  return 0

def unknown59733e7f(uint256 _param1, uint128 _param2, array _param3): # not payable
  require calldata.size - 4 >=′ 96
  require not -Mask(96, 160, _param2)
  require _param3 <= LOCK8605463013()
  require _param3 + 35 <′ calldata.size
  if _param3.length > LOCK8605463013():
      revert with 0, 65
  if ceil32(ceil32(_param3.length)) + 97 > LOCK8605463013() or ceil32(ceil32(_param3.length)) + 97 < 96:
      revert with 0, 65
  mem[64] = ceil32(ceil32(_param3.length)) + 97
  mem[96] = _param3.length
  require _param3 + _param3.length + 36 <= calldata.size
  mem[128 len _param3.length] = _param3[all]
  mem[_param3.length + 128] = 0
  if caller != 0x7ff4ed8ab94c849b812622eb462682208be06b93:
      revert with Error(string reason), 'H3'
  if not _param1 - 0x9952537ab17bc321c435545199d81e39dd24481206e94617263826f8d413013e:
      if not stor2[address(_param2)]:
          revert with Error(string reason), 'H10'
      stor2[address(_param2)] = 0
  else:
      if not _param1 - 0x9d72fc4d06849ee87a319b3fc6aa1dc9403947e59168f4dbfdd67adeaa6fb3f3:
          if not stor3[address(_param2)]:
              revert with Error(string reason), 'H10'
          stor3[address(_param2)] = 0
      else:
          if not _param1 - 0x6cc14d89329abdf9fd3c381ad952536dfd2b607e27c55fd69a131af00c5de588:
              if not stor1[address(_param2)]:
                  revert with Error(string reason), 'H10'
              stor1[address(_param2)] = 0
          else:
              if not _param1 - 0xda11e33ac8fa5160b7b90b53bdd9ffed455c77446a381338e4bc1673dc8d489:
                  if not stor4[address(_param2)]:
                      revert with Error(string reason), 'H10'
                  stor4[address(_param2)] = 0
              else:
                  if _param1 - 0x18d95d9da8db151379226c1975258bfcd99b3de30e212a3fdf374ed7b277b17f:
                      if not _param1 - 0xa15540b82ec51595ba5a0eb42fe10614cacbdd68a77f47e067638ec1ecdcad74:
                          if not stor10[address(_param2)]:
                              revert with Error(string reason), 'H10'
                          stor10[address(_param2)] = 0
                      else:
                          if not _param1 - 0x694f935c77678723ade3382dc6b12cdbad34911e45c1fdf18a2919ca4507229b:
                              if not stor11[address(_param2)]:
                                  revert with Error(string reason), 'H10'
                              stor11[address(_param2)] = 0
                          else:
                              if not _param1 - 0x42b40d72274ce0717425763fa72c9c163c03cc39120843201fe659e2a4ba0ecb:
                                  if not stor12[address(_param2)]:
                                      revert with Error(string reason), 'H10'
                                  stor12[address(_param2)] = 0
                              else:
                                  if not _param1 - 0x1058846c60f6859362a916b9ac3d89a87bcc7068167c55e62515eec51cb0dff8:
                                      if not stor5[address(_param2)]:
                                          revert with Error(string reason), 'H10'
                                      stor5[address(_param2)] = 0
                                  else:
                                      if not _param1 - 0xa1939ff690b675030353919731519dbbe36f04e2789275a109cc765f66cf2990:
                                          if not stor16[address(_param2)]:
                                              revert with Error(string reason), 'H10'
                                          stor16[address(_param2)] = 0
                                      else:
                                          if not _param1 - 0xfe731b89600e8e0f7e24df75443f6beea0a9215f2b20688a2f38548c0aa52f7a:
                                              if unknown692e3a95Address != address(_param2):
                                                  revert with Error(string reason), 'H10'
                                              unknown692e3a95Address = 0
                                          else:
                                              if not _param1 - 0x4a835202d60ca5f5c7b4d843f8f5b32c1010d0101183f53cb87e7278cac1506b:
                                                  if unknownd73c2f66Address != address(_param2):
                                                      revert with Error(string reason), 'H10'
                                                  unknownd73c2f66Address = 0
                                              else:
                                                  if -_param1 + 0x3349cb1d48fb20662e6095e6479f18fe92f1cdcfa7083feba86a52b0e0b47da7:
                                                      revert with Error(string reason), 'UNKNOWN ROLE'
                                                  if unknown628bcd8bAddress != address(_param2):
                                                      revert with Error(string reason), 'H10'
                                                  unknown628bcd8bAddress = 0
                  else:
                      if not stor7[address(_param2)]:
                          revert with Error(string reason), 'H10'
                      mem[0] = address(_param2)
                      mem[32] = 7
                      if not stor7[address(_param2)]:
                          revert with Error(string reason), ''
                      idx = 0
                      while idx < stor8:
                          mem[0] = 8
                          _72 = mem[64]
                          mem[mem[64] + 4] = this.address
                          mem[mem[64] + 36] = address(_param2)
                          static call address(storFEF3[idx].field_0).allowance(address owner, address spender) with:
                                  gas gas_remaining wei
                                 args this.address, address(_param2)
                          mem[mem[64]] = ext_call.return_data[0]
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if ext_call.success:
                              if 32 <= return_data.size:
                                  if mem[64] + 32 > LOCK8605463013() or mem[64] + 32 < mem[64]:
                                      revert with 0, 65
                                  mem[64] = mem[64] + 32
                                  if ext_call.return_data[0]:
                                      mem[_72 + 64] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
                                      mem[_72 + 68] = address(_param2)
                                      mem[_72 + 100] = 0
                                      mem[_72 + 32] = 68
                                      if _72 + 160 > LOCK8605463013() or 160 < 32:
                                          revert with 0, 65
                                      mem[64] = _72 + 160
                                      call address(storFEF3[idx].field_0).approve(address spender, uint256 amount) with:
                                           gas gas_remaining wei
                                          args address(_param2), 0
                                      if not return_data.size:
                                          if not ext_call.success:
                                              mem[_72 + 160] = address(storFEF3[idx].field_0)
                                              mem[_72 + 192] = address(_param2)
                                              log 0x1685a34f: address(storFEF3[idx].field_0), address(_param2)
                                          else:
                                              if mem[96]:
                                                  require mem[96] >=′ 32
                                                  require not bool(mem[128]) - mem[128]
                                                  if not mem[128]:
                                                      mem[_72 + 160] = address(storFEF3[idx].field_0)
                                                      mem[_72 + 192] = address(_param2)
                                                      log 0x1685a34f: address(storFEF3[idx].field_0), address(_param2)
                                      else:
                                          if return_data.size > LOCK8605463013():
                                              revert with 0, 65
                                          if _72 + ceil32(ceil32(return_data.size)) + 161 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                              revert with 0, 65
                                          mem[64] = _72 + ceil32(ceil32(return_data.size)) + 161
                                          mem[_72 + 160] = return_data.size
                                          mem[_72 + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                          if not ext_call.success:
                                              mem[_72 + ceil32(ceil32(return_data.size)) + 161] = address(storFEF3[idx].field_0)
                                              mem[_72 + ceil32(ceil32(return_data.size)) + 193] = address(_param2)
                                              log 0x1685a34f: address(storFEF3[idx].field_0), address(_param2)
                                          else:
                                              if return_data.size:
                                                  require return_data.size >=′ 32
                                                  require not bool(mem[_72 + 192]) - mem[_72 + 192]
                                                  if not mem[_72 + 192]:
                                                      mem[_72 + ceil32(ceil32(return_data.size)) + 161] = address(storFEF3[idx].field_0)
                                                      mem[_72 + ceil32(ceil32(return_data.size)) + 193] = address(_param2)
                                                      log 0x1685a34f: address(storFEF3[idx].field_0), address(_param2)
                              else:
                                  if mem[64] + ceil32(return_data.size) > LOCK8605463013() or mem[64] + ceil32(return_data.size) < mem[64]:
                                      revert with 0, 65
                                  mem[64] = mem[64] + ceil32(return_data.size)
                                  require return_data.size >=′ 32
                                  if ext_call.return_data[0]:
                                      mem[_72 + ceil32(return_data.size) + 32] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
                                      mem[_72 + ceil32(return_data.size) + 36] = address(_param2)
                                      mem[_72 + ceil32(return_data.size) + 68] = 0
                                      mem[_72 + ceil32(return_data.size)] = 68
                                      if _72 + ceil32(return_data.size) + 128 > LOCK8605463013() or 128 < 0:
                                          revert with 0, 65
                                      mem[64] = _72 + ceil32(return_data.size) + 128
                                      call address(storFEF3[idx].field_0).approve(address spender, uint256 amount) with:
                                           gas gas_remaining wei
                                          args address(_param2), 0
                                      if not return_data.size:
                                          if not ext_call.success:
                                              mem[_72 + ceil32(return_data.size) + 128] = address(storFEF3[idx].field_0)
                                              mem[_72 + ceil32(return_data.size) + 160] = address(_param2)
                                              log 0x1685a34f: address(storFEF3[idx].field_0), address(_param2)
                                          else:
                                              if mem[96]:
                                                  require mem[96] >=′ 32
                                                  require not bool(mem[128]) - mem[128]
                                                  if not mem[128]:
                                                      mem[_72 + ceil32(return_data.size) + 128] = address(storFEF3[idx].field_0)
                                                      mem[_72 + ceil32(return_data.size) + 160] = address(_param2)
                                                      log 0x1685a34f: address(storFEF3[idx].field_0), address(_param2)
                                      else:
                                          if return_data.size > LOCK8605463013():
                                              revert with 0, 65
                                          if _72 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                              revert with 0, 65
                                          mem[64] = _72 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129
                                          mem[_72 + ceil32(return_data.size) + 128] = return_data.size
                                          mem[_72 + ceil32(return_data.size) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                          if not ext_call.success:
                                              mem[_72 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129] = address(storFEF3[idx].field_0)
                                              mem[_72 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 161] = address(_param2)
                                              log 0x1685a34f: address(storFEF3[idx].field_0), address(_param2)
                                          else:
                                              if return_data.size:
                                                  require return_data.size >=′ 32
                                                  require not bool(mem[_72 + ceil32(return_data.size) + 160]) - mem[_72 + ceil32(return_data.size) + 160]
                                                  if not mem[_72 + ceil32(return_data.size) + 160]:
                                                      mem[_72 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129] = address(storFEF3[idx].field_0)
                                                      mem[_72 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 161] = address(_param2)
                                                      log 0x1685a34f: address(storFEF3[idx].field_0), address(_param2)
                          if idx == -1:
                              revert with 0, 17
                          idx = idx + 1
                          continue 
                      if stor7[address(_param2)]:
                          if stor7[address(_param2)] - 1 > stor7[address(_param2)]:
                              revert with 0, 17
                          if stor6 - 1 > stor6:
                              revert with 0, 17
                          if stor6 - stor7[address(_param2)]:
                              if stor6 - 1 >= stor6:
                                  revert with 0, 50
                              if stor7[address(_param2)] - 1 >= stor6:
                                  revert with 0, 50
                              storE3F6[stor7[address(_param2)]] = storE3F6[stor6]
                              stor7[storE3F6[stor6]] = stor7[address(_param2)]
                          if not stor6:
                              revert with 0, 49
                          if stor6 - 1 >= stor6:
                              revert with 0, 50
                          storF652[stor6] = 0
                          stor6--
                          stor7[address(_param2)] = 0
                      log 0xeffe3908 

def uniswapV3MintCallback(uint256 amount0, uint256 amount1, bytes data): # not payable
  require calldata.size - 4 >=′ 96
  require data <= LOCK8605463013()
  require data + 35 <′ calldata.size
  if data.length > LOCK8605463013():
      revert with 0, 65
  if ceil32(ceil32(data.length)) + 97 > LOCK8605463013() or ceil32(ceil32(data.length)) + 97 < 96:
      revert with 0, 65
  require data + data.length + 36 <= calldata.size
  if not stor11[caller]:
      revert with Error(string reason), 'H30'
  if not amount0:
      if amount1:
          static call caller.token1() with:
                  gas gas_remaining wei
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          if not ext_call.success:
              if ceil32(ceil32(data.length)) + 225 > LOCK8605463013() or 225 < 97:
                  revert with 0, 65
              call 0x0.transfer(address recipient, uint256 amount) with:
                   gas gas_remaining wei
                  args caller, amount1
              if return_data.size:
                  if return_data.size > LOCK8605463013():
                      revert with 0, 65
                  if ceil32(ceil32(data.length)) + ceil32(ceil32(return_data.size)) + 226 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                      revert with 0, 65
          else:
              if 32 <= return_data.size:
                  if ceil32(ceil32(data.length)) + 129 > LOCK8605463013() or 129 < 97:
                      revert with 0, 65
                  require not -Mask(96, 160, ext_call.return_data[0])
                  if ceil32(ceil32(data.length)) + 257 > LOCK8605463013() or 257 < 129:
                      revert with 0, 65
                  call ext_call.return_data[0].transfer(address recipient, uint256 amount) with:
                       gas gas_remaining wei
                      args caller, amount1
                  if return_data.size:
                      if return_data.size > LOCK8605463013():
                          revert with 0, 65
                      if ceil32(ceil32(data.length)) + ceil32(ceil32(return_data.size)) + 258 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                          revert with 0, 65
              else:
                  if ceil32(ceil32(data.length)) + ceil32(return_data.size) + 97 > LOCK8605463013() or ceil32(return_data.size) < 0:
                      revert with 0, 65
                  require return_data.size >=′ 32
                  require not -Mask(96, 160, ext_call.return_data[0])
                  if ceil32(ceil32(data.length)) + ceil32(return_data.size) + 225 > LOCK8605463013() or 225 < 97:
                      revert with 0, 65
                  call ext_call.return_data[0].transfer(address recipient, uint256 amount) with:
                       gas gas_remaining wei
                      args caller, amount1
                  if return_data.size:
                      if return_data.size > LOCK8605463013():
                          revert with 0, 65
                      if ceil32(ceil32(data.length)) + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 226 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                          revert with 0, 65
  else:
      static call caller.token0() with:
              gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      if not ext_call.success:
          if ceil32(ceil32(data.length)) + 225 > LOCK8605463013() or 225 < 97:
              revert with 0, 65
          call 0x0.transfer(address recipient, uint256 amount) with:
               gas gas_remaining wei
              args caller, amount0
          if not return_data.size:
              if amount1:
                  static call caller.token1() with:
                          gas gas_remaining wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if not ext_call.success:
                      if ceil32(ceil32(data.length)) + 353 > LOCK8605463013() or 353 < 225:
                          revert with 0, 65
                      call 0x0.transfer(address recipient, uint256 amount) with:
                           gas gas_remaining wei
                          args caller, amount1
                      if return_data.size:
                          if return_data.size > LOCK8605463013():
                              revert with 0, 65
                          if ceil32(ceil32(data.length)) + ceil32(ceil32(return_data.size)) + 354 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                              revert with 0, 65
                  else:
                      if 32 <= return_data.size:
                          if ceil32(ceil32(data.length)) + 257 > LOCK8605463013() or 257 < 225:
                              revert with 0, 65
                          require not -Mask(96, 160, ext_call.return_data[0])
                          if ceil32(ceil32(data.length)) + 385 > LOCK8605463013() or 385 < 257:
                              revert with 0, 65
                          call ext_call.return_data[0].transfer(address recipient, uint256 amount) with:
                               gas gas_remaining wei
                              args caller, amount1
                          if return_data.size:
                              if return_data.size > LOCK8605463013():
                                  revert with 0, 65
                              if ceil32(ceil32(data.length)) + ceil32(ceil32(return_data.size)) + 386 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                  revert with 0, 65
                      else:
                          if ceil32(ceil32(data.length)) + ceil32(return_data.size) + 225 > LOCK8605463013() or ceil32(return_data.size) < 0:
                              revert with 0, 65
                          require return_data.size >=′ 32
                          require not -Mask(96, 160, ext_call.return_data[0])
                          if ceil32(ceil32(data.length)) + ceil32(return_data.size) + 353 > LOCK8605463013() or 353 < 225:
                              revert with 0, 65
                          call ext_call.return_data[0].transfer(address recipient, uint256 amount) with:
                               gas gas_remaining wei
                              args caller, amount1
                          if return_data.size:
                              if return_data.size > LOCK8605463013():
                                  revert with 0, 65
                              if ceil32(ceil32(data.length)) + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 354 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                  revert with 0, 65
          else:
              if return_data.size > LOCK8605463013():
                  revert with 0, 65
              if ceil32(ceil32(data.length)) + ceil32(ceil32(return_data.size)) + 226 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                  revert with 0, 65
              if amount1:
                  static call caller.token1() with:
                          gas gas_remaining wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if not ext_call.success:
                      if ceil32(ceil32(data.length)) + ceil32(ceil32(return_data.size)) + 354 > LOCK8605463013() or 354 < 226:
                          revert with 0, 65
                      call 0x0.transfer(address recipient, uint256 amount) with:
                           gas gas_remaining wei
                          args caller, amount1
                      if return_data.size:
                          if return_data.size > LOCK8605463013():
                              revert with 0, 65
                          if ceil32(ceil32(data.length)) + (2 * ceil32(ceil32(return_data.size))) + 355 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                              revert with 0, 65
                  else:
                      if 32 <= return_data.size:
                          if ceil32(ceil32(data.length)) + ceil32(ceil32(return_data.size)) + 258 > LOCK8605463013() or 258 < 226:
                              revert with 0, 65
                          require not -Mask(96, 160, ext_call.return_data[0])
                          if ceil32(ceil32(data.length)) + ceil32(ceil32(return_data.size)) + 386 > LOCK8605463013() or 386 < 258:
                              revert with 0, 65
                          call ext_call.return_data[0].transfer(address recipient, uint256 amount) with:
                               gas gas_remaining wei
                              args caller, amount1
                          if return_data.size:
                              if return_data.size > LOCK8605463013():
                                  revert with 0, 65
                              if ceil32(ceil32(data.length)) + (2 * ceil32(ceil32(return_data.size))) + 387 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                  revert with 0, 65
                      else:
                          if ceil32(ceil32(data.length)) + ceil32(ceil32(return_data.size)) + ceil32(return_data.size) + 226 > LOCK8605463013() or ceil32(return_data.size) < 0:
                              revert with 0, 65
                          require return_data.size >=′ 32
                          require not -Mask(96, 160, ext_call.return_data[0])
                          if ceil32(ceil32(data.length)) + ceil32(ceil32(return_data.size)) + ceil32(return_data.size) + 354 > LOCK8605463013() or 354 < 226:
                              revert with 0, 65
                          call ext_call.return_data[0].transfer(address recipient, uint256 amount) with:
                               gas gas_remaining wei
                              args caller, amount1
                          if return_data.size:
                              if return_data.size > LOCK8605463013():
                                  revert with 0, 65
                              if ceil32(ceil32(data.length)) + (2 * ceil32(ceil32(return_data.size))) + ceil32(return_data.size) + 355 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                  revert with 0, 65
      else:
          if 32 <= return_data.size:
              if ceil32(ceil32(data.length)) + 129 > LOCK8605463013() or 129 < 97:
                  revert with 0, 65
              require not -Mask(96, 160, ext_call.return_data[0])
              if ceil32(ceil32(data.length)) + 257 > LOCK8605463013() or 257 < 129:
                  revert with 0, 65
              call ext_call.return_data[0].transfer(address recipient, uint256 amount) with:
                   gas gas_remaining wei
                  args caller, amount0
              if not return_data.size:
                  if amount1:
                      static call caller.token1() with:
                              gas gas_remaining wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if not ext_call.success:
                          if ceil32(ceil32(data.length)) + 385 > LOCK8605463013() or 385 < 257:
                              revert with 0, 65
                          call 0x0.transfer(address recipient, uint256 amount) with:
                               gas gas_remaining wei
                              args caller, amount1
                          if return_data.size:
                              if return_data.size > LOCK8605463013():
                                  revert with 0, 65
                              if ceil32(ceil32(data.length)) + ceil32(ceil32(return_data.size)) + 386 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                  revert with 0, 65
                      else:
                          if 32 <= return_data.size:
                              if ceil32(ceil32(data.length)) + 289 > LOCK8605463013() or 289 < 257:
                                  revert with 0, 65
                              require not -Mask(96, 160, ext_call.return_data[0])
                              if ceil32(ceil32(data.length)) + 417 > LOCK8605463013() or 417 < 289:
                                  revert with 0, 65
                              call ext_call.return_data[0].transfer(address recipient, uint256 amount) with:
                                   gas gas_remaining wei
                                  args caller, amount1
                              if return_data.size:
                                  if return_data.size > LOCK8605463013():
                                      revert with 0, 65
                                  if ceil32(ceil32(data.length)) + ceil32(ceil32(return_data.size)) + 418 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                      revert with 0, 65
                          else:
                              if ceil32(ceil32(data.length)) + ceil32(return_data.size) + 257 > LOCK8605463013() or ceil32(return_data.size) < 0:
                                  revert with 0, 65
                              require return_data.size >=′ 32
                              require not -Mask(96, 160, ext_call.return_data[0])
                              if ceil32(ceil32(data.length)) + ceil32(return_data.size) + 385 > LOCK8605463013() or 385 < 257:
                                  revert with 0, 65
                              call ext_call.return_data[0].transfer(address recipient, uint256 amount) with:
                                   gas gas_remaining wei
                                  args caller, amount1
                              if return_data.size:
                                  if return_data.size > LOCK8605463013():
                                      revert with 0, 65
                                  if ceil32(ceil32(data.length)) + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 386 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                      revert with 0, 65
              else:
                  if return_data.size > LOCK8605463013():
                      revert with 0, 65
                  if ceil32(ceil32(data.length)) + ceil32(ceil32(return_data.size)) + 258 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                      revert with 0, 65
                  if amount1:
                      static call caller.token1() with:
                              gas gas_remaining wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if not ext_call.success:
                          if ceil32(ceil32(data.length)) + ceil32(ceil32(return_data.size)) + 386 > LOCK8605463013() or 386 < 258:
                              revert with 0, 65
                          call 0x0.transfer(address recipient, uint256 amount) with:
                               gas gas_remaining wei
                              args caller, amount1
                          if return_data.size:
                              if return_data.size > LOCK8605463013():
                                  revert with 0, 65
                              if ceil32(ceil32(data.length)) + (2 * ceil32(ceil32(return_data.size))) + 387 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                  revert with 0, 65
                      else:
                          if 32 <= return_data.size:
                              if ceil32(ceil32(data.length)) + ceil32(ceil32(return_data.size)) + 290 > LOCK8605463013() or 290 < 258:
                                  revert with 0, 65
                              require not -Mask(96, 160, ext_call.return_data[0])
                              if ceil32(ceil32(data.length)) + ceil32(ceil32(return_data.size)) + 418 > LOCK8605463013() or 418 < 290:
                                  revert with 0, 65
                              call ext_call.return_data[0].transfer(address recipient, uint256 amount) with:
                                   gas gas_remaining wei
                                  args caller, amount1
                              if return_data.size:
                                  if return_data.size > LOCK8605463013():
                                      revert with 0, 65
                                  if ceil32(ceil32(data.length)) + (2 * ceil32(ceil32(return_data.size))) + 419 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                      revert with 0, 65
                          else:
                              if ceil32(ceil32(data.length)) + ceil32(ceil32(return_data.size)) + ceil32(return_data.size) + 258 > LOCK8605463013() or ceil32(return_data.size) < 0:
                                  revert with 0, 65
                              require return_data.size >=′ 32
                              require not -Mask(96, 160, ext_call.return_data[0])
                              if ceil32(ceil32(data.length)) + ceil32(ceil32(return_data.size)) + ceil32(return_data.size) + 386 > LOCK8605463013() or 386 < 258:
                                  revert with 0, 65
                              call ext_call.return_data[0].transfer(address recipient, uint256 amount) with:
                                   gas gas_remaining wei
                                  args caller, amount1
                              if return_data.size:
                                  if return_data.size > LOCK8605463013():
                                      revert with 0, 65
                                  if ceil32(ceil32(data.length)) + (2 * ceil32(ceil32(return_data.size))) + ceil32(return_data.size) + 387 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                      revert with 0, 65
          else:
              if ceil32(ceil32(data.length)) + ceil32(return_data.size) + 97 > LOCK8605463013() or ceil32(return_data.size) < 0:
                  revert with 0, 65
              require return_data.size >=′ 32
              require not -Mask(96, 160, ext_call.return_data[0])
              if ceil32(ceil32(data.length)) + ceil32(return_data.size) + 225 > LOCK8605463013() or 225 < 97:
                  revert with 0, 65
              call ext_call.return_data[0].transfer(address recipient, uint256 amount) with:
                   gas gas_remaining wei
                  args caller, amount0
              if not return_data.size:
                  if amount1:
                      static call caller.token1() with:
                              gas gas_remaining wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if not ext_call.success:
                          if ceil32(ceil32(data.length)) + ceil32(return_data.size) + 353 > LOCK8605463013() or 353 < 225:
                              revert with 0, 65
                          call 0x0.transfer(address recipient, uint256 amount) with:
                               gas gas_remaining wei
                              args caller, amount1
                          if return_data.size:
                              if return_data.size > LOCK8605463013():
                                  revert with 0, 65
                              if ceil32(ceil32(data.length)) + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 354 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                  revert with 0, 65
                      else:
                          if 32 <= return_data.size:
                              if ceil32(ceil32(data.length)) + ceil32(return_data.size) + 257 > LOCK8605463013() or 257 < 225:
                                  revert with 0, 65
                              require not -Mask(96, 160, ext_call.return_data[0])
                              if ceil32(ceil32(data.length)) + ceil32(return_data.size) + 385 > LOCK8605463013() or 385 < 257:
                                  revert with 0, 65
                              call ext_call.return_data[0].transfer(address recipient, uint256 amount) with:
                                   gas gas_remaining wei
                                  args caller, amount1
                              if return_data.size:
                                  if return_data.size > LOCK8605463013():
                                      revert with 0, 65
                                  if ceil32(ceil32(data.length)) + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 386 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                      revert with 0, 65
                          else:
                              if ceil32(ceil32(data.length)) + (2 * ceil32(return_data.size)) + 225 > LOCK8605463013() or 2 * ceil32(return_data.size) < ceil32(return_data.size):
                                  revert with 0, 65
                              require return_data.size >=′ 32
                              require not -Mask(96, 160, ext_call.return_data[0])
                              if ceil32(ceil32(data.length)) + (2 * ceil32(return_data.size)) + 353 > LOCK8605463013() or 353 < 225:
                                  revert with 0, 65
                              call ext_call.return_data[0].transfer(address recipient, uint256 amount) with:
                                   gas gas_remaining wei
                                  args caller, amount1
                              if return_data.size:
                                  if return_data.size > LOCK8605463013():
                                      revert with 0, 65
                                  if ceil32(ceil32(data.length)) + (2 * ceil32(return_data.size)) + ceil32(ceil32(return_data.size)) + 354 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                      revert with 0, 65
              else:
                  if return_data.size > LOCK8605463013():
                      revert with 0, 65
                  if ceil32(ceil32(data.length)) + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 226 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                      revert with 0, 65
                  if amount1:
                      static call caller.token1() with:
                              gas gas_remaining wei
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if not ext_call.success:
                          if ceil32(ceil32(data.length)) + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 354 > LOCK8605463013() or 354 < 226:
                              revert with 0, 65
                          call 0x0.transfer(address recipient, uint256 amount) with:
                               gas gas_remaining wei
                              args caller, amount1
                          if return_data.size:
                              if return_data.size > LOCK8605463013():
                                  revert with 0, 65
                              if ceil32(ceil32(data.length)) + ceil32(return_data.size) + (2 * ceil32(ceil32(return_data.size))) + 355 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                  revert with 0, 65
                      else:
                          if 32 <= return_data.size:
                              if ceil32(ceil32(data.length)) + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 258 > LOCK8605463013() or 258 < 226:
                                  revert with 0, 65
                              require not -Mask(96, 160, ext_call.return_data[0])
                              if ceil32(ceil32(data.length)) + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 386 > LOCK8605463013() or 386 < 258:
                                  revert with 0, 65
                              call ext_call.return_data[0].transfer(address recipient, uint256 amount) with:
                                   gas gas_remaining wei
                                  args caller, amount1
                              if return_data.size:
                                  if return_data.size > LOCK8605463013():
                                      revert with 0, 65
                                  if ceil32(ceil32(data.length)) + ceil32(return_data.size) + (2 * ceil32(ceil32(return_data.size))) + 387 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                      revert with 0, 65
                          else:
                              if ceil32(ceil32(data.length)) + (2 * ceil32(return_data.size)) + ceil32(ceil32(return_data.size)) + 226 > LOCK8605463013() or 2 * ceil32(return_data.size) < ceil32(return_data.size):
                                  revert with 0, 65
                              require return_data.size >=′ 32
                              require not -Mask(96, 160, ext_call.return_data[0])
                              if ceil32(ceil32(data.length)) + (2 * ceil32(return_data.size)) + ceil32(ceil32(return_data.size)) + 354 > LOCK8605463013() or 354 < 226:
                                  revert with 0, 65
                              call ext_call.return_data[0].transfer(address recipient, uint256 amount) with:
                                   gas gas_remaining wei
                                  args caller, amount1
                              if return_data.size:
                                  if return_data.size > LOCK8605463013():
                                      revert with 0, 65
                                  if ceil32(ceil32(data.length)) + (2 * ceil32(return_data.size)) + (2 * ceil32(ceil32(return_data.size))) + 355 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                      revert with 0, 65
  return 0

def unknowna5fd3043() payable: 
  mem[64] = 96
  require not call.value
  require calldata.size - 4 >=′ 0
  if stor2[caller]:
      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
  if stor3[caller]:
      if stor2[caller]:
          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
      if stor3[caller]:
          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
      if stor1[caller]:
          isActive = 0
          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
      if caller != 0xce466fc694c971b95bb1193e494942e22197f759:
          revert with Error(string reason), 'H11'
      isActive = 0
      if stor8 > stor8:
          revert with Error(string reason), 'H13'
      if var68002 < stor8:
          if not stor8:
              revert with 0, 50
          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
  else:
      if stor1[caller]:
          if stor2[caller]:
              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
          if stor3[caller]:
              isActive = 0
              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
          if stor1[caller]:
              isActive = 0
              if stor8 > stor8:
                  revert with Error(string reason), 'H13'
              if var68002 < stor8:
                  if not stor8:
                      revert with 0, 50
                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
          else:
              if caller != 0xce466fc694c971b95bb1193e494942e22197f759:
                  revert with Error(string reason), 'H11'
              isActive = 0
              if stor8 > stor8:
                  revert with Error(string reason), 'H13'
              idx = 0
              while idx < stor8:
                  if not stor8:
                      revert with 0, 50
                  if idx == -1:
                      revert with 0, 17
                  mem[0] = address(storFEF3.length)
                  mem[32] = 9
                  if not stor9[address(storFEF3.length)]:
                      if var97001 >= stor6:
                          idx = idx + 1
                          continue 
                  else:
                      if stor9[address(storFEF3.length)] - 1 > stor9[address(storFEF3.length)]:
                          revert with 0, 17
                      if stor8 - 1 > stor8:
                          revert with 0, 17
                      if not stor8 - stor9[address(storFEF3.length)]:
                          if not stor8:
                              revert with 0, 49
                          if stor8 - 1 >= stor8:
                              revert with 0, 50
                          storF3F7[stor8] = 0
                          stor8--
                      else:
                          if stor8 - 1 >= stor8:
                              revert with 0, 50
                          if stor9[address(storFEF3.length)] - 1 >= stor8:
                              revert with 0, 50
                          storFEF3[stor9[address(storFEF3.length)]] = storFEF3[stor8]
                          stor9[storFEF3[stor8]] = stor9[address(storFEF3.length)]
                          if not stor8:
                              revert with 0, 49
                          if stor8 - 1 >= stor8:
                              revert with 0, 50
                          storF3F7[stor8] = 0
                          stor8--
                          mem[0] = address(storFEF3.length)
                          mem[32] = 9
                          stor9[address(storFEF3.length)] = 0
                          if var115001 >= stor6:
                              idx = idx + 1
                              continue 
                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
      else:
          if caller != 0xce466fc694c971b95bb1193e494942e22197f759:
              revert with Error(string reason), 'H11'
          if stor2[caller]:
              isActive = 0
              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
          if stor3[caller]:
              isActive = 0
              if stor8 > stor8:
                  revert with Error(string reason), 'H13'
              if var66002 < stor8:
                  if not stor8:
                      revert with 0, 50
                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
          else:
              mem[0] = caller
              mem[32] = 1
              if stor1[caller]:
                  isActive = 0
                  if stor8 > stor8:
                      revert with Error(string reason), 'H13'
                  idx = 0
                  while idx < stor8:
                      if not stor8:
                          revert with 0, 50
                      if idx == -1:
                          revert with 0, 17
                      mem[0] = address(storFEF3.length)
                      mem[32] = 9
                      if not stor9[address(storFEF3.length)]:
                          if var97001 >= stor6:
                              idx = idx + 1
                              continue 
                      else:
                          if stor9[address(storFEF3.length)] - 1 > stor9[address(storFEF3.length)]:
                              revert with 0, 17
                          if stor8 - 1 > stor8:
                              revert with 0, 17
                          if not stor8 - stor9[address(storFEF3.length)]:
                              if not stor8:
                                  revert with 0, 49
                              if stor8 - 1 >= stor8:
                                  revert with 0, 50
                              storF3F7[stor8] = 0
                              stor8--
                          else:
                              if stor8 - 1 >= stor8:
                                  revert with 0, 50
                              if stor9[address(storFEF3.length)] - 1 >= stor8:
                                  revert with 0, 50
                              storFEF3[stor9[address(storFEF3.length)]] = storFEF3[stor8]
                              stor9[storFEF3[stor8]] = stor9[address(storFEF3.length)]
                              if not stor8:
                                  revert with 0, 49
                              if stor8 - 1 >= stor8:
                                  revert with 0, 50
                              storF3F7[stor8] = 0
                              stor8--
                              mem[0] = address(storFEF3.length)
                              mem[32] = 9
                              stor9[address(storFEF3.length)] = 0
                              if var115001 >= stor6:
                                  idx = idx + 1
                                  continue 
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
              else:
                  if caller != 0xce466fc694c971b95bb1193e494942e22197f759:
                      revert with Error(string reason), 'H11'
                  isActive = 0
                  if stor8 > stor8:
                      revert with Error(string reason), 'H13'
                  idx = 0
                  while idx < stor8:
                      if not stor8:
                          revert with 0, 50
                      if idx == -1:
                          revert with 0, 17
                      mem[0] = address(storFEF3.length)
                      mem[32] = 9
                      if not stor9[address(storFEF3.length)]:
                          s = 0
                          while s < stor6:
                              mem[0] = 6
                              _254 = mem[64]
                              mem[mem[64] + 4] = this.address
                              mem[mem[64] + 36] = address(storE3F6[s].field_0)
                              static call address(storFEF3.length).allowance(address owner, address spender) with:
                                      gas gas_remaining wei
                                     args this.address, address(storE3F6[s].field_0)
                              mem[mem[64]] = ext_call.return_data[0]
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              if not ext_call.success:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              if 32 <= return_data.size:
                                  if mem[64] + 32 > LOCK8605463013() or mem[64] + 32 < mem[64]:
                                      revert with 0, 65
                                  mem[64] = mem[64] + 32
                                  if ext_call.return_data[0]:
                                      mem[_254 + 64] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
                                      mem[_254 + 68] = address(storE3F6[s].field_0)
                                      mem[_254 + 100] = 0
                                      mem[_254 + 32] = 68
                                      if _254 + 160 > LOCK8605463013() or 160 < 32:
                                          revert with 0, 65
                                      mem[64] = _254 + 160
                                      call address(storFEF3.length).approve(address spender, uint256 amount) with:
                                           gas gas_remaining wei
                                          args address(storE3F6[s].field_0), 0
                                      if not return_data.size:
                                          if not ext_call.success:
                                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          if not mem[96]:
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          require mem[96] >=′ 32
                                          require not bool(mem[128]) - mem[128]
                                          if not mem[128]:
                                              mem[_254 + 160] = address(storFEF3.length)
                                              mem[_254 + 192] = address(storE3F6[s].field_0)
                                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                      else:
                                          if return_data.size > LOCK8605463013():
                                              revert with 0, 65
                                          if _254 + ceil32(ceil32(return_data.size)) + 161 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                              revert with 0, 65
                                          mem[64] = _254 + ceil32(ceil32(return_data.size)) + 161
                                          mem[_254 + 160] = return_data.size
                                          mem[_254 + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                          if not ext_call.success:
                                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          if not return_data.size:
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          require return_data.size >=′ 32
                                          require not bool(mem[_254 + 192]) - mem[_254 + 192]
                                          if not mem[_254 + 192]:
                                              mem[_254 + ceil32(ceil32(return_data.size)) + 161] = address(storFEF3.length)
                                              mem[_254 + ceil32(ceil32(return_data.size)) + 193] = address(storE3F6[s].field_0)
                                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                              else:
                                  if mem[64] + ceil32(return_data.size) > LOCK8605463013() or mem[64] + ceil32(return_data.size) < mem[64]:
                                      revert with 0, 65
                                  mem[64] = mem[64] + ceil32(return_data.size)
                                  require return_data.size >=′ 32
                                  if ext_call.return_data[0]:
                                      mem[_254 + ceil32(return_data.size) + 32] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
                                      mem[_254 + ceil32(return_data.size) + 36] = address(storE3F6[s].field_0)
                                      mem[_254 + ceil32(return_data.size) + 68] = 0
                                      mem[_254 + ceil32(return_data.size)] = 68
                                      if _254 + ceil32(return_data.size) + 128 > LOCK8605463013() or 128 < 0:
                                          revert with 0, 65
                                      mem[64] = _254 + ceil32(return_data.size) + 128
                                      call address(storFEF3.length).approve(address spender, uint256 amount) with:
                                           gas gas_remaining wei
                                          args address(storE3F6[s].field_0), 0
                                      if not return_data.size:
                                          if not ext_call.success:
                                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          if not mem[96]:
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          require mem[96] >=′ 32
                                          require not bool(mem[128]) - mem[128]
                                          if not mem[128]:
                                              mem[_254 + ceil32(return_data.size) + 128] = address(storFEF3.length)
                                              mem[_254 + ceil32(return_data.size) + 160] = address(storE3F6[s].field_0)
                                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                      else:
                                          if return_data.size > LOCK8605463013():
                                              revert with 0, 65
                                          if _254 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                              revert with 0, 65
                                          mem[64] = _254 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129
                                          mem[_254 + ceil32(return_data.size) + 128] = return_data.size
                                          mem[_254 + ceil32(return_data.size) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                          if not ext_call.success:
                                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          if not return_data.size:
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          require return_data.size >=′ 32
                                          require not bool(mem[_254 + ceil32(return_data.size) + 160]) - mem[_254 + ceil32(return_data.size) + 160]
                                          if not mem[_254 + ceil32(return_data.size) + 160]:
                                              mem[_254 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129] = address(storFEF3.length)
                                              mem[_254 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 161] = address(storE3F6[s].field_0)
                                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                              if s == -1:
                                  revert with 0, 17
                              s = s + 1
                              continue 
                      else:
                          if stor9[address(storFEF3.length)] - 1 > stor9[address(storFEF3.length)]:
                              revert with 0, 17
                          if stor8 - 1 > stor8:
                              revert with 0, 17
                          if not stor8 - stor9[address(storFEF3.length)]:
                              if not stor8:
                                  revert with 0, 49
                              if stor8 - 1 >= stor8:
                                  revert with 0, 50
                              storF3F7[stor8] = 0
                              stor8--
                              mem[0] = address(storFEF3.length)
                              mem[32] = 9
                              stor9[address(storFEF3.length)] = 0
                              if var106001 >= stor6:
                                  idx = idx + 1
                                  continue 
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          if stor8 - 1 >= stor8:
                              revert with 0, 50
                          if stor9[address(storFEF3.length)] - 1 >= stor8:
                              revert with 0, 50
                          storFEF3[stor9[address(storFEF3.length)]] = storFEF3[stor8]
                          stor9[storFEF3[stor8]] = stor9[address(storFEF3.length)]
                          if not stor8:
                              revert with 0, 49
                          if stor8 - 1 >= stor8:
                              revert with 0, 50
                          storF3F7[stor8] = 0
                          stor8--
                          mem[0] = address(storFEF3.length)
                          mem[32] = 9
                          stor9[address(storFEF3.length)] = 0
                          s = 0
                          while s < stor6:
                              mem[0] = 6
                              _255 = mem[64]
                              mem[mem[64] + 4] = this.address
                              mem[mem[64] + 36] = address(storE3F6[s].field_0)
                              static call address(storFEF3.length).allowance(address owner, address spender) with:
                                      gas gas_remaining wei
                                     args this.address, address(storE3F6[s].field_0)
                              mem[mem[64]] = ext_call.return_data[0]
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              if not ext_call.success:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              if 32 <= return_data.size:
                                  if mem[64] + 32 > LOCK8605463013() or mem[64] + 32 < mem[64]:
                                      revert with 0, 65
                                  mem[64] = mem[64] + 32
                                  if ext_call.return_data[0]:
                                      mem[_255 + 64] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
                                      mem[_255 + 68] = address(storE3F6[s].field_0)
                                      mem[_255 + 100] = 0
                                      mem[_255 + 32] = 68
                                      if _255 + 160 > LOCK8605463013() or 160 < 32:
                                          revert with 0, 65
                                      mem[64] = _255 + 160
                                      call address(storFEF3.length).approve(address spender, uint256 amount) with:
                                           gas gas_remaining wei
                                          args address(storE3F6[s].field_0), 0
                                      if not return_data.size:
                                          if not ext_call.success:
                                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          if not mem[96]:
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          require mem[96] >=′ 32
                                          require not bool(mem[128]) - mem[128]
                                          if not mem[128]:
                                              mem[_255 + 160] = address(storFEF3.length)
                                              mem[_255 + 192] = address(storE3F6[s].field_0)
                                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                      else:
                                          if return_data.size > LOCK8605463013():
                                              revert with 0, 65
                                          if _255 + ceil32(ceil32(return_data.size)) + 161 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                              revert with 0, 65
                                          mem[64] = _255 + ceil32(ceil32(return_data.size)) + 161
                                          mem[_255 + 160] = return_data.size
                                          mem[_255 + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                          if not ext_call.success:
                                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          if not return_data.size:
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          require return_data.size >=′ 32
                                          require not bool(mem[_255 + 192]) - mem[_255 + 192]
                                          if not mem[_255 + 192]:
                                              mem[_255 + ceil32(ceil32(return_data.size)) + 161] = address(storFEF3.length)
                                              mem[_255 + ceil32(ceil32(return_data.size)) + 193] = address(storE3F6[s].field_0)
                                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                              else:
                                  if mem[64] + ceil32(return_data.size) > LOCK8605463013() or mem[64] + ceil32(return_data.size) < mem[64]:
                                      revert with 0, 65
                                  mem[64] = mem[64] + ceil32(return_data.size)
                                  require return_data.size >=′ 32
                                  if ext_call.return_data[0]:
                                      mem[_255 + ceil32(return_data.size) + 32] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
                                      mem[_255 + ceil32(return_data.size) + 36] = address(storE3F6[s].field_0)
                                      mem[_255 + ceil32(return_data.size) + 68] = 0
                                      mem[_255 + ceil32(return_data.size)] = 68
                                      if _255 + ceil32(return_data.size) + 128 > LOCK8605463013() or 128 < 0:
                                          revert with 0, 65
                                      mem[64] = _255 + ceil32(return_data.size) + 128
                                      call address(storFEF3.length).approve(address spender, uint256 amount) with:
                                           gas gas_remaining wei
                                          args address(storE3F6[s].field_0), 0
                                      if not return_data.size:
                                          if not ext_call.success:
                                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          if not mem[96]:
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          require mem[96] >=′ 32
                                          require not bool(mem[128]) - mem[128]
                                          if not mem[128]:
                                              mem[_255 + ceil32(return_data.size) + 128] = address(storFEF3.length)
                                              mem[_255 + ceil32(return_data.size) + 160] = address(storE3F6[s].field_0)
                                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                      else:
                                          if return_data.size > LOCK8605463013():
                                              revert with 0, 65
                                          if _255 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                              revert with 0, 65
                                          mem[64] = _255 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129
                                          mem[_255 + ceil32(return_data.size) + 128] = return_data.size
                                          mem[_255 + ceil32(return_data.size) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                          if not ext_call.success:
                                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          if not return_data.size:
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          require return_data.size >=′ 32
                                          require not bool(mem[_255 + ceil32(return_data.size) + 160]) - mem[_255 + ceil32(return_data.size) + 160]
                                          if not mem[_255 + ceil32(return_data.size) + 160]:
                                              mem[_255 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129] = address(storFEF3.length)
                                              mem[_255 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 161] = address(storE3F6[s].field_0)
                                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                              if s == -1:
                                  revert with 0, 17
                              s = s + 1
                              continue 
                      idx = idx + 1
                      continue 
  log 0xeffe3908 

def killContract() payable: 
  mem[64] = 96
  require not call.value
  require calldata.size - 4 >=′ 0
  if stor2[caller]:
      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
  if stor3[caller]:
      isActive = 0
      if not stor2[caller]:
          if not stor3[caller]:
              if not stor1[caller]:
                  if caller != 0xce466fc694c971b95bb1193e494942e22197f759:
                      revert with Error(string reason), 'H11'
                  if not stor2[caller]:
                      if not stor3[caller]:
                          if not stor1[caller]:
                              if caller != 0xce466fc694c971b95bb1193e494942e22197f759:
                                  revert with Error(string reason), 'H11'
                              isActive = 0
                              if stor8 > stor8:
                                  revert with Error(string reason), 'H13'
      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
  if stor1[caller]:
      isActive = 0
      if stor2[caller]:
          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
      if stor3[caller]:
          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
      if stor1[caller]:
          if not stor2[caller]:
              if not stor3[caller]:
                  if not stor1[caller]:
                      if caller != 0xce466fc694c971b95bb1193e494942e22197f759:
                          revert with Error(string reason), 'H11'
                      isActive = 0
                      if stor8 > stor8:
                          revert with Error(string reason), 'H13'
          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
      if caller != 0xce466fc694c971b95bb1193e494942e22197f759:
          revert with Error(string reason), 'H11'
      if stor2[caller]:
          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
      if stor3[caller]:
          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
      if stor1[caller]:
          isActive = 0
          if stor8 > stor8:
              revert with Error(string reason), 'H13'
          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
      if caller != 0xce466fc694c971b95bb1193e494942e22197f759:
          revert with Error(string reason), 'H11'
      isActive = 0
      if stor8 > stor8:
          revert with Error(string reason), 'H13'
      idx = 0
      while idx < stor8:
          if not stor8:
              revert with 0, 50
          if idx == -1:
              revert with 0, 17
          if stor9[address(storFEF3.length)]:
              if stor9[address(storFEF3.length)] - 1 > stor9[address(storFEF3.length)]:
                  revert with 0, 17
              if stor8 - 1 > stor8:
                  revert with 0, 17
              if stor8 - stor9[address(storFEF3.length)]:
                  if stor8 - 1 >= stor8:
                      revert with 0, 50
                  if stor9[address(storFEF3.length)] - 1 >= stor8:
                      revert with 0, 50
                  storFEF3[stor9[address(storFEF3.length)]] = storFEF3[stor8]
                  stor9[storFEF3[stor8]] = stor9[address(storFEF3.length)]
                  if not stor8:
                      revert with 0, 49
                  if stor8 - 1 >= stor8:
                      revert with 0, 50
                  storF3F7[stor8] = 0
                  stor8--
                  mem[0] = address(storFEF3.length)
                  mem[32] = 9
                  stor9[address(storFEF3.length)] = 0
                  if 0 >= stor6:
                      idx = idx + 1
                      continue 
                  static call address(storFEF3.length).allowance(address owner, address spender) with:
                          gas gas_remaining wei
                         args this.address, address(storE3F6.length)
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  if ext_call.success:
                      if 32 <= return_data.size:
                          if ext_call.return_data[0]:
                              call address(storFEF3.length).approve(address spender, uint256 amount) with:
                                   gas gas_remaining wei
                                  args address(storE3F6.length), 0
                              if return_data.size:
                      else:
                          if ceil32(return_data.size) + 96 > LOCK8605463013() or ceil32(return_data.size) + 96 < 96:
                              revert with 0, 65
                          require return_data.size >=′ 32
                          if ext_call.return_data[0]:
                              if ceil32(return_data.size) + 224 > LOCK8605463013() or 224 < 96:
                                  revert with 0, 65
                              call address(storFEF3.length).approve(address spender, uint256 amount) with:
                                   gas gas_remaining wei
                                  args address(storE3F6.length), 0
          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
  else:
      if caller != 0xce466fc694c971b95bb1193e494942e22197f759:
          revert with Error(string reason), 'H11'
      isActive = 0
      if stor2[caller]:
          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
      if stor3[caller]:
          if not stor2[caller]:
              if not stor3[caller]:
                  if not stor1[caller]:
                      if caller != 0xce466fc694c971b95bb1193e494942e22197f759:
                          revert with Error(string reason), 'H11'
                      isActive = 0
                      if stor8 > stor8:
                          revert with Error(string reason), 'H13'
          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
      if stor1[caller]:
          if stor2[caller]:
              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
          if stor3[caller]:
              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
          if stor1[caller]:
              isActive = 0
              if stor8 > stor8:
                  revert with Error(string reason), 'H13'
              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
          if caller != 0xce466fc694c971b95bb1193e494942e22197f759:
              revert with Error(string reason), 'H11'
          isActive = 0
          if stor8 > stor8:
              revert with Error(string reason), 'H13'
          idx = 0
          while idx < stor8:
              if not stor8:
                  revert with 0, 50
              if idx == -1:
                  revert with 0, 17
              if stor9[address(storFEF3.length)]:
                  if stor9[address(storFEF3.length)] - 1 > stor9[address(storFEF3.length)]:
                      revert with 0, 17
                  if stor8 - 1 > stor8:
                      revert with 0, 17
                  if stor8 - stor9[address(storFEF3.length)]:
                      if stor8 - 1 >= stor8:
                          revert with 0, 50
                      if stor9[address(storFEF3.length)] - 1 >= stor8:
                          revert with 0, 50
                      storFEF3[stor9[address(storFEF3.length)]] = storFEF3[stor8]
                      stor9[storFEF3[stor8]] = stor9[address(storFEF3.length)]
                      if not stor8:
                          revert with 0, 49
                      if stor8 - 1 >= stor8:
                          revert with 0, 50
                      storF3F7[stor8] = 0
                      stor8--
                      mem[0] = address(storFEF3.length)
                      mem[32] = 9
                      stor9[address(storFEF3.length)] = 0
                      if 0 >= stor6:
                          idx = idx + 1
                          continue 
                      static call address(storFEF3.length).allowance(address owner, address spender) with:
                              gas gas_remaining wei
                             args this.address, address(storE3F6.length)
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      if ext_call.success:
                          if 32 <= return_data.size:
                              if ext_call.return_data[0]:
                                  call address(storFEF3.length).approve(address spender, uint256 amount) with:
                                       gas gas_remaining wei
                                      args address(storE3F6.length), 0
                                  if return_data.size:
                          else:
                              if ceil32(return_data.size) + 96 > LOCK8605463013() or ceil32(return_data.size) + 96 < 96:
                                  revert with 0, 65
                              require return_data.size >=′ 32
                              if ext_call.return_data[0]:
                                  if ceil32(return_data.size) + 224 > LOCK8605463013() or 224 < 96:
                                      revert with 0, 65
                                  call address(storFEF3.length).approve(address spender, uint256 amount) with:
                                       gas gas_remaining wei
                                      args address(storE3F6.length), 0
              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
      else:
          if caller != 0xce466fc694c971b95bb1193e494942e22197f759:
              revert with Error(string reason), 'H11'
          if stor2[caller]:
              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
          if stor3[caller]:
              isActive = 0
              if stor8 > stor8:
                  revert with Error(string reason), 'H13'
              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
          mem[0] = caller
          mem[32] = 1
          if stor1[caller]:
              isActive = 0
              if stor8 > stor8:
                  revert with Error(string reason), 'H13'
              idx = 0
              while idx < stor8:
                  if not stor8:
                      revert with 0, 50
                  if idx == -1:
                      revert with 0, 17
                  if stor9[address(storFEF3.length)]:
                      if stor9[address(storFEF3.length)] - 1 > stor9[address(storFEF3.length)]:
                          revert with 0, 17
                      if stor8 - 1 > stor8:
                          revert with 0, 17
                      if stor8 - stor9[address(storFEF3.length)]:
                          if stor8 - 1 >= stor8:
                              revert with 0, 50
                          if stor9[address(storFEF3.length)] - 1 >= stor8:
                              revert with 0, 50
                          storFEF3[stor9[address(storFEF3.length)]] = storFEF3[stor8]
                          stor9[storFEF3[stor8]] = stor9[address(storFEF3.length)]
                          if not stor8:
                              revert with 0, 49
                          if stor8 - 1 >= stor8:
                              revert with 0, 50
                          storF3F7[stor8] = 0
                          stor8--
                          mem[0] = address(storFEF3.length)
                          mem[32] = 9
                          stor9[address(storFEF3.length)] = 0
                          if 0 >= stor6:
                              idx = idx + 1
                              continue 
                          static call address(storFEF3.length).allowance(address owner, address spender) with:
                                  gas gas_remaining wei
                                 args this.address, address(storE3F6.length)
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if ext_call.success:
                              if 32 <= return_data.size:
                                  if ext_call.return_data[0]:
                                      call address(storFEF3.length).approve(address spender, uint256 amount) with:
                                           gas gas_remaining wei
                                          args address(storE3F6.length), 0
                                      if return_data.size:
                              else:
                                  if ceil32(return_data.size) + 96 > LOCK8605463013() or ceil32(return_data.size) + 96 < 96:
                                      revert with 0, 65
                                  require return_data.size >=′ 32
                                  if ext_call.return_data[0]:
                                      if ceil32(return_data.size) + 224 > LOCK8605463013() or 224 < 96:
                                          revert with 0, 65
                                      call address(storFEF3.length).approve(address spender, uint256 amount) with:
                                           gas gas_remaining wei
                                          args address(storE3F6.length), 0
                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
          else:
              if caller != 0xce466fc694c971b95bb1193e494942e22197f759:
                  revert with Error(string reason), 'H11'
              isActive = 0
              if stor8 > stor8:
                  revert with Error(string reason), 'H13'
              idx = 0
              while idx < stor8:
                  if not stor8:
                      revert with 0, 50
                  if idx == -1:
                      revert with 0, 17
                  mem[0] = address(storFEF3.length)
                  mem[32] = 9
                  if not stor9[address(storFEF3.length)]:
                      s = 0
                      while s < stor6:
                          mem[0] = 6
                          _328 = mem[64]
                          mem[mem[64] + 4] = this.address
                          mem[mem[64] + 36] = address(storE3F6[s].field_0)
                          static call address(storFEF3.length).allowance(address owner, address spender) with:
                                  gas gas_remaining wei
                                 args this.address, address(storE3F6[s].field_0)
                          mem[mem[64]] = ext_call.return_data[0]
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if not ext_call.success:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          if 32 <= return_data.size:
                              if mem[64] + 32 > LOCK8605463013() or mem[64] + 32 < mem[64]:
                                  revert with 0, 65
                              mem[64] = mem[64] + 32
                              if not ext_call.return_data[0]:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              mem[_328 + 64] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
                              mem[_328 + 68] = address(storE3F6[s].field_0)
                              mem[_328 + 100] = 0
                              mem[_328 + 32] = 68
                              if _328 + 160 > LOCK8605463013() or 160 < 32:
                                  revert with 0, 65
                              mem[64] = _328 + 160
                              call address(storFEF3.length).approve(address spender, uint256 amount) with:
                                   gas gas_remaining wei
                                  args address(storE3F6[s].field_0), 0
                              if not return_data.size:
                                  if not ext_call.success:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if not mem[96]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require mem[96] >=′ 32
                                  require not bool(mem[128]) - mem[128]
                                  if mem[128]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  mem[_328 + 160] = address(storFEF3.length)
                                  mem[_328 + 192] = address(storE3F6[s].field_0)
                              else:
                                  if return_data.size > LOCK8605463013():
                                      revert with 0, 65
                                  if _328 + ceil32(ceil32(return_data.size)) + 161 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                      revert with 0, 65
                                  mem[64] = _328 + ceil32(ceil32(return_data.size)) + 161
                                  mem[_328 + 160] = return_data.size
                                  mem[_328 + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                  if not ext_call.success:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if not return_data.size:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require return_data.size >=′ 32
                                  require not bool(mem[_328 + 192]) - mem[_328 + 192]
                                  if mem[_328 + 192]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  mem[_328 + ceil32(ceil32(return_data.size)) + 161] = address(storFEF3.length)
                                  mem[_328 + ceil32(ceil32(return_data.size)) + 193] = address(storE3F6[s].field_0)
                          else:
                              if mem[64] + ceil32(return_data.size) > LOCK8605463013() or mem[64] + ceil32(return_data.size) < mem[64]:
                                  revert with 0, 65
                              mem[64] = mem[64] + ceil32(return_data.size)
                              require return_data.size >=′ 32
                              if not ext_call.return_data[0]:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              mem[_328 + ceil32(return_data.size) + 32] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
                              mem[_328 + ceil32(return_data.size) + 36] = address(storE3F6[s].field_0)
                              mem[_328 + ceil32(return_data.size) + 68] = 0
                              mem[_328 + ceil32(return_data.size)] = 68
                              if _328 + ceil32(return_data.size) + 128 > LOCK8605463013() or 128 < 0:
                                  revert with 0, 65
                              mem[64] = _328 + ceil32(return_data.size) + 128
                              call address(storFEF3.length).approve(address spender, uint256 amount) with:
                                   gas gas_remaining wei
                                  args address(storE3F6[s].field_0), 0
                              if not return_data.size:
                                  if not ext_call.success:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if not mem[96]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require mem[96] >=′ 32
                                  require not bool(mem[128]) - mem[128]
                                  if mem[128]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  mem[_328 + ceil32(return_data.size) + 128] = address(storFEF3.length)
                                  mem[_328 + ceil32(return_data.size) + 160] = address(storE3F6[s].field_0)
                              else:
                                  if return_data.size > LOCK8605463013():
                                      revert with 0, 65
                                  if _328 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                      revert with 0, 65
                                  mem[64] = _328 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129
                                  mem[_328 + ceil32(return_data.size) + 128] = return_data.size
                                  mem[_328 + ceil32(return_data.size) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                  if not ext_call.success:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if not return_data.size:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require return_data.size >=′ 32
                                  require not bool(mem[_328 + ceil32(return_data.size) + 160]) - mem[_328 + ceil32(return_data.size) + 160]
                                  if mem[_328 + ceil32(return_data.size) + 160]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  mem[_328 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129] = address(storFEF3.length)
                                  mem[_328 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 161] = address(storE3F6[s].field_0)
                          log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                          if s == -1:
                              revert with 0, 17
                          s = s + 1
                          continue 
                  else:
                      if stor9[address(storFEF3.length)] - 1 > stor9[address(storFEF3.length)]:
                          revert with 0, 17
                      if stor8 - 1 > stor8:
                          revert with 0, 17
                      if not stor8 - stor9[address(storFEF3.length)]:
                          if not stor8:
                              revert with 0, 49
                          if stor8 - 1 >= stor8:
                              revert with 0, 50
                          storF3F7[stor8] = 0
                          stor8--
                          stor9[address(storFEF3.length)] = 0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      if stor8 - 1 >= stor8:
                          revert with 0, 50
                      if stor9[address(storFEF3.length)] - 1 >= stor8:
                          revert with 0, 50
                      storFEF3[stor9[address(storFEF3.length)]] = storFEF3[stor8]
                      stor9[storFEF3[stor8]] = stor9[address(storFEF3.length)]
                      if not stor8:
                          revert with 0, 49
                      if stor8 - 1 >= stor8:
                          revert with 0, 50
                      storF3F7[stor8] = 0
                      stor8--
                      mem[0] = address(storFEF3.length)
                      mem[32] = 9
                      stor9[address(storFEF3.length)] = 0
                      s = 0
                      while s < stor6:
                          mem[0] = 6
                          _329 = mem[64]
                          mem[mem[64] + 4] = this.address
                          mem[mem[64] + 36] = address(storE3F6[s].field_0)
                          static call address(storFEF3.length).allowance(address owner, address spender) with:
                                  gas gas_remaining wei
                                 args this.address, address(storE3F6[s].field_0)
                          mem[mem[64]] = ext_call.return_data[0]
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if not ext_call.success:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          if 32 <= return_data.size:
                              if mem[64] + 32 > LOCK8605463013() or mem[64] + 32 < mem[64]:
                                  revert with 0, 65
                              mem[64] = mem[64] + 32
                              if not ext_call.return_data[0]:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              mem[_329 + 64] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
                              mem[_329 + 68] = address(storE3F6[s].field_0)
                              mem[_329 + 100] = 0
                              mem[_329 + 32] = 68
                              if _329 + 160 > LOCK8605463013() or 160 < 32:
                                  revert with 0, 65
                              mem[64] = _329 + 160
                              call address(storFEF3.length).approve(address spender, uint256 amount) with:
                                   gas gas_remaining wei
                                  args address(storE3F6[s].field_0), 0
                              if not return_data.size:
                                  if not ext_call.success:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if not mem[96]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require mem[96] >=′ 32
                                  require not bool(mem[128]) - mem[128]
                                  if mem[128]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  mem[_329 + 160] = address(storFEF3.length)
                                  mem[_329 + 192] = address(storE3F6[s].field_0)
                              else:
                                  if return_data.size > LOCK8605463013():
                                      revert with 0, 65
                                  if _329 + ceil32(ceil32(return_data.size)) + 161 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                      revert with 0, 65
                                  mem[64] = _329 + ceil32(ceil32(return_data.size)) + 161
                                  mem[_329 + 160] = return_data.size
                                  mem[_329 + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                  if not ext_call.success:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if not return_data.size:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require return_data.size >=′ 32
                                  require not bool(mem[_329 + 192]) - mem[_329 + 192]
                                  if mem[_329 + 192]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  mem[_329 + ceil32(ceil32(return_data.size)) + 161] = address(storFEF3.length)
                                  mem[_329 + ceil32(ceil32(return_data.size)) + 193] = address(storE3F6[s].field_0)
                          else:
                              if mem[64] + ceil32(return_data.size) > LOCK8605463013() or mem[64] + ceil32(return_data.size) < mem[64]:
                                  revert with 0, 65
                              mem[64] = mem[64] + ceil32(return_data.size)
                              require return_data.size >=′ 32
                              if not ext_call.return_data[0]:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              mem[_329 + ceil32(return_data.size) + 32] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
                              mem[_329 + ceil32(return_data.size) + 36] = address(storE3F6[s].field_0)
                              mem[_329 + ceil32(return_data.size) + 68] = 0
                              mem[_329 + ceil32(return_data.size)] = 68
                              if _329 + ceil32(return_data.size) + 128 > LOCK8605463013() or 128 < 0:
                                  revert with 0, 65
                              mem[64] = _329 + ceil32(return_data.size) + 128
                              call address(storFEF3.length).approve(address spender, uint256 amount) with:
                                   gas gas_remaining wei
                                  args address(storE3F6[s].field_0), 0
                              if not return_data.size:
                                  if not ext_call.success:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if not mem[96]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require mem[96] >=′ 32
                                  require not bool(mem[128]) - mem[128]
                                  if mem[128]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  mem[_329 + ceil32(return_data.size) + 128] = address(storFEF3.length)
                                  mem[_329 + ceil32(return_data.size) + 160] = address(storE3F6[s].field_0)
                              else:
                                  if return_data.size > LOCK8605463013():
                                      revert with 0, 65
                                  if _329 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                      revert with 0, 65
                                  mem[64] = _329 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129
                                  mem[_329 + ceil32(return_data.size) + 128] = return_data.size
                                  mem[_329 + ceil32(return_data.size) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                  if not ext_call.success:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if not return_data.size:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require return_data.size >=′ 32
                                  require not bool(mem[_329 + ceil32(return_data.size) + 160]) - mem[_329 + ceil32(return_data.size) + 160]
                                  if mem[_329 + ceil32(return_data.size) + 160]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  mem[_329 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129] = address(storFEF3.length)
                                  mem[_329 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 161] = address(storE3F6[s].field_0)
                          log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                          if s == -1:
                              revert with 0, 17
                          s = s + 1
                          continue 
                  idx = idx + 1
                  continue 
  log 0xeffe3908 
  return 0

def unknown3cbe46f8(): # not payable
  require calldata.size - 4 >=′ 32
  require cd[4] <= LOCK8605463013()
  require cd[4] + 35 <′ calldata.size
  if ('cd', 4).length > LOCK8605463013():
      revert with 0, 65
  if ceil32(32 * ('cd', 4).length) + 97 > LOCK8605463013() or ceil32(32 * ('cd', 4).length) + 97 < 96:
      revert with 0, 65
  mem[64] = ceil32(32 * ('cd', 4).length) + 97
  mem[96] = ('cd', 4).length
  require cd[4] + (96 * ('cd', 4).length) + 36 <= calldata.size
  s = 128
  idx = cd[4] + 36
  while idx < cd[4] + (96 * ('cd', 4).length) + 36:
      require calldata.size - idx >=′ 96
      _124 = mem[64]
      if mem[64] + 96 > LOCK8605463013() or mem[64] + 96 < mem[64]:
          revert with 0, 65
      mem[64] = mem[64] + 96
      require not -Mask(96, 160, cd[idx])
      mem[_124] = cd[idx]
      require not -Mask(96, 160, cd[(idx + 32)])
      mem[_124 + 32] = cd[(idx + 32)]
      mem[_124 + 64] = cd[(idx + 64)]
      mem[s] = _124
      s = s + 32
      idx = idx + 96
      continue 
  if caller != 0xce466fc694c971b95bb1193e494942e22197f759:
      revert with Error(string reason), 'H2'
  if not isActive:
      revert with Error(string reason), 'H1'
  _246 = mem[96]
  idx = 0
  while idx < _246:
      if idx >= mem[96]:
          revert with 0, 50
      _249 = mem[mem[(32 * idx) + 128] + 32]
      if idx >= mem[96]:
          revert with 0, 50
      mem[0] = mem[mem[(32 * idx) + 128] + 12 len 20]
      mem[32] = 7
      if not stor7[mem[0]]:
          revert with Error(string reason), 'H12'
      if idx >= mem[96]:
          revert with 0, 50
      _257 = mem[mem[(32 * idx) + 128]]
      if idx >= mem[96]:
          revert with 0, 50
      _260 = mem[mem[(32 * idx) + 128] + 64]
      if not mem[mem[(32 * idx) + 128] + 64]:
          _369 = mem[64]
          mem[mem[64] + 32] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
          mem[mem[64] + 36] = address(_257)
          mem[mem[64] + 68] = _260
          mem[mem[64]] = 68
          if mem[64] + 128 > LOCK8605463013() or mem[64] + 128 < mem[64]:
              revert with 0, 65
          if mem[64] + 192 > LOCK8605463013() or 192 < 128:
              revert with 0, 65
          mem[64] = mem[64] + 192
          mem[_369 + 128] = 32
          mem[_369 + 160] = 'SafeERC20: low-level call failed'
          if not ext_code.size(address(_249)):
              revert with Error(string reason), 'Address: call to non-contract'
          call address(_249).mem[_369 + 32 len 4] with:
               gas gas_remaining wei
              args mem[_369 + 36 len 64]
          if not return_data.size:
              if not ext_call.success:
                  if mem[96]:
                      revert with memory
                        from 128
                         len mem[96]
                  mem[_369 + 192] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                  mem[_369 + 196] = 32
                  idx = 0
                  while idx < 32:
                      mem[idx + _369 + 260] = mem[_369 + idx + 160]
                      idx = idx + 32
                      continue 
                  revert with Error(string reason), 32, 32, mem[_369 + 260]
              if not mem[96]:
                  if idx >= mem[96]:
                      revert with 0, 50
                  _398 = mem[mem[(32 * idx) + 128] + 32]
                  mem[0] = mem[mem[(32 * idx) + 128] + 44 len 20]
                  mem[32] = 9
                  if not stor9[mem[0]]:
                      if stor8 >= unknown10000000():
                          revert with 0, 65
                      stor8++
                      if stor8 >= stor8 + 1:
                          revert with 0, 50
                      address(storFEF3[stor8].field_0) = address(_398)
                      Mask(96, 0, storFEF3[stor8].field_160) = 0
                      mem[0] = address(_398)
                      mem[32] = 9
                      stor9[address(_398)] = stor8
              else:
                  require mem[96] >=′ 32
                  require not bool(mem[128]) - mem[128]
                  if not mem[128]:
                      revert with Error(string reason), 'SafeERC20: ERC20 operation did not succeed'
                  if idx >= mem[96]:
                      revert with 0, 50
                  _432 = mem[mem[(32 * idx) + 128] + 32]
                  mem[0] = mem[mem[(32 * idx) + 128] + 44 len 20]
                  mem[32] = 9
                  if not stor9[mem[0]]:
                      if stor8 >= unknown10000000():
                          revert with 0, 65
                      stor8++
                      if stor8 >= stor8 + 1:
                          revert with 0, 50
                      address(storFEF3[stor8].field_0) = address(_432)
                      Mask(96, 0, storFEF3[stor8].field_160) = 0
                      mem[0] = address(_432)
                      mem[32] = 9
                      stor9[address(_432)] = stor8
          else:
              if return_data.size > LOCK8605463013():
                  revert with 0, 65
              if _369 + ceil32(ceil32(return_data.size)) + 193 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 193 < 192:
                  revert with 0, 65
              mem[64] = _369 + ceil32(ceil32(return_data.size)) + 193
              mem[_369 + 192] = return_data.size
              mem[_369 + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
              if not ext_call.success:
                  if return_data.size:
                      revert with ext_call.return_data[0 len return_data.size]
                  mem[_369 + ceil32(ceil32(return_data.size)) + 193] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                  mem[_369 + ceil32(ceil32(return_data.size)) + 197] = 32
                  idx = 0
                  while idx < 32:
                      mem[idx + _369 + ceil32(ceil32(return_data.size)) + 261] = mem[_369 + idx + 160]
                      idx = idx + 32
                      continue 
                  revert with Error(string reason), 32, 32, mem[_369 + ceil32(ceil32(return_data.size)) + 261]
              if not return_data.size:
                  if idx >= mem[96]:
                      revert with 0, 50
                  _423 = mem[mem[(32 * idx) + 128] + 32]
                  mem[0] = mem[mem[(32 * idx) + 128] + 44 len 20]
                  mem[32] = 9
                  if not stor9[mem[0]]:
                      if stor8 >= unknown10000000():
                          revert with 0, 65
                      stor8++
                      if stor8 >= stor8 + 1:
                          revert with 0, 50
                      address(storFEF3[stor8].field_0) = address(_423)
                      Mask(96, 0, storFEF3[stor8].field_160) = 0
                      mem[0] = address(_423)
                      mem[32] = 9
                      stor9[address(_423)] = stor8
              else:
                  require return_data.size >=′ 32
                  require not bool(mem[_369 + 224]) - mem[_369 + 224]
                  if not mem[_369 + 224]:
                      revert with Error(string reason), 'SafeERC20: ERC20 operation did not succeed'
                  if idx >= mem[96]:
                      revert with 0, 50
                  _453 = mem[mem[(32 * idx) + 128] + 32]
                  mem[0] = mem[mem[(32 * idx) + 128] + 44 len 20]
                  mem[32] = 9
                  if not stor9[mem[0]]:
                      if stor8 >= unknown10000000():
                          revert with 0, 65
                      stor8++
                      if stor8 >= stor8 + 1:
                          revert with 0, 50
                      address(storFEF3[stor8].field_0) = address(_453)
                      Mask(96, 0, storFEF3[stor8].field_160) = 0
                      mem[0] = address(_453)
                      mem[32] = 9
                      stor9[address(_453)] = stor8
      else:
          _261 = mem[64]
          mem[mem[64] + 4] = this.address
          mem[mem[64] + 36] = address(_257)
          static call address(_249).allowance(address owner, address spender) with:
                  gas gas_remaining wei
                 args this.address, address(_257)
          mem[mem[64]] = ext_call.return_data[0]
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          if not ext_call.success:
              _370 = mem[64]
              mem[mem[64] + 32] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
              mem[mem[64] + 36] = address(_257)
              mem[mem[64] + 68] = _260
              mem[mem[64]] = 68
              if mem[64] + 128 > LOCK8605463013() or mem[64] + 128 < mem[64]:
                  revert with 0, 65
              if mem[64] + 192 > LOCK8605463013() or 192 < 128:
                  revert with 0, 65
              mem[64] = mem[64] + 192
              mem[_370 + 128] = 32
              mem[_370 + 160] = 'SafeERC20: low-level call failed'
              if not ext_code.size(address(_249)):
                  revert with Error(string reason), 'Address: call to non-contract'
              call address(_249).mem[_370 + 32 len 4] with:
                   gas gas_remaining wei
                  args mem[_370 + 36 len 64]
              if not return_data.size:
                  if not ext_call.success:
                      if mem[96]:
                          revert with memory
                            from 128
                             len mem[96]
                      mem[_370 + 192] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                      mem[_370 + 196] = 32
                      idx = 0
                      while idx < 32:
                          mem[idx + _370 + 260] = mem[_370 + idx + 160]
                          idx = idx + 32
                          continue 
                      revert with Error(string reason), 32, 32, mem[_370 + 260]
                  if not mem[96]:
                      if idx >= mem[96]:
                          revert with 0, 50
                      _404 = mem[mem[(32 * idx) + 128] + 32]
                      mem[0] = mem[mem[(32 * idx) + 128] + 44 len 20]
                      mem[32] = 9
                      if not stor9[mem[0]]:
                          if stor8 >= unknown10000000():
                              revert with 0, 65
                          stor8++
                          if stor8 >= stor8 + 1:
                              revert with 0, 50
                          address(storFEF3[stor8].field_0) = address(_404)
                          Mask(96, 0, storFEF3[stor8].field_160) = 0
                          mem[0] = address(_404)
                          mem[32] = 9
                          stor9[address(_404)] = stor8
                  else:
                      require mem[96] >=′ 32
                      require not bool(mem[128]) - mem[128]
                      if not mem[128]:
                          revert with Error(string reason), 'SafeERC20: ERC20 operation did not succeed'
                      if idx >= mem[96]:
                          revert with 0, 50
                      _436 = mem[mem[(32 * idx) + 128] + 32]
                      mem[0] = mem[mem[(32 * idx) + 128] + 44 len 20]
                      mem[32] = 9
                      if not stor9[mem[0]]:
                          if stor8 >= unknown10000000():
                              revert with 0, 65
                          stor8++
                          if stor8 >= stor8 + 1:
                              revert with 0, 50
                          address(storFEF3[stor8].field_0) = address(_436)
                          Mask(96, 0, storFEF3[stor8].field_160) = 0
                          mem[0] = address(_436)
                          mem[32] = 9
                          stor9[address(_436)] = stor8
              else:
                  if return_data.size > LOCK8605463013():
                      revert with 0, 65
                  if _370 + ceil32(ceil32(return_data.size)) + 193 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 193 < 192:
                      revert with 0, 65
                  mem[64] = _370 + ceil32(ceil32(return_data.size)) + 193
                  mem[_370 + 192] = return_data.size
                  mem[_370 + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                  if not ext_call.success:
                      if return_data.size:
                          revert with ext_call.return_data[0 len return_data.size]
                      mem[_370 + ceil32(ceil32(return_data.size)) + 193] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                      mem[_370 + ceil32(ceil32(return_data.size)) + 197] = 32
                      idx = 0
                      while idx < 32:
                          mem[idx + _370 + ceil32(ceil32(return_data.size)) + 261] = mem[_370 + idx + 160]
                          idx = idx + 32
                          continue 
                      revert with Error(string reason), 32, 32, mem[_370 + ceil32(ceil32(return_data.size)) + 261]
                  if not return_data.size:
                      if idx >= mem[96]:
                          revert with 0, 50
                      _428 = mem[mem[(32 * idx) + 128] + 32]
                      mem[0] = mem[mem[(32 * idx) + 128] + 44 len 20]
                      mem[32] = 9
                      if not stor9[mem[0]]:
                          if stor8 >= unknown10000000():
                              revert with 0, 65
                          stor8++
                          if stor8 >= stor8 + 1:
                              revert with 0, 50
                          address(storFEF3[stor8].field_0) = address(_428)
                          Mask(96, 0, storFEF3[stor8].field_160) = 0
                          mem[0] = address(_428)
                          mem[32] = 9
                          stor9[address(_428)] = stor8
                  else:
                      require return_data.size >=′ 32
                      require not bool(mem[_370 + 224]) - mem[_370 + 224]
                      if not mem[_370 + 224]:
                          revert with Error(string reason), 'SafeERC20: ERC20 operation did not succeed'
                      if idx >= mem[96]:
                          revert with 0, 50
                      _458 = mem[mem[(32 * idx) + 128] + 32]
                      mem[0] = mem[mem[(32 * idx) + 128] + 44 len 20]
                      mem[32] = 9
                      if not stor9[mem[0]]:
                          if stor8 >= unknown10000000():
                              revert with 0, 65
                          stor8++
                          if stor8 >= stor8 + 1:
                              revert with 0, 50
                          address(storFEF3[stor8].field_0) = address(_458)
                          Mask(96, 0, storFEF3[stor8].field_160) = 0
                          mem[0] = address(_458)
                          mem[32] = 9
                          stor9[address(_458)] = stor8
          else:
              if 32 <= return_data.size:
                  if mem[64] + 32 > LOCK8605463013() or mem[64] + 32 < mem[64]:
                      revert with 0, 65
                  mem[64] = mem[64] + 32
                  if ext_call.return_data[0]:
                      revert with Error(string reason), 'SafeERC20: approve from non-zero to non-zero allowance'
                  mem[_261 + 64] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
                  mem[_261 + 68] = address(_257)
                  mem[_261 + 100] = _260
                  mem[_261 + 32] = 68
                  if _261 + 160 > LOCK8605463013() or 160 < 32:
                      revert with 0, 65
                  if _261 + 224 > LOCK8605463013() or 192 < 128:
                      revert with 0, 65
                  mem[64] = _261 + 224
                  mem[_261 + 160] = 32
                  mem[_261 + 192] = 'SafeERC20: low-level call failed'
                  if not ext_code.size(address(_249)):
                      revert with Error(string reason), 'Address: call to non-contract'
                  call address(_249).approve(address spender, uint256 amount) with:
                       gas gas_remaining wei
                      args address(_257), _260
                  if not return_data.size:
                      if not ext_call.success:
                          if mem[96]:
                              revert with memory
                                from 128
                                 len mem[96]
                          mem[_261 + 224] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                          mem[_261 + 228] = 32
                          idx = 0
                          while idx < 32:
                              mem[idx + _261 + 292] = mem[_261 + idx + 192]
                              idx = idx + 32
                              continue 
                          revert with Error(string reason), 32, 32, mem[_261 + 292]
                      if not mem[96]:
                          if idx >= mem[96]:
                              revert with 0, 50
                          _296 = mem[mem[(32 * idx) + 128] + 32]
                          mem[0] = mem[mem[(32 * idx) + 128] + 44 len 20]
                          mem[32] = 9
                          if not stor9[mem[0]]:
                              if stor8 >= unknown10000000():
                                  revert with 0, 65
                              stor8++
                              if stor8 >= stor8 + 1:
                                  revert with 0, 50
                              address(storFEF3[stor8].field_0) = address(_296)
                              Mask(96, 0, storFEF3[stor8].field_160) = 0
                              mem[0] = address(_296)
                              mem[32] = 9
                              stor9[address(_296)] = stor8
                      else:
                          require mem[96] >=′ 32
                          require not bool(mem[128]) - mem[128]
                          if not mem[128]:
                              revert with Error(string reason), 'SafeERC20: ERC20 operation did not succeed'
                          if idx >= mem[96]:
                              revert with 0, 50
                          _330 = mem[mem[(32 * idx) + 128] + 32]
                          mem[0] = mem[mem[(32 * idx) + 128] + 44 len 20]
                          mem[32] = 9
                          if not stor9[mem[0]]:
                              if stor8 >= unknown10000000():
                                  revert with 0, 65
                              stor8++
                              if stor8 >= stor8 + 1:
                                  revert with 0, 50
                              address(storFEF3[stor8].field_0) = address(_330)
                              Mask(96, 0, storFEF3[stor8].field_160) = 0
                              mem[0] = address(_330)
                              mem[32] = 9
                              stor9[address(_330)] = stor8
                  else:
                      if return_data.size > LOCK8605463013():
                          revert with 0, 65
                      if _261 + ceil32(ceil32(return_data.size)) + 225 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 193 < 192:
                          revert with 0, 65
                      mem[64] = _261 + ceil32(ceil32(return_data.size)) + 225
                      mem[_261 + 224] = return_data.size
                      mem[_261 + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                      if not ext_call.success:
                          if return_data.size:
                              revert with ext_call.return_data[0 len return_data.size]
                          mem[_261 + ceil32(ceil32(return_data.size)) + 225] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                          mem[_261 + ceil32(ceil32(return_data.size)) + 229] = 32
                          idx = 0
                          while idx < 32:
                              mem[idx + _261 + ceil32(ceil32(return_data.size)) + 293] = mem[_261 + idx + 192]
                              idx = idx + 32
                              continue 
                          revert with Error(string reason), 32, 32, mem[_261 + ceil32(ceil32(return_data.size)) + 293]
                      if not return_data.size:
                          if idx >= mem[96]:
                              revert with 0, 50
                          _321 = mem[mem[(32 * idx) + 128] + 32]
                          mem[0] = mem[mem[(32 * idx) + 128] + 44 len 20]
                          mem[32] = 9
                          if not stor9[mem[0]]:
                              if stor8 >= unknown10000000():
                                  revert with 0, 65
                              stor8++
                              if stor8 >= stor8 + 1:
                                  revert with 0, 50
                              address(storFEF3[stor8].field_0) = address(_321)
                              Mask(96, 0, storFEF3[stor8].field_160) = 0
                              mem[0] = address(_321)
                              mem[32] = 9
                              stor9[address(_321)] = stor8
                      else:
                          require return_data.size >=′ 32
                          require not bool(mem[_261 + 256]) - mem[_261 + 256]
                          if not mem[_261 + 256]:
                              revert with Error(string reason), 'SafeERC20: ERC20 operation did not succeed'
                          if idx >= mem[96]:
                              revert with 0, 50
                          _351 = mem[mem[(32 * idx) + 128] + 32]
                          mem[0] = mem[mem[(32 * idx) + 128] + 44 len 20]
                          mem[32] = 9
                          if not stor9[mem[0]]:
                              if stor8 >= unknown10000000():
                                  revert with 0, 65
                              stor8++
                              if stor8 >= stor8 + 1:
                                  revert with 0, 50
                              address(storFEF3[stor8].field_0) = address(_351)
                              Mask(96, 0, storFEF3[stor8].field_160) = 0
                              mem[0] = address(_351)
                              mem[32] = 9
                              stor9[address(_351)] = stor8
              else:
                  if mem[64] + ceil32(return_data.size) > LOCK8605463013() or mem[64] + ceil32(return_data.size) < mem[64]:
                      revert with 0, 65
                  mem[64] = mem[64] + ceil32(return_data.size)
                  require return_data.size >=′ 32
                  if ext_call.return_data[0]:
                      revert with Error(string reason), 'SafeERC20: approve from non-zero to non-zero allowance'
                  mem[_261 + ceil32(return_data.size) + 32] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
                  mem[_261 + ceil32(return_data.size) + 36] = address(_257)
                  mem[_261 + ceil32(return_data.size) + 68] = _260
                  mem[_261 + ceil32(return_data.size)] = 68
                  if _261 + ceil32(return_data.size) + 128 > LOCK8605463013() or 128 < 0:
                      revert with 0, 65
                  if _261 + ceil32(return_data.size) + 192 > LOCK8605463013() or 192 < 128:
                      revert with 0, 65
                  mem[64] = _261 + ceil32(return_data.size) + 192
                  mem[_261 + ceil32(return_data.size) + 128] = 32
                  mem[_261 + ceil32(return_data.size) + 160] = 'SafeERC20: low-level call failed'
                  if not ext_code.size(address(_249)):
                      revert with Error(string reason), 'Address: call to non-contract'
                  call address(_249).approve(address spender, uint256 amount) with:
                       gas gas_remaining wei
                      args address(_257), _260
                  if not return_data.size:
                      if not ext_call.success:
                          if mem[96]:
                              revert with memory
                                from 128
                                 len mem[96]
                          mem[_261 + ceil32(return_data.size) + 192] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                          mem[_261 + ceil32(return_data.size) + 196] = 32
                          idx = 0
                          while idx < 32:
                              mem[idx + _261 + ceil32(return_data.size) + 260] = mem[_261 + ceil32(return_data.size) + idx + 160]
                              idx = idx + 32
                              continue 
                          revert with Error(string reason), 32, 32, mem[_261 + ceil32(return_data.size) + 260]
                      if not mem[96]:
                          if idx >= mem[96]:
                              revert with 0, 50
                          _302 = mem[mem[(32 * idx) + 128] + 32]
                          mem[0] = mem[mem[(32 * idx) + 128] + 44 len 20]
                          mem[32] = 9
                          if not stor9[mem[0]]:
                              if stor8 >= unknown10000000():
                                  revert with 0, 65
                              stor8++
                              if stor8 >= stor8 + 1:
                                  revert with 0, 50
                              address(storFEF3[stor8].field_0) = address(_302)
                              Mask(96, 0, storFEF3[stor8].field_160) = 0
                              mem[0] = address(_302)
                              mem[32] = 9
                              stor9[address(_302)] = stor8
                      else:
                          require mem[96] >=′ 32
                          require not bool(mem[128]) - mem[128]
                          if not mem[128]:
                              revert with Error(string reason), 'SafeERC20: ERC20 operation did not succeed'
                          if idx >= mem[96]:
                              revert with 0, 50
                          _334 = mem[mem[(32 * idx) + 128] + 32]
                          mem[0] = mem[mem[(32 * idx) + 128] + 44 len 20]
                          mem[32] = 9
                          if not stor9[mem[0]]:
                              if stor8 >= unknown10000000():
                                  revert with 0, 65
                              stor8++
                              if stor8 >= stor8 + 1:
                                  revert with 0, 50
                              address(storFEF3[stor8].field_0) = address(_334)
                              Mask(96, 0, storFEF3[stor8].field_160) = 0
                              mem[0] = address(_334)
                              mem[32] = 9
                              stor9[address(_334)] = stor8
                  else:
                      if return_data.size > LOCK8605463013():
                          revert with 0, 65
                      if _261 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 193 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 193 < 192:
                          revert with 0, 65
                      mem[64] = _261 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 193
                      mem[_261 + ceil32(return_data.size) + 192] = return_data.size
                      mem[_261 + ceil32(return_data.size) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                      if not ext_call.success:
                          if return_data.size:
                              revert with ext_call.return_data[0 len return_data.size]
                          mem[_261 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 193] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                          mem[_261 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 197] = 32
                          idx = 0
                          while idx < 32:
                              mem[idx + _261 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 261] = mem[_261 + ceil32(return_data.size) + idx + 160]
                              idx = idx + 32
                              continue 
                          revert with Error(string reason), 32, 32, mem[_261 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 261]
                      if not return_data.size:
                          if idx >= mem[96]:
                              revert with 0, 50
                          _326 = mem[mem[(32 * idx) + 128] + 32]
                          mem[0] = mem[mem[(32 * idx) + 128] + 44 len 20]
                          mem[32] = 9
                          if not stor9[mem[0]]:
                              if stor8 >= unknown10000000():
                                  revert with 0, 65
                              stor8++
                              if stor8 >= stor8 + 1:
                                  revert with 0, 50
                              address(storFEF3[stor8].field_0) = address(_326)
                              Mask(96, 0, storFEF3[stor8].field_160) = 0
                              mem[0] = address(_326)
                              mem[32] = 9
                              stor9[address(_326)] = stor8
                      else:
                          require return_data.size >=′ 32
                          require not bool(mem[_261 + ceil32(return_data.size) + 224]) - mem[_261 + ceil32(return_data.size) + 224]
                          if not mem[_261 + ceil32(return_data.size) + 224]:
                              revert with Error(string reason), 'SafeERC20: ERC20 operation did not succeed'
                          if idx >= mem[96]:
                              revert with 0, 50
                          _356 = mem[mem[(32 * idx) + 128] + 32]
                          mem[0] = mem[mem[(32 * idx) + 128] + 44 len 20]
                          mem[32] = 9
                          if not stor9[mem[0]]:
                              if stor8 >= unknown10000000():
                                  revert with 0, 65
                              stor8++
                              if stor8 >= stor8 + 1:
                                  revert with 0, 50
                              address(storFEF3[stor8].field_0) = address(_356)
                              Mask(96, 0, storFEF3[stor8].field_160) = 0
                              mem[0] = address(_356)
                              mem[32] = 9
                              stor9[address(_356)] = stor8
      if idx == -1:
          revert with 0, 17
      idx = idx + 1
      continue 
  log 0x6e51976d 

def unknowncf1346bc(uint256 _param1, uint128 _param2, array _param3): # not payable
  require calldata.size - 4 >=′ 96
  require not -Mask(96, 160, _param2)
  require _param3 <= LOCK8605463013()
  require _param3 + 35 <′ calldata.size
  if _param3.length > LOCK8605463013():
      revert with 0, 65
  if ceil32(ceil32(_param3.length)) + 97 > LOCK8605463013() or ceil32(ceil32(_param3.length)) + 97 < 96:
      revert with 0, 65
  require _param3 + _param3.length + 36 <= calldata.size
  mem[128 len _param3.length] = _param3[all]
  mem[_param3.length + 128] = 0
  if caller != 0x7ff4ed8ab94c849b812622eb462682208be06b93:
      revert with Error(string reason), 'H3'
  if not _param1 - 0x9952537ab17bc321c435545199d81e39dd24481206e94617263826f8d413013e:
      if stor2[address(_param2)]:
          revert with Error(string reason), 'H9'
      stor2[address(_param2)] = 1
  else:
      if not _param1 - 0x9d72fc4d06849ee87a319b3fc6aa1dc9403947e59168f4dbfdd67adeaa6fb3f3:
          if stor3[address(_param2)]:
              revert with Error(string reason), 'H9'
          stor3[address(_param2)] = 1
      else:
          if not _param1 - 0x6cc14d89329abdf9fd3c381ad952536dfd2b607e27c55fd69a131af00c5de588:
              if stor1[address(_param2)]:
                  revert with Error(string reason), 'H9'
              stor1[address(_param2)] = 1
          else:
              if not _param1 - 0xda11e33ac8fa5160b7b90b53bdd9ffed455c77446a381338e4bc1673dc8d489:
                  if stor4[address(_param2)]:
                      revert with Error(string reason), 'H9'
                  stor4[address(_param2)] = 1
              else:
                  if not _param1 - 0x18d95d9da8db151379226c1975258bfcd99b3de30e212a3fdf374ed7b277b17f:
                      if stor7[address(_param2)]:
                          revert with Error(string reason), 'H9'
                      if not stor7[address(_param2)]:
                          if stor6 >= unknown10000000():
                              revert with 0, 65
                          stor6++
                          if stor6 >= stor6 + 1:
                              revert with 0, 50
                          address(storE3F6[stor6].field_0) = address(_param2)
                          Mask(96, 0, storE3F6[stor6].field_160) = 0
                          stor7[address(_param2)] = stor6
                  else:
                      if not _param1 - 0xa15540b82ec51595ba5a0eb42fe10614cacbdd68a77f47e067638ec1ecdcad74:
                          static call address(_param2).token0() with:
                                  gas gas_remaining wei
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if not ext_call.success:
                              static call address(_param2).token1() with:
                                      gas gas_remaining wei
                              revert with ext_call.return_data[0 len return_data.size]
                          if 32 <= return_data.size:
                              if ceil32(ceil32(_param3.length)) + 129 > LOCK8605463013() or 129 < 97:
                                  revert with 0, 65
                              require not -Mask(96, 160, ext_call.return_data[0])
                              static call address(_param2).token1() with:
                                      gas gas_remaining wei
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              if not ext_call.success:
                                  static call mem[128 len 20].getPair(address , address ) with:
                                          gas gas_remaining wei
                                         args address(ext_call.return_data[0]), 0
                                  revert with ext_call.return_data[0 len return_data.size]
                              if 32 <= return_data.size:
                                  if ceil32(ceil32(_param3.length)) + 161 > LOCK8605463013() or 161 < 129:
                                      revert with 0, 65
                                  require not -Mask(96, 160, ext_call.return_data[0])
                                  static call mem[128 len 20].getPair(address , address ) with:
                                          gas gas_remaining wei
                                         args address(ext_call.return_data[0]), address(ext_call.return_data[0])
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  if not ext_call.success:
                                      if address(_param2):
                                          revert with Error(string reason), 'H32'
                                  else:
                                      if return_data.size >= 32:
                                          if ceil32(ceil32(_param3.length)) + 193 > LOCK8605463013() or 193 < 161:
                                              revert with 0, 65
                                      else:
                                          if ceil32(ceil32(_param3.length)) + ceil32(return_data.size) + 161 > LOCK8605463013() or ceil32(return_data.size) < 0:
                                              revert with 0, 65
                                          require return_data.size >=′ 32
                                      require not -Mask(96, 160, ext_call.return_data[0])
                                      if address(ext_call.return_data[0]) != address(_param2):
                                          revert with Error(string reason), 'H32'
                              else:
                                  if ceil32(ceil32(_param3.length)) + ceil32(return_data.size) + 129 > LOCK8605463013() or ceil32(return_data.size) < 0:
                                      revert with 0, 65
                                  require return_data.size >=′ 32
                                  require not -Mask(96, 160, ext_call.return_data[0])
                                  static call mem[128 len 20].getPair(address , address ) with:
                                          gas gas_remaining wei
                                         args address(ext_call.return_data[0]), address(ext_call.return_data[0])
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  if not ext_call.success:
                                      if address(_param2):
                                          revert with Error(string reason), 'H32'
                                  else:
                                      if return_data.size >= 32:
                                          if ceil32(ceil32(_param3.length)) + ceil32(return_data.size) + 161 > LOCK8605463013() or 161 < 129:
                                              revert with 0, 65
                                      else:
                                          if ceil32(ceil32(_param3.length)) + (2 * ceil32(return_data.size)) + 129 > LOCK8605463013() or 2 * ceil32(return_data.size) < ceil32(return_data.size):
                                              revert with 0, 65
                                          require return_data.size >=′ 32
                                      require not -Mask(96, 160, ext_call.return_data[0])
                                      if address(ext_call.return_data[0]) != address(_param2):
                                          revert with Error(string reason), 'H32'
                          else:
                              if ceil32(ceil32(_param3.length)) + ceil32(return_data.size) + 97 > LOCK8605463013() or ceil32(return_data.size) < 0:
                                  revert with 0, 65
                              require return_data.size >=′ 32
                              require not -Mask(96, 160, ext_call.return_data[0])
                              static call address(_param2).token1() with:
                                      gas gas_remaining wei
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              if not ext_call.success:
                                  static call mem[128 len 20].getPair(address , address ) with:
                                          gas gas_remaining wei
                                         args address(ext_call.return_data[0]), 0
                                  revert with ext_call.return_data[0 len return_data.size]
                              if 32 <= return_data.size:
                                  if ceil32(ceil32(_param3.length)) + ceil32(return_data.size) + 129 > LOCK8605463013() or 129 < 97:
                                      revert with 0, 65
                                  require not -Mask(96, 160, ext_call.return_data[0])
                                  static call mem[128 len 20].getPair(address , address ) with:
                                          gas gas_remaining wei
                                         args address(ext_call.return_data[0]), address(ext_call.return_data[0])
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  if not ext_call.success:
                                      if address(_param2):
                                          revert with Error(string reason), 'H32'
                                  else:
                                      if return_data.size >= 32:
                                          if ceil32(ceil32(_param3.length)) + ceil32(return_data.size) + 161 > LOCK8605463013() or 161 < 129:
                                              revert with 0, 65
                                      else:
                                          if ceil32(ceil32(_param3.length)) + (2 * ceil32(return_data.size)) + 129 > LOCK8605463013() or 2 * ceil32(return_data.size) < ceil32(return_data.size):
                                              revert with 0, 65
                                          require return_data.size >=′ 32
                                      require not -Mask(96, 160, ext_call.return_data[0])
                                      if address(ext_call.return_data[0]) != address(_param2):
                                          revert with Error(string reason), 'H32'
                              else:
                                  if ceil32(ceil32(_param3.length)) + (2 * ceil32(return_data.size)) + 97 > LOCK8605463013() or 2 * ceil32(return_data.size) < ceil32(return_data.size):
                                      revert with 0, 65
                                  require return_data.size >=′ 32
                                  require not -Mask(96, 160, ext_call.return_data[0])
                                  static call mem[128 len 20].getPair(address , address ) with:
                                          gas gas_remaining wei
                                         args address(ext_call.return_data[0]), address(ext_call.return_data[0])
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  if not ext_call.success:
                                      if address(_param2):
                                          revert with Error(string reason), 'H32'
                                  else:
                                      if return_data.size >= 32:
                                          if ceil32(ceil32(_param3.length)) + (2 * ceil32(return_data.size)) + 129 > LOCK8605463013() or 129 < 97:
                                              revert with 0, 65
                                      else:
                                          if ceil32(ceil32(_param3.length)) + (4 * ceil32(return_data.size)) + 97 > LOCK8605463013() or 4 * ceil32(return_data.size) < 2 * ceil32(return_data.size):
                                              revert with 0, 65
                                          require return_data.size >=′ 32
                                      require not -Mask(96, 160, ext_call.return_data[0])
                                      if address(ext_call.return_data[0]) != address(_param2):
                                          revert with Error(string reason), 'H32'
                          if stor10[address(_param2)]:
                              revert with Error(string reason), 'H9'
                          stor10[address(_param2)] = 1
                      else:
                          if _param1 - 0x694f935c77678723ade3382dc6b12cdbad34911e45c1fdf18a2919ca4507229b:
                              if not _param1 - 0x42b40d72274ce0717425763fa72c9c163c03cc39120843201fe659e2a4ba0ecb:
                                  if stor12[address(_param2)]:
                                      revert with Error(string reason), 'H9'
                                  stor12[address(_param2)] = 1
                              else:
                                  if not _param1 - 0x1058846c60f6859362a916b9ac3d89a87bcc7068167c55e62515eec51cb0dff8:
                                      if stor5[address(_param2)]:
                                          revert with Error(string reason), 'H9'
                                      stor5[address(_param2)] = 1
                                  else:
                                      if not _param1 - 0xa1939ff690b675030353919731519dbbe36f04e2789275a109cc765f66cf2990:
                                          if stor16[address(_param2)]:
                                              revert with Error(string reason), 'H9'
                                          stor16[address(_param2)] = 1
                                      else:
                                          if not _param1 - 0xfe731b89600e8e0f7e24df75443f6beea0a9215f2b20688a2f38548c0aa52f7a:
                                              if unknown692e3a95Address:
                                                  revert with Error(string reason), 'H20'
                                              unknown692e3a95Address = address(_param2)
                                          else:
                                              if not _param1 - 0x4a835202d60ca5f5c7b4d843f8f5b32c1010d0101183f53cb87e7278cac1506b:
                                                  if unknownd73c2f66Address:
                                                      revert with Error(string reason), 'H20'
                                                  unknownd73c2f66Address = address(_param2)
                                              else:
                                                  if -_param1 + 0x3349cb1d48fb20662e6095e6479f18fe92f1cdcfa7083feba86a52b0e0b47da7:
                                                      revert with Error(string reason), 'UNKNOWN ROLE'
                                                  if unknown628bcd8bAddress:
                                                      revert with Error(string reason), 'H20'
                                                  unknown628bcd8bAddress = address(_param2)
                          else:
                              static call address(_param2).token0() with:
                                      gas gas_remaining wei
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              if not ext_call.success:
                                  static call address(_param2).token1() with:
                                          gas gas_remaining wei
                                  revert with ext_call.return_data[0 len return_data.size]
                              if 32 <= return_data.size:
                                  if ceil32(ceil32(_param3.length)) + 129 > LOCK8605463013() or 129 < 97:
                                      revert with 0, 65
                                  require not -Mask(96, 160, ext_call.return_data[0])
                                  static call address(_param2).token1() with:
                                          gas gas_remaining wei
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  if not ext_call.success:
                                      static call address(_param2).fee() with:
                                              gas gas_remaining wei
                                      revert with ext_call.return_data[0 len return_data.size]
                                  if 32 <= return_data.size:
                                      if ceil32(ceil32(_param3.length)) + 161 > LOCK8605463013() or 161 < 129:
                                          revert with 0, 65
                                      require not -Mask(96, 160, ext_call.return_data[0])
                                      static call address(_param2).fee() with:
                                              gas gas_remaining wei
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                                      if not ext_call.success:
                                          static call mem[128 len 20].getPool(address , address , uint24 ) with:
                                                  gas gas_remaining wei
                                                 args address(ext_call.return_data[0]), address(ext_call.return_data[0]), 0
                                          revert with ext_call.return_data[0 len return_data.size]
                                      if 32 <= return_data.size:
                                          if ceil32(ceil32(_param3.length)) + 193 > LOCK8605463013() or 193 < 161:
                                              revert with 0, 65
                                          require not Mask(232, 24, ext_call.return_data[0])
                                          static call mem[128 len 20].getPool(address , address , uint24 ) with:
                                                  gas gas_remaining wei
                                                 args address(ext_call.return_data[0]), address(ext_call.return_data[0]), ext_call.return_data[0] % unknown01000000()
                                          if not ext_call.success:
                                              revert with ext_call.return_data[0 len return_data.size]
                                          if not ext_call.success:
                                              if address(_param2):
                                                  revert with Error(string reason), 'H33'
                                          else:
                                              if return_data.size >= 32:
                                                  if ceil32(ceil32(_param3.length)) + 225 > LOCK8605463013() or 225 < 193:
                                                      revert with 0, 65
                                              else:
                                                  if ceil32(ceil32(_param3.length)) + ceil32(return_data.size) + 193 > LOCK8605463013() or ceil32(return_data.size) < 0:
                                                      revert with 0, 65
                                                  require return_data.size >=′ 32
                                              require not -Mask(96, 160, ext_call.return_data[0])
                                              if address(ext_call.return_data[0]) != address(_param2):
                                                  revert with Error(string reason), 'H33'
                                      else:
                                          if ceil32(ceil32(_param3.length)) + ceil32(return_data.size) + 161 > LOCK8605463013() or ceil32(return_data.size) < 0:
                                              revert with 0, 65
                                          require return_data.size >=′ 32
                                          require not Mask(232, 24, ext_call.return_data[0])
                                          static call mem[128 len 20].getPool(address , address , uint24 ) with:
                                                  gas gas_remaining wei
                                                 args address(ext_call.return_data[0]), address(ext_call.return_data[0]), ext_call.return_data[0] % unknown01000000()
                                          if not ext_call.success:
                                              revert with ext_call.return_data[0 len return_data.size]
                                          if not ext_call.success:
                                              if address(_param2):
                                                  revert with Error(string reason), 'H33'
                                          else:
                                              if return_data.size >= 32:
                                                  if ceil32(ceil32(_param3.length)) + ceil32(return_data.size) + 193 > LOCK8605463013() or 193 < 161:
                                                      revert with 0, 65
                                              else:
                                                  if ceil32(ceil32(_param3.length)) + (2 * ceil32(return_data.size)) + 161 > LOCK8605463013() or 2 * ceil32(return_data.size) < ceil32(return_data.size):
                                                      revert with 0, 65
                                                  require return_data.size >=′ 32
                                              require not -Mask(96, 160, ext_call.return_data[0])
                                              if address(ext_call.return_data[0]) != address(_param2):
                                                  revert with Error(string reason), 'H33'
                                  else:
                                      if ceil32(ceil32(_param3.length)) + ceil32(return_data.size) + 129 > LOCK8605463013() or ceil32(return_data.size) < 0:
                                          revert with 0, 65
                                      require return_data.size >=′ 32
                                      require not -Mask(96, 160, ext_call.return_data[0])
                                      static call address(_param2).fee() with:
                                              gas gas_remaining wei
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                                      if not ext_call.success:
                                          static call mem[128 len 20].getPool(address , address , uint24 ) with:
                                                  gas gas_remaining wei
                                                 args address(ext_call.return_data[0]), address(ext_call.return_data[0]), 0
                                          revert with ext_call.return_data[0 len return_data.size]
                                      if 32 <= return_data.size:
                                          if ceil32(ceil32(_param3.length)) + ceil32(return_data.size) + 161 > LOCK8605463013() or 161 < 129:
                                              revert with 0, 65
                                          require not Mask(232, 24, ext_call.return_data[0])
                                          static call mem[128 len 20].getPool(address , address , uint24 ) with:
                                                  gas gas_remaining wei
                                                 args address(ext_call.return_data[0]), address(ext_call.return_data[0]), ext_call.return_data[0] % unknown01000000()
                                          if not ext_call.success:
                                              revert with ext_call.return_data[0 len return_data.size]
                                          if not ext_call.success:
                                              if address(_param2):
                                                  revert with Error(string reason), 'H33'
                                          else:
                                              if return_data.size >= 32:
                                                  if ceil32(ceil32(_param3.length)) + ceil32(return_data.size) + 193 > LOCK8605463013() or 193 < 161:
                                                      revert with 0, 65
                                              else:
                                                  if ceil32(ceil32(_param3.length)) + (2 * ceil32(return_data.size)) + 161 > LOCK8605463013() or 2 * ceil32(return_data.size) < ceil32(return_data.size):
                                                      revert with 0, 65
                                                  require return_data.size >=′ 32
                                              require not -Mask(96, 160, ext_call.return_data[0])
                                              if address(ext_call.return_data[0]) != address(_param2):
                                                  revert with Error(string reason), 'H33'
                                      else:
                                          if ceil32(ceil32(_param3.length)) + (2 * ceil32(return_data.size)) + 129 > LOCK8605463013() or 2 * ceil32(return_data.size) < ceil32(return_data.size):
                                              revert with 0, 65
                                          require return_data.size >=′ 32
                                          require not Mask(232, 24, ext_call.return_data[0])
                                          static call mem[128 len 20].getPool(address , address , uint24 ) with:
                                                  gas gas_remaining wei
                                                 args address(ext_call.return_data[0]), address(ext_call.return_data[0]), ext_call.return_data[0] % unknown01000000()
                                          if not ext_call.success:
                                              revert with ext_call.return_data[0 len return_data.size]
                                          if not ext_call.success:
                                              if address(_param2):
                                                  revert with Error(string reason), 'H33'
                                          else:
                                              if return_data.size >= 32:
                                                  if ceil32(ceil32(_param3.length)) + (2 * ceil32(return_data.size)) + 161 > LOCK8605463013() or 161 < 129:
                                                      revert with 0, 65
                                              else:
                                                  if ceil32(ceil32(_param3.length)) + (4 * ceil32(return_data.size)) + 129 > LOCK8605463013() or 4 * ceil32(return_data.size) < 2 * ceil32(return_data.size):
                                                      revert with 0, 65
                                                  require return_data.size >=′ 32
                                              require not -Mask(96, 160, ext_call.return_data[0])
                                              if address(ext_call.return_data[0]) != address(_param2):
                                                  revert with Error(string reason), 'H33'
                              else:
                                  if ceil32(ceil32(_param3.length)) + ceil32(return_data.size) + 97 > LOCK8605463013() or ceil32(return_data.size) < 0:
                                      revert with 0, 65
                                  require return_data.size >=′ 32
                                  require not -Mask(96, 160, ext_call.return_data[0])
                                  static call address(_param2).token1() with:
                                          gas gas_remaining wei
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  if not ext_call.success:
                                      static call address(_param2).fee() with:
                                              gas gas_remaining wei
                                      revert with ext_call.return_data[0 len return_data.size]
                                  if 32 <= return_data.size:
                                      if ceil32(ceil32(_param3.length)) + ceil32(return_data.size) + 129 > LOCK8605463013() or 129 < 97:
                                          revert with 0, 65
                                      require not -Mask(96, 160, ext_call.return_data[0])
                                      static call address(_param2).fee() with:
                                              gas gas_remaining wei
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                                      if not ext_call.success:
                                          static call mem[128 len 20].getPool(address , address , uint24 ) with:
                                                  gas gas_remaining wei
                                                 args address(ext_call.return_data[0]), address(ext_call.return_data[0]), 0
                                          revert with ext_call.return_data[0 len return_data.size]
                                      if 32 <= return_data.size:
                                          if ceil32(ceil32(_param3.length)) + ceil32(return_data.size) + 161 > LOCK8605463013() or 161 < 129:
                                              revert with 0, 65
                                          require not Mask(232, 24, ext_call.return_data[0])
                                          static call mem[128 len 20].getPool(address , address , uint24 ) with:
                                                  gas gas_remaining wei
                                                 args address(ext_call.return_data[0]), address(ext_call.return_data[0]), ext_call.return_data[0] % unknown01000000()
                                          if not ext_call.success:
                                              revert with ext_call.return_data[0 len return_data.size]
                                          if not ext_call.success:
                                              if address(_param2):
                                                  revert with Error(string reason), 'H33'
                                          else:
                                              if return_data.size >= 32:
                                                  if ceil32(ceil32(_param3.length)) + ceil32(return_data.size) + 193 > LOCK8605463013() or 193 < 161:
                                                      revert with 0, 65
                                              else:
                                                  if ceil32(ceil32(_param3.length)) + (2 * ceil32(return_data.size)) + 161 > LOCK8605463013() or 2 * ceil32(return_data.size) < ceil32(return_data.size):
                                                      revert with 0, 65
                                                  require return_data.size >=′ 32
                                              require not -Mask(96, 160, ext_call.return_data[0])
                                              if address(ext_call.return_data[0]) != address(_param2):
                                                  revert with Error(string reason), 'H33'
                                      else:
                                          if ceil32(ceil32(_param3.length)) + (2 * ceil32(return_data.size)) + 129 > LOCK8605463013() or 2 * ceil32(return_data.size) < ceil32(return_data.size):
                                              revert with 0, 65
                                          require return_data.size >=′ 32
                                          require not Mask(232, 24, ext_call.return_data[0])
                                          static call mem[128 len 20].getPool(address , address , uint24 ) with:
                                                  gas gas_remaining wei
                                                 args address(ext_call.return_data[0]), address(ext_call.return_data[0]), ext_call.return_data[0] % unknown01000000()
                                          if not ext_call.success:
                                              revert with ext_call.return_data[0 len return_data.size]
                                          if not ext_call.success:
                                              if address(_param2):
                                                  revert with Error(string reason), 'H33'
                                          else:
                                              if return_data.size >= 32:
                                                  if ceil32(ceil32(_param3.length)) + (2 * ceil32(return_data.size)) + 161 > LOCK8605463013() or 161 < 129:
                                                      revert with 0, 65
                                              else:
                                                  if ceil32(ceil32(_param3.length)) + (4 * ceil32(return_data.size)) + 129 > LOCK8605463013() or 4 * ceil32(return_data.size) < 2 * ceil32(return_data.size):
                                                      revert with 0, 65
                                                  require return_data.size >=′ 32
                                              require not -Mask(96, 160, ext_call.return_data[0])
                                              if address(ext_call.return_data[0]) != address(_param2):
                                                  revert with Error(string reason), 'H33'
                                  else:
                                      if ceil32(ceil32(_param3.length)) + (2 * ceil32(return_data.size)) + 97 > LOCK8605463013() or 2 * ceil32(return_data.size) < ceil32(return_data.size):
                                          revert with 0, 65
                                      require return_data.size >=′ 32
                                      require not -Mask(96, 160, ext_call.return_data[0])
                                      static call address(_param2).fee() with:
                                              gas gas_remaining wei
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                                      if not ext_call.success:
                                          static call mem[128 len 20].getPool(address , address , uint24 ) with:
                                                  gas gas_remaining wei
                                                 args address(ext_call.return_data[0]), address(ext_call.return_data[0]), 0
                                          revert with ext_call.return_data[0 len return_data.size]
                                      if 32 <= return_data.size:
                                          if ceil32(ceil32(_param3.length)) + (2 * ceil32(return_data.size)) + 129 > LOCK8605463013() or 129 < 97:
                                              revert with 0, 65
                                          require not Mask(232, 24, ext_call.return_data[0])
                                          static call mem[128 len 20].getPool(address , address , uint24 ) with:
                                                  gas gas_remaining wei
                                                 args address(ext_call.return_data[0]), address(ext_call.return_data[0]), ext_call.return_data[0] % unknown01000000()
                                          if not ext_call.success:
                                              revert with ext_call.return_data[0 len return_data.size]
                                          if not ext_call.success:
                                              if address(_param2):
                                                  revert with Error(string reason), 'H33'
                                          else:
                                              if return_data.size >= 32:
                                                  if ceil32(ceil32(_param3.length)) + (2 * ceil32(return_data.size)) + 161 > LOCK8605463013() or 161 < 129:
                                                      revert with 0, 65
                                              else:
                                                  if ceil32(ceil32(_param3.length)) + (4 * ceil32(return_data.size)) + 129 > LOCK8605463013() or 4 * ceil32(return_data.size) < 2 * ceil32(return_data.size):
                                                      revert with 0, 65
                                                  require return_data.size >=′ 32
                                              require not -Mask(96, 160, ext_call.return_data[0])
                                              if address(ext_call.return_data[0]) != address(_param2):
                                                  revert with Error(string reason), 'H33'
                                      else:
                                          if ceil32(ceil32(_param3.length)) + (4 * ceil32(return_data.size)) + 97 > LOCK8605463013() or 4 * ceil32(return_data.size) < 2 * ceil32(return_data.size):
                                              revert with 0, 65
                                          require return_data.size >=′ 32
                                          require not Mask(232, 24, ext_call.return_data[0])
                                          static call mem[128 len 20].getPool(address , address , uint24 ) with:
                                                  gas gas_remaining wei
                                                 args address(ext_call.return_data[0]), address(ext_call.return_data[0]), ext_call.return_data[0] % unknown01000000()
                                          if not ext_call.success:
                                              revert with ext_call.return_data[0 len return_data.size]
                                          if not ext_call.success:
                                              if address(_param2):
                                                  revert with Error(string reason), 'H33'
                                          else:
                                              if return_data.size >= 32:
                                                  if ceil32(ceil32(_param3.length)) + (4 * ceil32(return_data.size)) + 129 > LOCK8605463013() or 129 < 97:
                                                      revert with 0, 65
                                              else:
                                                  if ceil32(ceil32(_param3.length)) + (6 * ceil32(return_data.size)) + 97 > LOCK8605463013() or 6 * ceil32(return_data.size) < 4 * ceil32(return_data.size):
                                                      revert with 0, 65
                                                  require return_data.size >=′ 32
                                              require not -Mask(96, 160, ext_call.return_data[0])
                                              if address(ext_call.return_data[0]) != address(_param2):
                                                  revert with Error(string reason), 'H33'
                              if stor11[address(_param2)]:
                                  revert with Error(string reason), 'H9'
                              stor11[address(_param2)] = 1

def unknownf203c1b1(uint256 _param1) payable: 
  mem[64] = 96
  require not call.value
  require calldata.size - 4 >=′ 32
  if stor2[caller]:
      isActive = 0
      if _param1 > stor8:
          revert with Error(string reason), 'H13'
      if var54002 < _param1:
          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
  else:
      if stor3[caller]:
          isActive = 0
          if _param1 > stor8:
              revert with Error(string reason), 'H13'
          idx = 0
          while idx < _param1:
              if not stor8:
                  revert with 0, 50
              if idx == -1:
                  revert with 0, 17
              mem[0] = address(storFEF3.length)
              mem[32] = 9
              if not stor9[address(storFEF3.length)]:
                  if var85001 >= stor6:
                      idx = idx + 1
                      continue 
              else:
                  if stor9[address(storFEF3.length)] - 1 > stor9[address(storFEF3.length)]:
                      revert with 0, 17
                  if stor8 - 1 > stor8:
                      revert with 0, 17
                  if not stor8 - stor9[address(storFEF3.length)]:
                      if not stor8:
                          revert with 0, 49
                  else:
                      if stor8 - 1 >= stor8:
                          revert with 0, 50
                      if stor9[address(storFEF3.length)] - 1 >= stor8:
                          revert with 0, 50
                      storFEF3[stor9[address(storFEF3.length)]] = storFEF3[stor8]
                      stor9[storFEF3[stor8]] = stor9[address(storFEF3.length)]
                      if not stor8:
                          revert with 0, 49
                      if stor8 - 1 >= stor8:
                          revert with 0, 50
                      storF3F7[stor8] = 0
                      stor8--
                      mem[0] = address(storFEF3.length)
                      mem[32] = 9
                      stor9[address(storFEF3.length)] = 0
                      if var103001 >= stor6:
                          idx = idx + 1
                          continue 
              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
      else:
          mem[0] = caller
          mem[32] = 1
          if stor1[caller]:
              isActive = 0
              if _param1 > stor8:
                  revert with Error(string reason), 'H13'
              idx = 0
              while idx < _param1:
                  if not stor8:
                      revert with 0, 50
                  if idx == -1:
                      revert with 0, 17
                  mem[0] = address(storFEF3.length)
                  mem[32] = 9
                  if not stor9[address(storFEF3.length)]:
                      s = 0
                      while s < stor6:
                          mem[0] = 6
                          _384 = mem[64]
                          mem[mem[64] + 4] = this.address
                          mem[mem[64] + 36] = address(storE3F6[s].field_0)
                          static call address(storFEF3.length).allowance(address owner, address spender) with:
                                  gas gas_remaining wei
                                 args this.address, address(storE3F6[s].field_0)
                          mem[mem[64]] = ext_call.return_data[0]
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if not ext_call.success:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          if 32 <= return_data.size:
                              if mem[64] + 32 > LOCK8605463013() or mem[64] + 32 < mem[64]:
                                  revert with 0, 65
                              mem[64] = mem[64] + 32
                              if not ext_call.return_data[0]:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              mem[_384 + 64] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
                              mem[_384 + 68] = address(storE3F6[s].field_0)
                              mem[_384 + 100] = 0
                              mem[_384 + 32] = 68
                              if _384 + 160 > LOCK8605463013() or 160 < 32:
                                  revert with 0, 65
                              mem[64] = _384 + 160
                              call address(storFEF3.length).approve(address spender, uint256 amount) with:
                                   gas gas_remaining wei
                                  args address(storE3F6[s].field_0), 0
                              if not return_data.size:
                                  if not ext_call.success:
                                      log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if not mem[96]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require mem[96] >=′ 32
                                  require not bool(mem[128]) - mem[128]
                                  if mem[128]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  mem[_384 + 160] = address(storFEF3.length)
                                  mem[_384 + 192] = address(storE3F6[s].field_0)
                              else:
                                  if return_data.size > LOCK8605463013():
                                      revert with 0, 65
                                  if _384 + ceil32(ceil32(return_data.size)) + 161 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                      revert with 0, 65
                                  mem[64] = _384 + ceil32(ceil32(return_data.size)) + 161
                                  mem[_384 + 160] = return_data.size
                                  mem[_384 + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                  if not ext_call.success:
                                      log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if not return_data.size:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require return_data.size >=′ 32
                                  require not bool(mem[_384 + 192]) - mem[_384 + 192]
                                  if mem[_384 + 192]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  mem[_384 + ceil32(ceil32(return_data.size)) + 161] = address(storFEF3.length)
                                  mem[_384 + ceil32(ceil32(return_data.size)) + 193] = address(storE3F6[s].field_0)
                          else:
                              if mem[64] + ceil32(return_data.size) > LOCK8605463013() or mem[64] + ceil32(return_data.size) < mem[64]:
                                  revert with 0, 65
                              mem[64] = mem[64] + ceil32(return_data.size)
                              require return_data.size >=′ 32
                              if not ext_call.return_data[0]:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              mem[_384 + ceil32(return_data.size) + 32] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
                              mem[_384 + ceil32(return_data.size) + 36] = address(storE3F6[s].field_0)
                              mem[_384 + ceil32(return_data.size) + 68] = 0
                              mem[_384 + ceil32(return_data.size)] = 68
                              if _384 + ceil32(return_data.size) + 128 > LOCK8605463013() or 128 < 0:
                                  revert with 0, 65
                              mem[64] = _384 + ceil32(return_data.size) + 128
                              call address(storFEF3.length).approve(address spender, uint256 amount) with:
                                   gas gas_remaining wei
                                  args address(storE3F6[s].field_0), 0
                              if not return_data.size:
                                  if not ext_call.success:
                                      log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if not mem[96]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require mem[96] >=′ 32
                                  require not bool(mem[128]) - mem[128]
                                  if mem[128]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  mem[_384 + ceil32(return_data.size) + 128] = address(storFEF3.length)
                                  mem[_384 + ceil32(return_data.size) + 160] = address(storE3F6[s].field_0)
                              else:
                                  if return_data.size > LOCK8605463013():
                                      revert with 0, 65
                                  if _384 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                      revert with 0, 65
                                  mem[64] = _384 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129
                                  mem[_384 + ceil32(return_data.size) + 128] = return_data.size
                                  mem[_384 + ceil32(return_data.size) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                  if not ext_call.success:
                                      log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if not return_data.size:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require return_data.size >=′ 32
                                  require not bool(mem[_384 + ceil32(return_data.size) + 160]) - mem[_384 + ceil32(return_data.size) + 160]
                                  if mem[_384 + ceil32(return_data.size) + 160]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  mem[_384 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129] = address(storFEF3.length)
                                  mem[_384 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 161] = address(storE3F6[s].field_0)
                          log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                          if s == -1:
                              revert with 0, 17
                          s = s + 1
                          continue 
                  else:
                      if stor9[address(storFEF3.length)] - 1 > stor9[address(storFEF3.length)]:
                          revert with 0, 17
                      if stor8 - 1 > stor8:
                          revert with 0, 17
                      if not stor8 - stor9[address(storFEF3.length)]:
                          if not stor8:
                              revert with 0, 49
                          if stor8 - 1 >= stor8:
                              revert with 0, 50
                          storF3F7[stor8] = 0
                          stor8--
                          mem[0] = address(storFEF3.length)
                          mem[32] = 9
                          stor9[address(storFEF3.length)] = 0
                          if var96001 >= stor6:
                              idx = idx + 1
                              continue 
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      if stor8 - 1 >= stor8:
                          revert with 0, 50
                      if stor9[address(storFEF3.length)] - 1 >= stor8:
                          revert with 0, 50
                      storFEF3[stor9[address(storFEF3.length)]] = storFEF3[stor8]
                      stor9[storFEF3[stor8]] = stor9[address(storFEF3.length)]
                      if not stor8:
                          revert with 0, 49
                      if stor8 - 1 >= stor8:
                          revert with 0, 50
                      storF3F7[stor8] = 0
                      stor8--
                      mem[0] = address(storFEF3.length)
                      mem[32] = 9
                      stor9[address(storFEF3.length)] = 0
                      s = 0
                      while s < stor6:
                          mem[0] = 6
                          _385 = mem[64]
                          mem[mem[64] + 4] = this.address
                          mem[mem[64] + 36] = address(storE3F6[s].field_0)
                          static call address(storFEF3.length).allowance(address owner, address spender) with:
                                  gas gas_remaining wei
                                 args this.address, address(storE3F6[s].field_0)
                          mem[mem[64]] = ext_call.return_data[0]
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if not ext_call.success:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          if 32 <= return_data.size:
                              if mem[64] + 32 > LOCK8605463013() or mem[64] + 32 < mem[64]:
                                  revert with 0, 65
                              mem[64] = mem[64] + 32
                              if not ext_call.return_data[0]:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              mem[_385 + 64] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
                              mem[_385 + 68] = address(storE3F6[s].field_0)
                              mem[_385 + 100] = 0
                              mem[_385 + 32] = 68
                              if _385 + 160 > LOCK8605463013() or 160 < 32:
                                  revert with 0, 65
                              mem[64] = _385 + 160
                              call address(storFEF3.length).approve(address spender, uint256 amount) with:
                                   gas gas_remaining wei
                                  args address(storE3F6[s].field_0), 0
                              if not return_data.size:
                                  if not ext_call.success:
                                      log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if not mem[96]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require mem[96] >=′ 32
                                  require not bool(mem[128]) - mem[128]
                                  if mem[128]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  mem[_385 + 160] = address(storFEF3.length)
                                  mem[_385 + 192] = address(storE3F6[s].field_0)
                              else:
                                  if return_data.size > LOCK8605463013():
                                      revert with 0, 65
                                  if _385 + ceil32(ceil32(return_data.size)) + 161 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                      revert with 0, 65
                                  mem[64] = _385 + ceil32(ceil32(return_data.size)) + 161
                                  mem[_385 + 160] = return_data.size
                                  mem[_385 + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                  if not ext_call.success:
                                      log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if not return_data.size:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require return_data.size >=′ 32
                                  require not bool(mem[_385 + 192]) - mem[_385 + 192]
                                  if mem[_385 + 192]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  mem[_385 + ceil32(ceil32(return_data.size)) + 161] = address(storFEF3.length)
                                  mem[_385 + ceil32(ceil32(return_data.size)) + 193] = address(storE3F6[s].field_0)
                          else:
                              if mem[64] + ceil32(return_data.size) > LOCK8605463013() or mem[64] + ceil32(return_data.size) < mem[64]:
                                  revert with 0, 65
                              mem[64] = mem[64] + ceil32(return_data.size)
                              require return_data.size >=′ 32
                              if not ext_call.return_data[0]:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              mem[_385 + ceil32(return_data.size) + 32] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
                              mem[_385 + ceil32(return_data.size) + 36] = address(storE3F6[s].field_0)
                              mem[_385 + ceil32(return_data.size) + 68] = 0
                              mem[_385 + ceil32(return_data.size)] = 68
                              if _385 + ceil32(return_data.size) + 128 > LOCK8605463013() or 128 < 0:
                                  revert with 0, 65
                              mem[64] = _385 + ceil32(return_data.size) + 128
                              call address(storFEF3.length).approve(address spender, uint256 amount) with:
                                   gas gas_remaining wei
                                  args address(storE3F6[s].field_0), 0
                              if not return_data.size:
                                  if not ext_call.success:
                                      log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if not mem[96]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require mem[96] >=′ 32
                                  require not bool(mem[128]) - mem[128]
                                  if mem[128]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  mem[_385 + ceil32(return_data.size) + 128] = address(storFEF3.length)
                                  mem[_385 + ceil32(return_data.size) + 160] = address(storE3F6[s].field_0)
                              else:
                                  if return_data.size > LOCK8605463013():
                                      revert with 0, 65
                                  if _385 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                      revert with 0, 65
                                  mem[64] = _385 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129
                                  mem[_385 + ceil32(return_data.size) + 128] = return_data.size
                                  mem[_385 + ceil32(return_data.size) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                  if not ext_call.success:
                                      log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if not return_data.size:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require return_data.size >=′ 32
                                  require not bool(mem[_385 + ceil32(return_data.size) + 160]) - mem[_385 + ceil32(return_data.size) + 160]
                                  if mem[_385 + ceil32(return_data.size) + 160]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  mem[_385 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129] = address(storFEF3.length)
                                  mem[_385 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 161] = address(storE3F6[s].field_0)
                          log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                          if s == -1:
                              revert with 0, 17
                          s = s + 1
                          continue 
                  idx = idx + 1
                  continue 
          else:
              if caller != 0xce466fc694c971b95bb1193e494942e22197f759:
                  revert with Error(string reason), 'H11'
              isActive = 0
              if _param1 > stor8:
                  revert with Error(string reason), 'H13'
              idx = 0
              while idx < _param1:
                  if not stor8:
                      revert with 0, 50
                  if idx == -1:
                      revert with 0, 17
                  mem[0] = address(storFEF3.length)
                  mem[32] = 9
                  if not stor9[address(storFEF3.length)]:
                      s = 0
                      while s < stor6:
                          mem[0] = 6
                          _185 = mem[64]
                          mem[mem[64] + 4] = this.address
                          mem[mem[64] + 36] = address(storE3F6[s].field_0)
                          static call address(storFEF3.length).allowance(address owner, address spender) with:
                                  gas gas_remaining wei
                                 args this.address, address(storE3F6[s].field_0)
                          mem[mem[64]] = ext_call.return_data[0]
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          if not ext_call.success:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          if 32 <= return_data.size:
                              if mem[64] + 32 > LOCK8605463013() or mem[64] + 32 < mem[64]:
                                  revert with 0, 65
                              mem[64] = mem[64] + 32
                              if ext_call.return_data[0]:
                                  mem[_185 + 64] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
                                  mem[_185 + 68] = address(storE3F6[s].field_0)
                                  mem[_185 + 100] = 0
                                  mem[_185 + 32] = 68
                                  if _185 + 160 > LOCK8605463013() or 160 < 32:
                                      revert with 0, 65
                                  mem[64] = _185 + 160
                                  call address(storFEF3.length).approve(address spender, uint256 amount) with:
                                       gas gas_remaining wei
                                      args address(storE3F6[s].field_0), 0
                                  if not return_data.size:
                                      if not ext_call.success:
                                          mem[_185 + 160] = address(storFEF3.length)
                                          mem[_185 + 192] = address(storE3F6[s].field_0)
                                          log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                      else:
                                          if not mem[96]:
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          require mem[96] >=′ 32
                                          require not bool(mem[128]) - mem[128]
                                          if not mem[128]:
                                              mem[_185 + 160] = address(storFEF3.length)
                                              mem[_185 + 192] = address(storE3F6[s].field_0)
                                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                  else:
                                      if return_data.size > LOCK8605463013():
                                          revert with 0, 65
                                      if _185 + ceil32(ceil32(return_data.size)) + 161 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                          revert with 0, 65
                                      mem[64] = _185 + ceil32(ceil32(return_data.size)) + 161
                                      mem[_185 + 160] = return_data.size
                                      mem[_185 + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                      if not ext_call.success:
                                          mem[_185 + ceil32(ceil32(return_data.size)) + 161] = address(storFEF3.length)
                                          mem[_185 + ceil32(ceil32(return_data.size)) + 193] = address(storE3F6[s].field_0)
                                          log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                      else:
                                          if not return_data.size:
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          require return_data.size >=′ 32
                                          require not bool(mem[_185 + 192]) - mem[_185 + 192]
                                          if not mem[_185 + 192]:
                                              mem[_185 + ceil32(ceil32(return_data.size)) + 161] = address(storFEF3.length)
                                              mem[_185 + ceil32(ceil32(return_data.size)) + 193] = address(storE3F6[s].field_0)
                                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                          else:
                              if mem[64] + ceil32(return_data.size) > LOCK8605463013() or mem[64] + ceil32(return_data.size) < mem[64]:
                                  revert with 0, 65
                              mem[64] = mem[64] + ceil32(return_data.size)
                              require return_data.size >=′ 32
                              if ext_call.return_data[0]:
                                  mem[_185 + ceil32(return_data.size) + 32] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
                                  mem[_185 + ceil32(return_data.size) + 36] = address(storE3F6[s].field_0)
                                  mem[_185 + ceil32(return_data.size) + 68] = 0
                                  mem[_185 + ceil32(return_data.size)] = 68
                                  if _185 + ceil32(return_data.size) + 128 > LOCK8605463013() or 128 < 0:
                                      revert with 0, 65
                                  mem[64] = _185 + ceil32(return_data.size) + 128
                                  call address(storFEF3.length).approve(address spender, uint256 amount) with:
                                       gas gas_remaining wei
                                      args address(storE3F6[s].field_0), 0
                                  if not return_data.size:
                                      if not ext_call.success:
                                          mem[_185 + ceil32(return_data.size) + 128] = address(storFEF3.length)
                                          mem[_185 + ceil32(return_data.size) + 160] = address(storE3F6[s].field_0)
                                          log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                      else:
                                          if not mem[96]:
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          require mem[96] >=′ 32
                                          require not bool(mem[128]) - mem[128]
                                          if not mem[128]:
                                              mem[_185 + ceil32(return_data.size) + 128] = address(storFEF3.length)
                                              mem[_185 + ceil32(return_data.size) + 160] = address(storE3F6[s].field_0)
                                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                  else:
                                      if return_data.size > LOCK8605463013():
                                          revert with 0, 65
                                      if _185 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                          revert with 0, 65
                                      mem[64] = _185 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129
                                      mem[_185 + ceil32(return_data.size) + 128] = return_data.size
                                      mem[_185 + ceil32(return_data.size) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                      if not ext_call.success:
                                          mem[_185 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129] = address(storFEF3.length)
                                          mem[_185 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 161] = address(storE3F6[s].field_0)
                                          log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                      else:
                                          if not return_data.size:
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          require return_data.size >=′ 32
                                          require not bool(mem[_185 + ceil32(return_data.size) + 160]) - mem[_185 + ceil32(return_data.size) + 160]
                                          if not mem[_185 + ceil32(return_data.size) + 160]:
                                              mem[_185 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129] = address(storFEF3.length)
                                              mem[_185 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 161] = address(storE3F6[s].field_0)
                                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                          if s == -1:
                              revert with 0, 17
                          s = s + 1
                          continue 
                  else:
                      if stor9[address(storFEF3.length)] - 1 > stor9[address(storFEF3.length)]:
                          revert with 0, 17
                      if stor8 - 1 > stor8:
                          revert with 0, 17
                      if not stor8 - stor9[address(storFEF3.length)]:
                          if not stor8:
                              revert with 0, 49
                          if stor8 - 1 >= stor8:
                              revert with 0, 50
                          storF3F7[stor8] = 0
                          stor8--
                          mem[0] = address(storFEF3.length)
                          mem[32] = 9
                          stor9[address(storFEF3.length)] = 0
                          s = 0
                          while s < stor6:
                              mem[0] = 6
                              _383 = mem[64]
                              mem[mem[64] + 4] = this.address
                              mem[mem[64] + 36] = address(storE3F6[s].field_0)
                              static call address(storFEF3.length).allowance(address owner, address spender) with:
                                      gas gas_remaining wei
                                     args this.address, address(storE3F6[s].field_0)
                              mem[mem[64]] = ext_call.return_data[0]
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              if not ext_call.success:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              if 32 <= return_data.size:
                                  if mem[64] + 32 > LOCK8605463013() or mem[64] + 32 < mem[64]:
                                      revert with 0, 65
                                  mem[64] = mem[64] + 32
                                  if not ext_call.return_data[0]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  mem[_383 + 64] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
                                  mem[_383 + 68] = address(storE3F6[s].field_0)
                                  mem[_383 + 100] = 0
                                  mem[_383 + 32] = 68
                                  if _383 + 160 > LOCK8605463013() or 160 < 32:
                                      revert with 0, 65
                                  mem[64] = _383 + 160
                                  call address(storFEF3.length).approve(address spender, uint256 amount) with:
                                       gas gas_remaining wei
                                      args address(storE3F6[s].field_0), 0
                                  if not return_data.size:
                                      if not ext_call.success:
                                          log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      if not mem[96]:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require mem[96] >=′ 32
                                      require not bool(mem[128]) - mem[128]
                                      if mem[128]:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      mem[_383 + 160] = address(storFEF3.length)
                                      mem[_383 + 192] = address(storE3F6[s].field_0)
                                  else:
                                      if return_data.size > LOCK8605463013():
                                          revert with 0, 65
                                      if _383 + ceil32(ceil32(return_data.size)) + 161 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                          revert with 0, 65
                                      mem[64] = _383 + ceil32(ceil32(return_data.size)) + 161
                                      mem[_383 + 160] = return_data.size
                                      mem[_383 + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                      if not ext_call.success:
                                          log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      if not return_data.size:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require return_data.size >=′ 32
                                      require not bool(mem[_383 + 192]) - mem[_383 + 192]
                                      if mem[_383 + 192]:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      mem[_383 + ceil32(ceil32(return_data.size)) + 161] = address(storFEF3.length)
                                      mem[_383 + ceil32(ceil32(return_data.size)) + 193] = address(storE3F6[s].field_0)
                              else:
                                  if mem[64] + ceil32(return_data.size) > LOCK8605463013() or mem[64] + ceil32(return_data.size) < mem[64]:
                                      revert with 0, 65
                                  mem[64] = mem[64] + ceil32(return_data.size)
                                  require return_data.size >=′ 32
                                  if not ext_call.return_data[0]:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  mem[_383 + ceil32(return_data.size) + 32] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
                                  mem[_383 + ceil32(return_data.size) + 36] = address(storE3F6[s].field_0)
                                  mem[_383 + ceil32(return_data.size) + 68] = 0
                                  mem[_383 + ceil32(return_data.size)] = 68
                                  if _383 + ceil32(return_data.size) + 128 > LOCK8605463013() or 128 < 0:
                                      revert with 0, 65
                                  mem[64] = _383 + ceil32(return_data.size) + 128
                                  call address(storFEF3.length).approve(address spender, uint256 amount) with:
                                       gas gas_remaining wei
                                      args address(storE3F6[s].field_0), 0
                                  if not return_data.size:
                                      if not ext_call.success:
                                          log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      if not mem[96]:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require mem[96] >=′ 32
                                      require not bool(mem[128]) - mem[128]
                                      if mem[128]:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      mem[_383 + ceil32(return_data.size) + 128] = address(storFEF3.length)
                                      mem[_383 + ceil32(return_data.size) + 160] = address(storE3F6[s].field_0)
                                  else:
                                      if return_data.size > LOCK8605463013():
                                          revert with 0, 65
                                      if _383 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                          revert with 0, 65
                                      mem[64] = _383 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129
                                      mem[_383 + ceil32(return_data.size) + 128] = return_data.size
                                      mem[_383 + ceil32(return_data.size) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                      if not ext_call.success:
                                          log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      if not return_data.size:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require return_data.size >=′ 32
                                      require not bool(mem[_383 + ceil32(return_data.size) + 160]) - mem[_383 + ceil32(return_data.size) + 160]
                                      if mem[_383 + ceil32(return_data.size) + 160]:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      mem[_383 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129] = address(storFEF3.length)
                                      mem[_383 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 161] = address(storE3F6[s].field_0)
                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                              if s == -1:
                                  revert with 0, 17
                              s = s + 1
                              continue 
                      else:
                          if stor8 - 1 >= stor8:
                              revert with 0, 50
                          if stor9[address(storFEF3.length)] - 1 >= stor8:
                              revert with 0, 50
                          storFEF3[stor9[address(storFEF3.length)]] = storFEF3[stor8]
                          stor9[storFEF3[stor8]] = stor9[address(storFEF3.length)]
                          if not stor8:
                              revert with 0, 49
                          if stor8 - 1 >= stor8:
                              revert with 0, 50
                          storF3F7[stor8] = 0
                          stor8--
                          mem[0] = address(storFEF3.length)
                          mem[32] = 9
                          stor9[address(storFEF3.length)] = 0
                          s = 0
                          while s < stor6:
                              mem[0] = 6
                              _186 = mem[64]
                              mem[mem[64] + 4] = this.address
                              mem[mem[64] + 36] = address(storE3F6[s].field_0)
                              static call address(storFEF3.length).allowance(address owner, address spender) with:
                                      gas gas_remaining wei
                                     args this.address, address(storE3F6[s].field_0)
                              mem[mem[64]] = ext_call.return_data[0]
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              if not ext_call.success:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              if 32 <= return_data.size:
                                  if mem[64] + 32 > LOCK8605463013() or mem[64] + 32 < mem[64]:
                                      revert with 0, 65
                                  mem[64] = mem[64] + 32
                                  if ext_call.return_data[0]:
                                      mem[_186 + 64] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
                                      mem[_186 + 68] = address(storE3F6[s].field_0)
                                      mem[_186 + 100] = 0
                                      mem[_186 + 32] = 68
                                      if _186 + 160 > LOCK8605463013() or 160 < 32:
                                          revert with 0, 65
                                      mem[64] = _186 + 160
                                      call address(storFEF3.length).approve(address spender, uint256 amount) with:
                                           gas gas_remaining wei
                                          args address(storE3F6[s].field_0), 0
                                      if not return_data.size:
                                          if not ext_call.success:
                                              mem[_186 + 160] = address(storFEF3.length)
                                              mem[_186 + 192] = address(storE3F6[s].field_0)
                                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                          else:
                                              if not mem[96]:
                                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                              require mem[96] >=′ 32
                                              require not bool(mem[128]) - mem[128]
                                              if not mem[128]:
                                                  mem[_186 + 160] = address(storFEF3.length)
                                                  mem[_186 + 192] = address(storE3F6[s].field_0)
                                                  log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                      else:
                                          if return_data.size > LOCK8605463013():
                                              revert with 0, 65
                                          if _186 + ceil32(ceil32(return_data.size)) + 161 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                              revert with 0, 65
                                          mem[64] = _186 + ceil32(ceil32(return_data.size)) + 161
                                          mem[_186 + 160] = return_data.size
                                          mem[_186 + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                          if not ext_call.success:
                                              mem[_186 + ceil32(ceil32(return_data.size)) + 161] = address(storFEF3.length)
                                              mem[_186 + ceil32(ceil32(return_data.size)) + 193] = address(storE3F6[s].field_0)
                                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                          else:
                                              if not return_data.size:
                                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                              require return_data.size >=′ 32
                                              require not bool(mem[_186 + 192]) - mem[_186 + 192]
                                              if not mem[_186 + 192]:
                                                  mem[_186 + ceil32(ceil32(return_data.size)) + 161] = address(storFEF3.length)
                                                  mem[_186 + ceil32(ceil32(return_data.size)) + 193] = address(storE3F6[s].field_0)
                                                  log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                              else:
                                  if mem[64] + ceil32(return_data.size) > LOCK8605463013() or mem[64] + ceil32(return_data.size) < mem[64]:
                                      revert with 0, 65
                                  mem[64] = mem[64] + ceil32(return_data.size)
                                  require return_data.size >=′ 32
                                  if ext_call.return_data[0]:
                                      mem[_186 + ceil32(return_data.size) + 32] = 0x95ea7b300000000000000000000000000000000000000000000000000000000
                                      mem[_186 + ceil32(return_data.size) + 36] = address(storE3F6[s].field_0)
                                      mem[_186 + ceil32(return_data.size) + 68] = 0
                                      mem[_186 + ceil32(return_data.size)] = 68
                                      if _186 + ceil32(return_data.size) + 128 > LOCK8605463013() or 128 < 0:
                                          revert with 0, 65
                                      mem[64] = _186 + ceil32(return_data.size) + 128
                                      call address(storFEF3.length).approve(address spender, uint256 amount) with:
                                           gas gas_remaining wei
                                          args address(storE3F6[s].field_0), 0
                                      if not return_data.size:
                                          if not ext_call.success:
                                              mem[_186 + ceil32(return_data.size) + 128] = address(storFEF3.length)
                                              mem[_186 + ceil32(return_data.size) + 160] = address(storE3F6[s].field_0)
                                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                          else:
                                              if not mem[96]:
                                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                              require mem[96] >=′ 32
                                              require not bool(mem[128]) - mem[128]
                                              if not mem[128]:
                                                  mem[_186 + ceil32(return_data.size) + 128] = address(storFEF3.length)
                                                  mem[_186 + ceil32(return_data.size) + 160] = address(storE3F6[s].field_0)
                                                  log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                      else:
                                          if return_data.size > LOCK8605463013():
                                              revert with 0, 65
                                          if _186 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129 > LOCK8605463013() or ceil32(ceil32(return_data.size)) + 129 < 128:
                                              revert with 0, 65
                                          mem[64] = _186 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129
                                          mem[_186 + ceil32(return_data.size) + 128] = return_data.size
                                          mem[_186 + ceil32(return_data.size) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                          if not ext_call.success:
                                              mem[_186 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129] = address(storFEF3.length)
                                              mem[_186 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 161] = address(storE3F6[s].field_0)
                                              log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                                          else:
                                              if not return_data.size:
                                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                              require return_data.size >=′ 32
                                              require not bool(mem[_186 + ceil32(return_data.size) + 160]) - mem[_186 + ceil32(return_data.size) + 160]
                                              if not mem[_186 + ceil32(return_data.size) + 160]:
                                                  mem[_186 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 129] = address(storFEF3.length)
                                                  mem[_186 + ceil32(return_data.size) + ceil32(ceil32(return_data.size)) + 161] = address(storE3F6[s].field_0)
                                                  log 0x1685a34f: address(storFEF3.length), address(storE3F6[s].field_0)
                              if s == -1:
                                  revert with 0, 17
                              s = s + 1
                              continue 
                  idx = idx + 1
                  continue 
  log 0xeffe3908 


