# Palkeoramix decompiler. 

def storage:
  signers is array of address at storage 0
  safeMode is uint8 at storage 1
  stor2 is array of uint256 at storage 2

def signers(uint256 _param1): # not payable
  require _param1 < signers.length
  return signers[_param1]

def safeMode(): # not payable
  return bool(safeMode)

#
#  Regular functions
#

def _fallback(?) payable: # default function
  if call.value > 0:
      log Deposited(
            address from=caller,
            uint256 value=call.value,
            bytes data=Array(len=calldata.size, data=call.data[0 len calldata.size]))

def isSigner(address account): # not payable
  idx = 0
  while idx < signers.length:
      mem[0] = 0
      if signers[idx] != account:
          idx = idx + 1
          continue 
      return 1
  return 0

def activateSafeMode(): # not payable
  require 0 < signers.length
  idx = 0
  while signers[idx] != caller:
      require idx + 1 < signers.length
      mem[0] = 0
      idx = idx + 1
      continue 
  safeMode = 1
  log SafeModeActivated(address msgSender=caller)

def getNextSequenceId(): # not payable
  idx = 0
  s = 0
  while idx < 10:
      if stor2[idx] <= s:
          idx = idx + 1
          s = s
          continue 
      require idx < 10
      idx = idx + 1
      s = stor2[idx]
      continue 
  return (s + 1)

def flushForwarderTokens(address forwarderAddress, address tokenContractAddress): # not payable
  require 0 < signers.length
  idx = 0
  while signers[idx] != caller:
      require idx + 1 < signers.length
      mem[0] = 0
      idx = idx + 1
      continue 
  require ext_code.size(forwarderAddress)
  call forwarderAddress.flushTokens(address tokenContractAddress) with:
       gas gas_remaining - 710 wei
      args tokenContractAddress
  require ext_call.success

def createForwarder(): # not payable
  create contract with 0 wei
                  code: 0x6060604052341561000f57600080fd5b60008054600160a060020a033316600160a060020a031990911617905561033c8061003b6000396000f30060606040526004361061003c5763ffffffff60e060020a600035041662821de381146100eb5780633ef133671461011a5780636b9f96ea1461013b575b60008054600160a060020a0316903490366040518083838082843782019150509250505060006040518083038185876187965a03f192505050151561008057600080fd5b7f69b31548dea9b3b707b4dff357d326e3e9348b24e7a6080a218a6edeeec48f9b3334600036604051600160a060020a0385168152602081018490526060604082018181529082018390526080820184848082843782019150509550505050505060405180910390a1005b34156100f657600080fd5b6100fe61014e565b604051600160a060020a03909116815260200160405180910390f35b341561012557600080fd5b610139600160a060020a036004351661015d565b005b341561014657600080fd5b6101396102d9565b600054600160a060020a031681565b600080548190819033600160a060020a0390811691161461017d57600080fd5b83925030915082600160a060020a03166370a082318360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156101da57600080fd5b6102c65a03f115156101eb57600080fd5b5050506040518051915050801515610202576102d3565b60008054600160a060020a038086169263a9059cbb929091169084906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561026857600080fd5b6102c65a03f1151561027957600080fd5b50505060405180519050151561028e57600080fd5b7f9401e4e79c19cbe2bd774cb70a94ba660e6718be1bac1298ab3b07f454a608218482604051600160a060020a03909216825260208201526040908101905180910390a15b50505050565b600054600160a060020a039081169030163160405160006040518083038185876187965a03f192505050151561030e57600080fd5b5600a165627a7a72305820a6b61178cc9f27c0f16522b572583d67a89a7cea9f0d74293c1771a8260c386500
  require create.new_address
  return address(create.new_address)

def sendMultiSigToken(address toAddress, uint256 value, address tokenContractAddress, uint256 expireTime, uint256 sequenceId, bytes signature): # not payable
  mem[128 len signature.length] = signature[all]
  require 0 < signers.length
  idx = 0
  while signers[idx] != caller:
      require idx + 1 < signers.length
      mem[0] = 0
      idx = idx + 1
      continue 
  mem[ceil32(signature.length) + 128] = 'ERC20'
  mem[ceil32(signature.length) + 133] = address(toAddress)
  mem[ceil32(signature.length) + 153] = value
  mem[ceil32(signature.length) + 185] = address(tokenContractAddress)
  require 65 == signature.length
  if mem[192 len 1] >= 27:
      signer = erecover(sha3('ERC20', toAddress, value, tokenContractAddress, expireTime, sequenceId), mem[161] << 248, mem[128], mem[160]) # precompiled
  else:
      signer = erecover(sha3('ERC20', toAddress, value, tokenContractAddress, expireTime, sequenceId), mem[192 len 1] + 27 << 248, mem[128], mem[160]) # precompiled
  require erecover.result
  if safeMode:
      require 0 < signers.length
      idx = 0
      while signers[idx] != toAddress:
          require idx + 1 < signers.length
          mem[0] = 0
          idx = idx + 1
          continue 
  require expireTime >= block.timestamp
  require 0 < signers.length
  idx = 0
  while signers[idx] != caller:
      require idx + 1 < signers.length
      mem[0] = 0
      idx = idx + 1
      continue 
  idx = 0
  while idx < 10:
      require stor2[idx] != sequenceId
      require idx < 10
      idx = idx + 1
      continue 
  require sequenceId >= stor2.length
  require sequenceId <= stor2.length + 10000
  stor2.length = sequenceId
  require 0 < signers.length
  idx = 0
  while signers[idx] != address(signer):
      require idx + 1 < signers.length
      mem[0] = 0
      idx = idx + 1
      continue 
  require address(signer) != caller
  require ext_code.size(tokenContractAddress)
  call tokenContractAddress.transfer(address recipient, uint256 amount) with:
       gas gas_remaining - 710 wei
      args address(toAddress), value
  require ext_call.success
  require ext_call.return_data[0]

def sendMultiSig(address toAddress, uint256 value, bytes data, uint256 expireTime, uint256 sequenceId, bytes signature): # not payable
  mem[128 len data.length] = data[all]
  mem[ceil32(data.length) + 128] = signature.length
  mem[ceil32(data.length) + 160 len signature.length] = signature[all]
  require 0 < signers.length
  idx = 0
  while signers[idx] != caller:
      require idx + 1 < signers.length
      mem[0] = 0
      idx = idx + 1
      continue 
  mem[ceil32(data.length) + ceil32(signature.length) + 160] = 'ETHER'
  mem[ceil32(data.length) + ceil32(signature.length) + 165] = address(toAddress)
  mem[ceil32(data.length) + ceil32(signature.length) + 185] = value
  mem[ceil32(data.length) + ceil32(signature.length) + 217 len floor32(data.length)] = call.data[data + 36 len floor32(data.length)]
  mem[ceil32(data.length) + ceil32(signature.length) + floor32(data.length) + -(data.length % 32) + 249 len data.length % 32] = mem[floor32(data.length) + -(data.length % 32) + 160 len data.length % 32]
  mem[data.length + ceil32(data.length) + ceil32(signature.length) + 217] = expireTime
  mem[data.length + ceil32(data.length) + ceil32(signature.length) + 249] = sequenceId
  _66 = sha3('ETHER', toAddress, value, call.data[data + 36 len floor32(data.length)], mem[ceil32(data.length) + ceil32(signature.length) + floor32(data.length) + 217 len (data.length % 32) + 32], sequenceId, None)
  require 65 == signature.length
  _70 = mem[ceil32(data.length) + 192]
  _71 = mem[ceil32(data.length) + 193]
  mem[ceil32(data.length) + ceil32(signature.length) + 192] = sha3('ETHER', toAddress, value, call.data[data + 36 len floor32(data.length)], mem[ceil32(data.length) + ceil32(signature.length) + floor32(data.length) + 217 len (data.length % 32) + 32], sequenceId, None)
  if mem[ceil32(data.length) + 224 len 1] >= 27:
      mem[ceil32(data.length) + ceil32(signature.length) + 224] = uint8(_71)
      mem[ceil32(data.length) + ceil32(signature.length) + 256] = mem[ceil32(data.length) + 160]
      mem[ceil32(data.length) + ceil32(signature.length) + 288] = _70
      signer = erecover(_66, _71 << 248, mem[ceil32(data.length) + 160], _70) # precompiled
      require erecover.result
      if safeMode:
          require 0 < signers.length
          idx = 0
          while signers[idx] != toAddress:
              require idx + 1 < signers.length
              mem[0] = 0
              idx = idx + 1
              continue 
      require expireTime >= block.timestamp
      require 0 < signers.length
      idx = 0
      while signers[idx] != caller:
          require idx + 1 < signers.length
          mem[0] = 0
          idx = idx + 1
          continue 
      idx = 0
      while idx < 10:
          require stor2[idx] != sequenceId
          require idx < 10
          idx = idx + 1
          continue 
      require sequenceId >= stor2.length
      require sequenceId <= stor2.length + 10000
      stor2.length = sequenceId
      require 0 < signers.length
      idx = 0
      while signers[idx] != address(signer):
          require idx + 1 < signers.length
          mem[0] = 0
          idx = idx + 1
          continue 
      require address(signer) != caller
      mem[ceil32(data.length) + ceil32(signature.length) + 192 len ceil32(data.length)] = data[all], mem[data.length + 128 len ceil32(data.length) - data.length]
  else:
      mem[ceil32(data.length) + ceil32(signature.length) + 224] = uint8(uint8(_71) + 27)
      mem[ceil32(data.length) + ceil32(signature.length) + 256] = mem[ceil32(data.length) + 160]
      mem[ceil32(data.length) + ceil32(signature.length) + 288] = _70
      signer = erecover(_66, uint8(_71) + 27 << 248, mem[ceil32(data.length) + 160], _70) # precompiled
      require erecover.result
      if not safeMode:
          require expireTime >= block.timestamp
          require 0 < signers.length
          idx = 0
          while signers[idx] != caller:
              require idx + 1 < signers.length
              mem[0] = 0
              idx = idx + 1
              continue 
          idx = 0
          while idx < 10:
              require stor2[idx] != sequenceId
              require idx < 10
              idx = idx + 1
              continue 
          require sequenceId >= stor2.length
          require sequenceId <= stor2.length + 10000
          stor2.length = sequenceId
          require 0 < signers.length
          idx = 0
          while signers[idx] != address(signer):
              require idx + 1 < signers.length
              mem[0] = 0
              idx = idx + 1
              continue 
          require address(signer) != caller
          mem[ceil32(data.length) + ceil32(signature.length) + 192 len ceil32(data.length)] = data[all], mem[data.length + 128 len ceil32(data.length) - data.length]
          var58001 = ceil32(data.length)
      else:
          require 0 < signers.length
          idx = 0
          while signers[idx] != toAddress:
              require idx + 1 < signers.length
              mem[0] = 0
              idx = idx + 1
              continue 
          require expireTime >= block.timestamp
          require 0 < signers.length
          idx = 0
          while signers[idx] != caller:
              require idx + 1 < signers.length
              mem[0] = 0
              idx = idx + 1
              continue 
          idx = 0
          while idx < 10:
              require stor2[idx] != sequenceId
              require idx < 10
              idx = idx + 1
              continue 
          require sequenceId >= stor2.length
          require sequenceId <= stor2.length + 10000
          stor2.length = sequenceId
          require 0 < signers.length
          idx = 0
          while signers[idx] != address(signer):
              require idx + 1 < signers.length
              mem[0] = 0
              idx = idx + 1
              continue 
          require address(signer) != caller
          mem[ceil32(data.length) + ceil32(signature.length) + 192 len ceil32(data.length)] = data[all], mem[data.length + 128 len ceil32(data.length) - data.length]
  if not data.length % 32:
      call toAddress.mem[ceil32(data.length) + ceil32(signature.length) + 192 len 4] with:
         value value wei
           gas gas_remaining - 34710 wei
          args mem[ceil32(data.length) + ceil32(signature.length) + 196 len data.length - 4]
  else:
      mem[floor32(data.length) + ceil32(data.length) + ceil32(signature.length) + 192] = mem[floor32(data.length) + ceil32(data.length) + ceil32(signature.length) + -(data.length % 32) + 224 len data.length % 32]
      call toAddress.mem[ceil32(data.length) + ceil32(signature.length) + 192 len 4] with:
         value value wei
           gas gas_remaining - 34710 wei
          args mem[ceil32(data.length) + ceil32(signature.length) + 196 len floor32(data.length) + 28]
  require ext_call.success
  mem[ceil32(data.length) + ceil32(signature.length) + 192] = caller
  mem[ceil32(data.length) + ceil32(signature.length) + 224] = address(signer)
  mem[ceil32(data.length) + ceil32(signature.length) + 256] = _66
  mem[ceil32(data.length) + ceil32(signature.length) + 288] = toAddress
  mem[ceil32(data.length) + ceil32(signature.length) + 320] = value
  mem[ceil32(data.length) + ceil32(signature.length) + 352] = 192
  mem[ceil32(data.length) + ceil32(signature.length) + 384] = data.length
  mem[ceil32(data.length) + ceil32(signature.length) + 416 len ceil32(data.length)] = data[all], mem[data.length + 128 len ceil32(data.length) - data.length]
  if not data.length % 32:
      log Transacted(address msgSender, address otherSigner, bytes32 operation, address toAddress, uint256 value, bytes data):
                     mem[ceil32(data.length) + ceil32(signature.length) + 192 len data.length + 25],
                     expireTime,
                     sequenceId,
                     mem[ceil32(data.length) + ceil32(signature.length) + data.length + 281 len 135],
  else:
      mem[floor32(data.length) + ceil32(data.length) + ceil32(signature.length) + 416] = mem[floor32(data.length) + ceil32(data.length) + ceil32(signature.length) + -(data.length % 32) + 448 len data.length % 32]
      log Transacted(address msgSender, address otherSigner, bytes32 operation, address toAddress, uint256 value, bytes data):
                     mem[ceil32(data.length) + ceil32(signature.length) + 192 len data.length + 25],
                     expireTime,
                     sequenceId,
                     mem[ceil32(data.length) + ceil32(signature.length) + data.length + 281 len -(data.length % 32) + 167],


