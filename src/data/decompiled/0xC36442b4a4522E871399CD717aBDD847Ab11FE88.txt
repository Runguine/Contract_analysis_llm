# Palkeoramix decompiler. 

const baseURI = ' '
const factory = 0x1f98431c8ad98523631ae4a59f267346ea31f984
const PERMIT_TYPEHASH = 0x49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad
const DOMAIN_SEPARATOR = sha3(0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f, 0x193ae757ecb6ead396a72d38c6cc38e1be93297aa66ffefea29e32ce3045475f, 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6, chainid, address(this.address))
const WETH9 = 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2

def storage:
  stor0 is mapping of uint8 at storage 0
  tokenOfOwnerByIndex is array of uint256 at storage 1
  tokenByIndex is array of struct at storage 2
  stor3 is mapping of uint256 at storage 3
  stor5 is mapping of uint8 at storage 5
  name is array of uint256 at storage 6
  symbol is array of uint256 at storage 7
  stor8 is mapping of bool at storage 8
  stor11 is mapping of struct at storage 11
  approved is mapping of struct at storage 12

def supportsInterface(bytes4 interfaceId): # not payable
  require calldata.size - 4 >=′ 32
  require interfaceId == Mask(32, 224, interfaceId)
  return bool(stor0[Mask(32, 224, interfaceId)])

def name(): # not payable
  return name[0 len name.length]

def getApproved(uint256 tokenId): # not payable
  require calldata.size - 4 >=′ 32
  if not stor3[tokenId]:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC721: approved query for nonexistent token'
  return approved[tokenId].field_96

def totalSupply(): # not payable
  return tokenByIndex.length

def tokenOfOwnerByIndex(address owner, uint256 index): # not payable
  require calldata.size - 4 >=′ 64
  require owner == owner
  if index >= tokenOfOwnerByIndex[address(owner)]:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  34,
                  0xfe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64,
                  mem[198 len 30]
  return tokenOfOwnerByIndex[address(owner)][index]

def tokenByIndex(uint256 index): # not payable
  require calldata.size - 4 >=′ 32
  if index >= tokenByIndex.length:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  34,
                  0x6e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64,
                  mem[198 len 30]
  return tokenByIndex[index].field_0

def ownerOf(uint256 tokenId): # not payable
  require calldata.size - 4 >=′ 32
  if not stor3[tokenId]:
      revert with 0, 
                  32,
                  41,
                  0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                  mem[169 len 23],
                  mem[215 len 9]
  require stor3[tokenId] - 1 < tokenByIndex.length
  return tokenByIndex[stor3[tokenId] - 1].field_256

def balanceOf(address account): # not payable
  require calldata.size - 4 >=′ 32
  require account == account
  if not account:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  42,
                  0x6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573,
                  mem[206 len 22]
  return tokenOfOwnerByIndex[address(account)]

def symbol(): # not payable
  return symbol[0 len symbol.length]

def isApprovedForAll(address owner, address operator): # not payable
  require calldata.size - 4 >=′ 64
  require owner == owner
  require operator == operator
  return bool(stor5[address(owner)][address(operator)])

#
#  Regular functions
#

def _fallback(?) payable: # default function
  revert

def refundETH() payable: 
  if eth.balance(this.address):
      call caller with:
         value eth.balance(this.address) wei
           gas gas_remaining wei
      if not ext_call.success:
          revert with 0, 'STE'

def setApprovalForAll(address operator, bool approved): # not payable
  require calldata.size - 4 >=′ 64
  require operator == operator
  require approved == approved
  if operator == caller:
      revert with 0, 'ERC721: approve to caller'
  stor5[caller][address(operator)] = uint8(approved)
  log ApprovalForAll(
        address owner=approved,
        address operator=caller,
        bool approved=operator)

def selfPermit(address token, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) payable: 
  require calldata.size - 4 >=′ 192
  require token == token
  require v == v
  require ext_code.size(token)
  call token.permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) with:
       gas gas_remaining wei
      args 0, uint32(caller), this.address, value, deadline, v << 248, r, s
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def selfPermitAllowed(address token, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) payable: 
  require calldata.size - 4 >=′ 192
  require token == token
  require v == v
  require ext_code.size(token)
  call token.permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) with:
       gas gas_remaining wei
      args 0, uint32(caller), this.address, nonce, expiry, 1, v << 248, r, s
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unwrapWETH9(uint256 amountMinimum, address recipient) payable: 
  require calldata.size - 4 >=′ 64
  require recipient == recipient
  require ext_code.size(0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2)
  static call 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.balanceOf(address account) with:
          gas gas_remaining wei
         args this.address
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if ext_call.return_data[0] < amountMinimum:
      revert with 0, 'Insufficient WETH9'
  if ext_call.return_data[0]:
      require ext_code.size(0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2)
      call 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.withdraw(uint256 amount) with:
           gas gas_remaining wei
          args ext_call.return_data[0]
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      call recipient with:
         value ext_call.return_data[0] wei
           gas gas_remaining wei
      if not ext_call.success:
          revert with 0, 'STE'

def selfPermitIfNecessary(address token, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) payable: 
  require calldata.size - 4 >=′ 192
  require token == token
  require v == v
  require ext_code.size(token)
  static call token.allowance(address owner, address spender) with:
          gas gas_remaining wei
         args caller, this.address
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if ext_call.return_data[0] < value:
      require ext_code.size(token)
      call token.permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) with:
           gas gas_remaining wei
          args 0, uint32(caller), this.address, value, deadline, v << 248, r, s
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]

def selfPermitAllowedIfNecessary(address token, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) payable: 
  require calldata.size - 4 >=′ 192
  require token == token
  require v == v
  require ext_code.size(token)
  static call token.allowance(address owner, address spender) with:
          gas gas_remaining wei
         args caller, this.address
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if ext_call.return_data[0] < -1:
      require ext_code.size(token)
      call token.permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) with:
           gas gas_remaining wei
          args 0, uint32(caller), this.address, nonce, expiry, 1, v << 248, r, s
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]

def positions(uint256 _tokenId): # not payable
  require calldata.size - 4 >=′ 32
  if not approved[_tokenId].field_256:
      revert with 0, 'Invalid token ID'
  return approved[_tokenId].field_0, 
         approved[_tokenId].field_0,
         stor11[stor12[_tokenId].field_256].field_0,
         stor11[stor12[_tokenId].field_256].field_256,
         stor11[stor12[_tokenId].field_256].field_256,
         ('signextend', 2, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', '_tokenId'), ('name', 'approved', 12)))))))),
         ('signextend', 2, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', '_tokenId'), ('name', 'approved', 12)))))))),
         approved[_tokenId].field_256,
         approved[_tokenId].field_512,
         approved[_tokenId].field_768,
         approved[_tokenId].field_1024,
         approved[_tokenId].field_1152

def sweepToken(address token, uint256 amountMinimum, address recipient) payable: 
  require calldata.size - 4 >=′ 96
  require token == token
  require recipient == recipient
  require ext_code.size(token)
  static call token.balanceOf(address account) with:
          gas gas_remaining wei
         args this.address
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if ext_call.return_data[0] < amountMinimum:
      revert with 0, 'Insufficient token'
  if ext_call.return_data[0]:
      mem[196 len 64] = transfer(address recipient, uint256 amount), address(recipient) << 64, 0, ext_call.return_data[0 len 28]
      call token with:
           gas gas_remaining wei
          args Mask(480, -256, ext_call.return_data[0 len 28]) << 256, mem[260 len 4]
      if not return_data.size:
          if not ext_call.success:
              revert with 0, 'ST'
          if not transfer(address recipient, uint256 amount), address(recipient) << 64:
              revert with 0, 'ST'
      else:
          mem[228 len return_data.size] = ext_call.return_data[0 len return_data.size]
          if not ext_call.success:
              revert with 0, 'ST'
          if return_data.size:
              require return_data.size >= 32
              if not mem[228]:
                  revert with 0, 'ST'

def approve(address spender, uint256 amount): # not payable
  require calldata.size - 4 >=′ 64
  require spender == spender
  if not stor3[amount]:
      revert with 0, 
                  32,
                  41,
                  0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                  mem[169 len 23],
                  mem[215 len 9]
  require stor3[amount] - 1 < tokenByIndex.length
  if spender == tokenByIndex[stor3[amount] - 1].field_256:
      revert with 0, 32, 33, 0x6e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65, mem[293 len 31]
  if tokenByIndex[stor3[amount] - 1].field_256 != caller:
      if not stor5[stor2[stor3[amount] - 1].field_256][caller]:
          revert with 0, 
                      32,
                      56,
                      0x6e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c,
                      mem[316 len 8]
  approved[amount].field_96 = spender
  if not stor3[amount]:
      revert with 0, 
                  32,
                  41,
                  0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                  mem[265 len 23],
                  mem[311 len 9]
  require stor3[amount] - 1 < tokenByIndex.length
  log Approval(
        address owner=tokenByIndex[stor3[amount] - 1].field_256,
        address spender=spender,
        uint256 value=amount)

def createAndInitializePoolIfNecessary(address token0, address token1, uint24 fee, uint160 sqrtPriceX96) payable: 
  require calldata.size - 4 >=′ 128
  require token0 == token0
  require token1 == token1
  require fee == fee % unknown01000000()
  require sqrtPriceX96 == address(sqrtPriceX96)
  require token0 < token1
  require ext_code.size(0x1f98431c8ad98523631ae4a59f267346ea31f984)
  static call 0x1f98431c8ad98523631ae4a59f267346ea31f984.getPool(address , address , uint24 ) with:
          gas gas_remaining wei
         args address(token0), address(token1), fee % unknown01000000()
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if not ext_call.return_data[12 len 20]:
      require ext_code.size(0x1f98431c8ad98523631ae4a59f267346ea31f984)
      call 0x1f98431c8ad98523631ae4a59f267346ea31f984.createPool(address tokenA, address tokenB, uint24 fee) with:
           gas gas_remaining wei
          args address(token0), address(token1), fee % unknown01000000()
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(address(ext_call.return_data[0]))
      call address(ext_call.return_data[0]).initialize(uint160 sqrtPriceX96) with:
           gas gas_remaining wei
          args address(sqrtPriceX96)
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
  else:
      require ext_code.size(address(ext_call.return_data[0]))
      static call address(ext_call.return_data[0]).slot0() with:
              gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 224
      if not ext_call.return_data[12 len 20]:
          require ext_code.size(address(ext_call.return_data[0]))
          call address(ext_call.return_data[0]).initialize(uint160 sqrtPriceX96) with:
               gas gas_remaining wei
              args address(sqrtPriceX96)
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
  return address(ext_call.return_data[0])

def tokenURI(uint256 tokenId): # not payable
  require calldata.size - 4 >=′ 32
  mem[0] = tokenId
  mem[32] = 3
  require stor3[tokenId]
  mem[96] = 0xe9dc637500000000000000000000000000000000000000000000000000000000
  mem[100] = this.address
  mem[132] = tokenId
  require ext_code.size(0xee6a57ec80ea46401049e92587e52f5ec1c24785)
  static call 0xee6a57ec80ea46401049e92587e52f5ec1c24785.tokenURI(address creator, uint256 tokenId) with:
          gas gas_remaining wei
         args address(this.address), tokenId
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
  mem[64] = ceil32(return_data.size) + 96
  require return_data.size >=′ 32
  _5 = mem[96 len 4], address(this.address) << 64
  require mem[96 len 4], address(this.address) << 64 <= LOCK8605463013()
  require return_data.size + 96 >′ mem[96 len 4], address(this.address) << 64 + 127
  _6 = mem[mem[96 len 4], address(this.address) << 64 + 96]
  require mem[mem[96 len 4], address(this.address) << 64 + 96] <= LOCK8605463013()
  require ceil32(mem[mem[96 len 4], address(this.address) << 64 + 96]) + 32 >= 0 and ceil32(return_data.size) + ceil32(mem[mem[96 len 4], address(this.address) << 64 + 96]) + 128 <= LOCK8605463013()
  mem[64] = ceil32(return_data.size) + ceil32(mem[mem[96 len 4], address(this.address) << 64 + 96]) + 128
  mem[ceil32(return_data.size) + 96] = _6
  require _5 + _6 + 32 <= return_data.size
  mem[ceil32(return_data.size) + 128 len ceil32(_6)] = mem[_5 + 128 len ceil32(_6)]
  if ceil32(_6) <= _6:
      _20 = mem[64]
      mem[mem[64]] = 32
      mem[mem[64] + 32] = _6
      mem[mem[64] + 64 len ceil32(_6)] = mem[ceil32(return_data.size) + 128 len ceil32(_6)]
      if ceil32(_6) <= _6:
          return Array(len=_6, data=mem[mem[64] + 64 len ceil32(_6)])
      mem[_6 + mem[64] + 64] = 0
      return memory
        from mem[64]
         len ceil32(_6) + _20 + -mem[64] + 64
  mem[_6 + ceil32(return_data.size) + 128] = 0
  _21 = mem[64]
  mem[mem[64]] = 32
  mem[mem[64] + 32] = _6
  mem[mem[64] + 64 len ceil32(_6)] = mem[ceil32(return_data.size) + 128 len ceil32(_6)]
  if ceil32(_6) <= _6:
      return Array(len=_6, data=mem[mem[64] + 64 len ceil32(_6)])
  mem[_6 + mem[64] + 64] = 0
  return memory
    from mem[64]
     len ceil32(_6) + _21 + -mem[64] + 64

def permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) payable: 
  require calldata.size - 4 >=′ 192
  require spender == spender
  require v == v
  if block.timestamp > deadline:
      revert with 0, 'Permit expired'
  approved[tokenId].field_0 = Mask(96, 0, approved[tokenId].field_0 + 1)
  if not stor3[tokenId]:
      revert with 0, 
                  32,
                  41,
                  0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                  mem[651 len 23],
                  mem[697 len 9]
  require stor3[tokenId] - 1 < tokenByIndex.length
  if spender == tokenByIndex[stor3[tokenId] - 1].field_256:
      revert with 0, 32, 39, 0x724552433732315065726d69743a20617070726f76616c20746f2063757272656e74206f776e65, mem[781 len 25]
  if not ext_code.size(tokenByIndex[stor3[tokenId] - 1].field_256):
      signer = erecover(sha3(0, sha3(0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f, 0x193ae757ecb6ead396a72d38c6cc38e1be93297aa66ffefea29e32ce3045475f, 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6, chainid, this.address), sha3(0x49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad, address(spender), tokenId, approved[tokenId].field_0, deadline)), v << 248, r, s) # precompiled
      if not erecover.result:
          revert with ext_call.return_data[0 len return_data.size]
      if not address(signer):
          revert with 0, 'Invalid signature'
      if address(signer) != tokenByIndex[stor3[tokenId] - 1].field_256:
          revert with 0, 'Unauthorized'
      approved[tokenId].field_96 = spender
      if not stor3[tokenId]:
          revert with 0, 32, 41, 0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65, Mask(184, 0, r), 0
  else:
      require ext_code.size(tokenByIndex[stor3[tokenId] - 1].field_256)
      static call tokenByIndex[stor3[tokenId] - 1].field_256.isValidSignature(bytes32 , bytes ) with:
              gas gas_remaining wei
             args sha3(0, sha3(0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f, 0x193ae757ecb6ead396a72d38c6cc38e1be93297aa66ffefea29e32ce3045475f, 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6, chainid, this.address), sha3(0x49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad, address(spender), tokenId, approved[tokenId].field_0, deadline)), 64, 65, r, s, v, 0, Mask(216, 40, sha3(0, sha3(0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f, 0x193ae757ecb6ead396a72d38c6cc38e1be93297aa66ffefea29e32ce3045475f, 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6, chainid, this.address), sha3(0x49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad, address(spender), tokenId, approved[tokenId].field_0, deadline))) >> 40 >> 256, 0
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      if Mask(32, 224, ext_call.return_data[0]) != 0x1626ba7e00000000000000000000000000000000000000000000000000000000:
          revert with 0, 'Unauthorized'
      approved[tokenId].field_96 = spender
      if not stor3[tokenId]:
          revert with 0, 
                      'sERC721: owner query for nonexistent toke',
                      Mask(72, -256, 0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65, 0) << 256
  ('bool', ('stor', ('map', ('param', 'tokenId'), ('name', 'stor3', 3))))
  require stor3[tokenId] - 1 < tokenByIndex.length
  log Approval(
        address owner=tokenByIndex[stor3[tokenId] - 1].field_256,
        address spender=spender,
        uint256 value=tokenId)

def transferFrom(address sender, address recipient, uint256 amount): # not payable
  require calldata.size - 4 >=′ 96
  require sender == sender
  require recipient == recipient
  if not stor3[amount]:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  44,
                  0x6c4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                  mem[208 len 20]
  if not stor3[amount]:
      revert with 0, 
                  32,
                  41,
                  0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                  mem[169 len 23],
                  mem[215 len 9]
  require stor3[amount] - 1 < tokenByIndex.length
  if tokenByIndex[stor3[amount] - 1].field_256 != caller:
      if not stor3[amount]:
          revert with 0, 'ERC721: approved query for nonexistent token'
      if approved[amount].field_96 != caller:
          if not stor5[stor2[stor3[amount] - 1].field_256][caller]:
              revert with 0, 
                          32,
                          49,
                          0x724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665,
                          mem[309 len 15]
  if not stor3[amount]:
      revert with 0, 
                  32,
                  41,
                  0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                  mem[265 len 23],
                  mem[311 len 9]
  require stor3[amount] - 1 < tokenByIndex.length
  if tokenByIndex[stor3[amount] - 1].field_256 != sender:
      revert with 0, 32, 41, 0x734552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f77, mem[397 len 23]
  if not recipient:
      revert with 0, 32, 36, 0x724552433732313a207472616e7366657220746f20746865207a65726f20616464726573, mem[392 len 28]
  approved[amount].field_0 = approved[amount].field_0
  if not stor3[amount]:
      revert with 0, 
                  32,
                  41,
                  0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                  mem[361 len 23],
                  mem[407 len 9]
  require stor3[amount] - 1 < tokenByIndex.length
  log Approval(
        address owner=tokenByIndex[stor3[amount] - 1].field_256,
        address spender=0,
        uint256 value=amount)
  if tokenOfOwnerByIndex[address(sender)][1][amount]:
      require tokenOfOwnerByIndex[address(sender)] - 1 < tokenOfOwnerByIndex[address(sender)]
      require tokenOfOwnerByIndex[address(sender)][1][amount] - 1 < tokenOfOwnerByIndex[address(sender)]
      tokenOfOwnerByIndex[address(sender)][tokenOfOwnerByIndex[address(sender)][1][amount]] = tokenOfOwnerByIndex[address(sender)][tokenOfOwnerByIndex[address(sender)]]
      tokenOfOwnerByIndex[address(sender)][1][tokenOfOwnerByIndex[address(sender)][tokenOfOwnerByIndex[address(sender)]]] = tokenOfOwnerByIndex[address(sender)][1][amount]
      require tokenOfOwnerByIndex[address(sender)]
      tokenOfOwnerByIndex[address(sender)][tokenOfOwnerByIndex[address(sender)]] = 0
      tokenOfOwnerByIndex[address(sender)]--
      tokenOfOwnerByIndex[address(sender)][1][amount] = 0
  if not tokenOfOwnerByIndex[address(recipient)][1][amount]:
      tokenOfOwnerByIndex[address(recipient)]++
      tokenOfOwnerByIndex[address(recipient)][tokenOfOwnerByIndex[address(recipient)]] = amount
      tokenOfOwnerByIndex[address(recipient)][1][amount] = tokenOfOwnerByIndex[address(recipient)]
  if stor3[amount]:
      require stor3[amount] - 1 < tokenByIndex.length
      tokenByIndex[stor3[amount] - 1].field_256 = recipient
      tokenByIndex[stor3[amount] - 1].field_416 = 0
  else:
      tokenByIndex.length++
      tokenByIndex[tokenByIndex.length].field_0 = amount
      tokenByIndex[tokenByIndex.length].field_256 = recipient
      tokenByIndex[tokenByIndex.length].field_416 = 0
      stor3[amount] = tokenByIndex.length
  log Transfer(
        address from=sender,
        address to=recipient,
        uint256 value=amount)

def safeTransferFrom(address from, address to, uint256 tokenId): # not payable
  require calldata.size - 4 >=′ 96
  require from == from
  require to == to
  if not stor3[tokenId]:
      revert with 0, 32, 44, 0x6c4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b65, mem[240 len 20]
  if not stor3[tokenId]:
      revert with 0, 
                  32,
                  41,
                  0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                  mem[201 len 23],
                  mem[247 len 9]
  require stor3[tokenId] - 1 < tokenByIndex.length
  if tokenByIndex[stor3[tokenId] - 1].field_256 != caller:
      if not stor3[tokenId]:
          revert with 0, 'ERC721: approved query for nonexistent token'
      if approved[tokenId].field_96 != caller:
          if not stor5[stor2[stor3[tokenId] - 1].field_256][caller]:
              revert with 0, 
                          32,
                          49,
                          0x724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665,
                          mem[341 len 15]
  if not stor3[tokenId]:
      revert with 0, 
                  32,
                  41,
                  0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                  mem[297 len 23],
                  mem[343 len 9]
  require stor3[tokenId] - 1 < tokenByIndex.length
  if tokenByIndex[stor3[tokenId] - 1].field_256 != from:
      revert with 0, 32, 41, 0x734552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f77, mem[429 len 23]
  if not to:
      revert with 0, 32, 36, 0x724552433732313a207472616e7366657220746f20746865207a65726f20616464726573, mem[424 len 28]
  approved[tokenId].field_0 = approved[tokenId].field_0
  if not stor3[tokenId]:
      revert with 0, 
                  32,
                  41,
                  0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                  mem[393 len 23],
                  mem[439 len 9]
  require stor3[tokenId] - 1 < tokenByIndex.length
  log Approval(
        address owner=tokenByIndex[stor3[tokenId] - 1].field_256,
        address spender=0,
        uint256 value=tokenId)
  if tokenOfOwnerByIndex[address(from)][1][tokenId]:
      require tokenOfOwnerByIndex[address(from)] - 1 < tokenOfOwnerByIndex[address(from)]
      require tokenOfOwnerByIndex[address(from)][1][tokenId] - 1 < tokenOfOwnerByIndex[address(from)]
      tokenOfOwnerByIndex[address(from)][tokenOfOwnerByIndex[address(from)][1][tokenId]] = tokenOfOwnerByIndex[address(from)][tokenOfOwnerByIndex[address(from)]]
      tokenOfOwnerByIndex[address(from)][1][tokenOfOwnerByIndex[address(from)][tokenOfOwnerByIndex[address(from)]]] = tokenOfOwnerByIndex[address(from)][1][tokenId]
      require tokenOfOwnerByIndex[address(from)]
      tokenOfOwnerByIndex[address(from)][tokenOfOwnerByIndex[address(from)]] = 0
      tokenOfOwnerByIndex[address(from)]--
      tokenOfOwnerByIndex[address(from)][1][tokenId] = 0
  if not tokenOfOwnerByIndex[address(to)][1][tokenId]:
      tokenOfOwnerByIndex[address(to)]++
      tokenOfOwnerByIndex[address(to)][tokenOfOwnerByIndex[address(to)]] = tokenId
      tokenOfOwnerByIndex[address(to)][1][tokenId] = tokenOfOwnerByIndex[address(to)]
  if stor3[tokenId]:
      require stor3[tokenId] - 1 < tokenByIndex.length
      tokenByIndex[stor3[tokenId] - 1].field_256 = to
      tokenByIndex[stor3[tokenId] - 1].field_416 = 0
      log Transfer(
            address from=from,
            address to=to,
            uint256 value=tokenId)
      if not ext_code.size(to):
          stop
      if eth.balance(this.address) < 0:
          revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[814 len 26]
  else:
      tokenByIndex.length++
      tokenByIndex[tokenByIndex.length].field_0 = tokenId
      tokenByIndex[tokenByIndex.length].field_256 = to
      tokenByIndex[tokenByIndex.length].field_416 = 0
      stor3[tokenId] = tokenByIndex.length
      log Transfer(
            address from=from,
            address to=to,
            uint256 value=tokenId)
      if not ext_code.size(to):
          stop
      if eth.balance(this.address) < 0:
          revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[878 len 26]
  ('ge', ('balance', 'address'), 0)
  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)

def burn(uint256 _value) payable: 
  require calldata.size - 4 >=′ 32
  if not stor3[_value]:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  44,
                  0x6c4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                  mem[208 len 20]
  if not stor3[_value]:
      revert with 0, 
                  32,
                  41,
                  0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                  mem[169 len 23],
                  mem[215 len 9]
  require stor3[_value] - 1 < tokenByIndex.length
  if tokenByIndex[stor3[_value] - 1].field_256 != caller:
      if not stor3[_value]:
          revert with 0, 'ERC721: approved query for nonexistent token'
      if approved[_value].field_96 != caller:
          if not stor5[stor2[stor3[_value] - 1].field_256][caller]:
              revert with 0, 'Not approved'
  if approved[_value].field_384:
      revert with 0, 'Not cleared'
  if approved[_value].field_1024:
      revert with 0, 'Not cleared'
  if approved[_value].field_1152:
      revert with 0, 'Not cleared'
  approved[_value].field_0 = 0
  approved[_value].field_256 = 0
  approved[_value].field_512 = 0
  approved[_value].field_768 = 0
  approved[_value].field_1024 = 0
  if not stor3[_value]:
      revert with 0, 
                  32,
                  41,
                  0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                  mem[265 len 23],
                  mem[311 len 9]
  require stor3[_value] - 1 < tokenByIndex.length
  approved[_value].field_0 = approved[_value].field_0
  if not stor3[_value]:
      revert with 0, 
                  32,
                  41,
                  0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                  mem[361 len 23],
                  mem[407 len 9]
  require stor3[_value] - 1 < tokenByIndex.length
  log Approval(
        address owner=tokenByIndex[stor3[_value] - 1].field_256,
        address spender=0,
        uint256 value=_value)
  if Mask(255, 1, uint256(stor8[_value]) and (256 * not bool(stor8[_value])) - 1):
      uint256(stor8[_value]) = 0
      if 31 < stor8[_value].length:
          idx = 0
          while stor8[_value].length + 31 / 32 > idx:
              uint256(stor8[_value][idx]) = 0
              idx = idx + 1
              continue 
  if tokenOfOwnerByIndex[stor2[stor3[_value] - 1].field_256][1][_value]:
      require tokenOfOwnerByIndex[stor2[stor3[_value] - 1].field_256] - 1 < tokenOfOwnerByIndex[stor2[stor3[_value] - 1].field_256]
      require tokenOfOwnerByIndex[stor2[stor3[_value] - 1].field_256][1][_value] - 1 < tokenOfOwnerByIndex[stor2[stor3[_value] - 1].field_256]
      tokenOfOwnerByIndex[stor2[stor3[_value] - 1].field_256][tokenOfOwnerByIndex[stor2[stor3[_value] - 1].field_256][1][_value]] = tokenOfOwnerByIndex[stor2[stor3[_value] - 1].field_256][tokenOfOwnerByIndex[stor2[stor3[_value] - 1].field_256]]
      tokenOfOwnerByIndex[stor2[stor3[_value] - 1].field_256][1][tokenOfOwnerByIndex[stor2[stor3[_value] - 1].field_256][tokenOfOwnerByIndex[stor2[stor3[_value] - 1].field_256]]] = tokenOfOwnerByIndex[stor2[stor3[_value] - 1].field_256][1][_value]
      require tokenOfOwnerByIndex[stor2[stor3[_value] - 1].field_256]
      tokenOfOwnerByIndex[stor2[stor3[_value] - 1].field_256][tokenOfOwnerByIndex[stor2[stor3[_value] - 1].field_256]] = 0
      tokenOfOwnerByIndex[stor2[stor3[_value] - 1].field_256]--
      tokenOfOwnerByIndex[stor2[stor3[_value] - 1].field_256][1][_value] = 0
  if stor3[_value]:
      require tokenByIndex.length - 1 < tokenByIndex.length
      require stor3[_value] - 1 < tokenByIndex.length
      tokenByIndex[stor3[_value] - 1].field_0 = tokenByIndex[tokenByIndex.length - 1].field_0
      tokenByIndex[stor3[_value] - 1].field_256 = tokenByIndex[tokenByIndex.length - 1].field_256
      stor3[stor2[stor2.length - 1].field_0] = stor3[_value]
      require tokenByIndex.length
      tokenByIndex[tokenByIndex.length - 1].field_0 = 0
      tokenByIndex[tokenByIndex.length - 1].field_256 = 0
      tokenByIndex.length--
      stor3[_value] = 0
  log Transfer(
        address from=tokenByIndex[stor3[_value] - 1].field_256,
        address to=0,
        uint256 value=_value)

def safeTransferFrom(address from, address to, uint256 tokenId, bytes _data): # not payable
  require calldata.size - 4 >=′ 128
  require from == from
  require to == to
  require _data <= LOCK8605463013()
  require calldata.size >′ _data + 35
  require _data.length <= LOCK8605463013()
  require ceil32(_data.length) + 128 >= 96 and ceil32(_data.length) + 128 <= LOCK8605463013()
  require _data + _data.length + 36 <= calldata.size
  if not stor3[tokenId]:
      revert with 0, 
                  32,
                  44,
                  0x6c4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                  mem[ceil32(_data.length) + 240 len 20]
  if not stor3[tokenId]:
      revert with 0, 
                  32,
                  41,
                  0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                  mem[ceil32(_data.length) + 201 len 23],
                  mem[ceil32(_data.length) + 247 len 9]
  require stor3[tokenId] - 1 < tokenByIndex.length
  if tokenByIndex[stor3[tokenId] - 1].field_256 != caller:
      if not stor3[tokenId]:
          revert with 0, 'ERC721: approved query for nonexistent token'
      if approved[tokenId].field_96 != caller:
          if not stor5[stor2[stor3[tokenId] - 1].field_256][caller]:
              revert with 0, 
                          32,
                          49,
                          0x724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665,
                          mem[ceil32(_data.length) + 341 len 15]
  if not stor3[tokenId]:
      revert with 0, 
                  32,
                  41,
                  0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                  mem[ceil32(_data.length) + 297 len 23],
                  mem[ceil32(_data.length) + 343 len 9]
  require stor3[tokenId] - 1 < tokenByIndex.length
  if tokenByIndex[stor3[tokenId] - 1].field_256 != from:
      revert with 0, 
                  32,
                  41,
                  0x734552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f77,
                  mem[ceil32(_data.length) + 429 len 23]
  if not to:
      revert with 0, 
                  32,
                  36,
                  0x724552433732313a207472616e7366657220746f20746865207a65726f20616464726573,
                  mem[ceil32(_data.length) + 424 len 28]
  approved[tokenId].field_0 = approved[tokenId].field_0
  if not stor3[tokenId]:
      revert with 0, 
                  32,
                  41,
                  0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                  mem[ceil32(_data.length) + 393 len 23],
                  mem[ceil32(_data.length) + 439 len 9]
  require stor3[tokenId] - 1 < tokenByIndex.length
  log Approval(
        address owner=tokenByIndex[stor3[tokenId] - 1].field_256,
        address spender=0,
        uint256 value=tokenId)
  if tokenOfOwnerByIndex[address(from)][1][tokenId]:
      require tokenOfOwnerByIndex[address(from)] - 1 < tokenOfOwnerByIndex[address(from)]
      require tokenOfOwnerByIndex[address(from)][1][tokenId] - 1 < tokenOfOwnerByIndex[address(from)]
      tokenOfOwnerByIndex[address(from)][tokenOfOwnerByIndex[address(from)][1][tokenId]] = tokenOfOwnerByIndex[address(from)][tokenOfOwnerByIndex[address(from)]]
      tokenOfOwnerByIndex[address(from)][1][tokenOfOwnerByIndex[address(from)][tokenOfOwnerByIndex[address(from)]]] = tokenOfOwnerByIndex[address(from)][1][tokenId]
      require tokenOfOwnerByIndex[address(from)]
      tokenOfOwnerByIndex[address(from)][tokenOfOwnerByIndex[address(from)]] = 0
      tokenOfOwnerByIndex[address(from)]--
      tokenOfOwnerByIndex[address(from)][1][tokenId] = 0
  if not tokenOfOwnerByIndex[address(to)][1][tokenId]:
      tokenOfOwnerByIndex[address(to)]++
      tokenOfOwnerByIndex[address(to)][tokenOfOwnerByIndex[address(to)]] = tokenId
      tokenOfOwnerByIndex[address(to)][1][tokenId] = tokenOfOwnerByIndex[address(to)]
  if stor3[tokenId]:
      require stor3[tokenId] - 1 < tokenByIndex.length
      tokenByIndex[stor3[tokenId] - 1].field_256 = to
      tokenByIndex[stor3[tokenId] - 1].field_416 = 0
      log Transfer(
            address from=from,
            address to=to,
            uint256 value=tokenId)
      if not ext_code.size(to):
          stop
      if not _data.length % 32:
          if eth.balance(this.address) < 0:
              revert with 0, 
                          32,
                          38,
                          0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c,
                          mem[_data.length + ceil32(_data.length) + 814 len 26]
          if not ext_code.size(to):
              revert with 0, 'Address: call to non-contract'
      else:
          if eth.balance(this.address) < 0:
              revert with 0, 
                          32,
                          38,
                          0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c,
                          mem[floor32(_data.length) + ceil32(_data.length) + 846 len 26]
  else:
      tokenByIndex.length++
      tokenByIndex[tokenByIndex.length].field_0 = tokenId
      tokenByIndex[tokenByIndex.length].field_256 = to
      tokenByIndex[tokenByIndex.length].field_416 = 0
      stor3[tokenId] = tokenByIndex.length
      log Transfer(
            address from=from,
            address to=to,
            uint256 value=tokenId)
      if not ext_code.size(to):
          stop
      if not _data.length % 32:
          if eth.balance(this.address) < 0:
              revert with 0, 
                          32,
                          38,
                          0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c,
                          mem[_data.length + ceil32(_data.length) + 878 len 26]
          if not ext_code.size(to):
              revert with 0, 'Address: call to non-contract'
      else:
          if eth.balance(this.address) < 0:
              revert with 0, 
                          32,
                          38,
                          0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c,
                          mem[floor32(_data.length) + ceil32(_data.length) + 910 len 26]
  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)

def uniswapV3MintCallback(uint256 amount0, uint256 amount1, bytes data): # not payable
  require calldata.size - 4 >=′ 96
  require data <= LOCK8605463013()
  require data + 35 <′ calldata.size
  require data.length <= LOCK8605463013()
  require data + data.length + 36 <= calldata.size
  require data.length >=′ 128
  require data.length >=′ 96
  require bool(256 <= LOCK8605463013())
  require cd[(data + 36)] == address(cd[(data + 36)])
  require cd[(data + 68)] == address(cd[(data + 68)])
  require cd[(data + 100)] == cd[(data + 100)] % unknown01000000()
  require cd[(data + 132)] == address(cd[(data + 132)])
  require address(cd[(data + 36)]) < address(cd[(data + 68)])
  require address(sha3(0, 2276643401503442211, sha3(address(cd[(data + 36)]), address(cd[(data + 68)]), cd[(data + 100)] % unknown01000000()), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)) == caller
  if amount0:
      if address(cd[(data + 36)]) != 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2:
          if address(cd[(data + 132)]) != this.address:
              mem[633 len 96] = transferFrom(address sender, address recipient, uint256 amount), address(cd[(data + 132)]) << 64, 0, caller, Mask(224, 32, amount0) >> 32
              call address(cd[(data + 36)]) with:
                 funct uint32(caller)
                   gas gas_remaining wei
                  args Mask(224, 32, amount0) << 480, mem[729 len 4]
              if not return_data.size:
                  if not ext_call.success:
                      revert with 0, 'STF'
                  if not cd[(data + 132)]:
                      revert with 0, 'STF'
                  if not amount1:
                      stop
              else:
                  mem[665 len return_data.size] = ext_call.return_data[0 len return_data.size]
                  if not ext_call.success:
                      revert with 0, 'STF'
                  if not return_data.size:
                      if not amount1:
                          stop
                      if address(cd[(data + 68)]) == 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2:
                          if eth.balance(this.address) >= amount1:
                  else:
                      require return_data.size >= 32
                      if not mem[665]:
                          revert with 0, 'STF'
                      if not amount1:
                          stop
          else:
              mem[601 len 64] = transfer(address recipient, uint256 amount), caller, Mask(224, 32, amount0) >> 32
              call address(cd[(data + 36)]) with:
                 funct uint32(caller)
                   gas gas_remaining wei
                  args Mask(224, 32, amount0) << 224, mem[665 len 4]
              if not return_data.size:
                  if not ext_call.success:
                      revert with 0, 'ST'
                  if not cd[(data + 132)]:
                      revert with 0, 'ST'
                  if not amount1:
                      stop
              else:
                  mem[633 len return_data.size] = ext_call.return_data[0 len return_data.size]
                  if not ext_call.success:
                      revert with 0, 'ST'
                  if not return_data.size:
                      if not amount1:
                          stop
                      if address(cd[(data + 68)]) == 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2:
                  else:
                      require return_data.size >= 32
                      if not mem[633]:
                          revert with 0, 'ST'
                      if not amount1:
                          stop
          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
      if eth.balance(this.address) < amount0:
          if address(cd[(data + 132)]) != this.address:
              mem[633 len 96] = transferFrom(address sender, address recipient, uint256 amount), address(cd[(data + 132)]) << 64, 0, caller, Mask(224, 32, amount0) >> 32
              call address(cd[(data + 36)]) with:
                 funct uint32(caller)
                   gas gas_remaining wei
                  args Mask(224, 32, amount0) << 480, mem[729 len 4]
              if not return_data.size:
                  if not ext_call.success:
                      revert with 0, 'STF'
                  if not cd[(data + 132)]:
                      revert with 0, 'STF'
                  if not amount1:
                      stop
              else:
                  mem[665 len return_data.size] = ext_call.return_data[0 len return_data.size]
                  if not ext_call.success:
                      revert with 0, 'STF'
                  if not return_data.size:
                      if not amount1:
                          stop
                      if address(cd[(data + 68)]) == 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2:
                          if eth.balance(this.address) >= amount1:
                  else:
                      require return_data.size >= 32
                      if not mem[665]:
                          revert with 0, 'STF'
                      if not amount1:
                          stop
          else:
              mem[601 len 64] = transfer(address recipient, uint256 amount), caller, Mask(224, 32, amount0) >> 32
              call address(cd[(data + 36)]) with:
                 funct uint32(caller)
                   gas gas_remaining wei
                  args Mask(224, 32, amount0) << 224, mem[665 len 4]
              if not return_data.size:
                  if not ext_call.success:
                      revert with 0, 'ST'
                  if not cd[(data + 132)]:
                      revert with 0, 'ST'
                  if not amount1:
                      stop
              else:
                  mem[633 len return_data.size] = ext_call.return_data[0 len return_data.size]
                  if not ext_call.success:
                      revert with 0, 'ST'
                  if not return_data.size:
                      if not amount1:
                          stop
                      if address(cd[(data + 68)]) == 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2:
                  else:
                      require return_data.size >= 32
                      if not mem[633]:
                          revert with 0, 'ST'
                      if not amount1:
                          stop
          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
      require ext_code.size(0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2)
      call 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.deposit() with:
         value amount0 wei
           gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2)
      call 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.transfer(address recipient, uint256 amount) with:
           gas gas_remaining wei
          args caller, amount0
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
  if amount1:
      if address(cd[(data + 68)]) != 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2:
          if address(cd[(data + 132)]) != this.address:
              mem[633 len 96] = transferFrom(address sender, address recipient, uint256 amount), address(cd[(data + 132)]) << 64, 0, caller, Mask(224, 32, amount1) >> 32
              call address(cd[(data + 68)]) with:
                 funct uint32(caller)
                   gas gas_remaining wei
                  args Mask(224, 32, amount1) << 480, mem[729 len 4]
              if not return_data.size:
                  if not ext_call.success:
                      revert with 0, 'STF'
                  if not cd[(data + 132)]:
                      revert with 0, 'STF'
              else:
                  mem[665 len return_data.size] = ext_call.return_data[0 len return_data.size]
                  if not ext_call.success:
                      revert with 0, 'STF'
                  if return_data.size:
                      require return_data.size >= 32
                      if not mem[665]:
                          revert with 0, 'STF'
          else:
              mem[601 len 64] = transfer(address recipient, uint256 amount), caller, Mask(224, 32, amount1) >> 32
              call address(cd[(data + 68)]) with:
                 funct uint32(caller)
                   gas gas_remaining wei
                  args Mask(224, 32, amount1) << 224, mem[665 len 4]
              if not return_data.size:
                  if not ext_call.success:
                      revert with 0, 'ST'
                  if not cd[(data + 132)]:
                      revert with 0, 'ST'
              else:
                  mem[633 len return_data.size] = ext_call.return_data[0 len return_data.size]
                  if not ext_call.success:
                      revert with 0, 'ST'
                  if return_data.size:
                      require return_data.size >= 32
                      if not mem[633]:
                          revert with 0, 'ST'
      else:
          if eth.balance(this.address) >= amount1:
              require ext_code.size(0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2)
              call 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.deposit() with:
                 value amount1 wei
                   gas gas_remaining wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require ext_code.size(0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2)
              call 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.transfer(address recipient, uint256 amount) with:
                   gas gas_remaining wei
                  args caller, amount1
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >= 32
          else:
              if address(cd[(data + 132)]) != this.address:
                  mem[633 len 96] = transferFrom(address sender, address recipient, uint256 amount), address(cd[(data + 132)]) << 64, 0, caller, Mask(224, 32, amount1) >> 32
                  call address(cd[(data + 68)]) with:
                     funct uint32(caller)
                       gas gas_remaining wei
                      args Mask(224, 32, amount1) << 480, mem[729 len 4]
                  if not return_data.size:
                      if not ext_call.success:
                          revert with 0, 'STF'
                      if not cd[(data + 132)]:
                          revert with 0, 'STF'
                  else:
                      mem[665 len return_data.size] = ext_call.return_data[0 len return_data.size]
                      if not ext_call.success:
                          revert with 0, 'STF'
                      if return_data.size:
                          require return_data.size >= 32
                          if not mem[665]:
                              revert with 0, 'STF'
              else:
                  mem[601 len 64] = transfer(address recipient, uint256 amount), caller, Mask(224, 32, amount1) >> 32
                  call address(cd[(data + 68)]) with:
                     funct uint32(caller)
                       gas gas_remaining wei
                      args Mask(224, 32, amount1) << 224, mem[665 len 4]
                  if not return_data.size:
                      if not ext_call.success:
                          revert with 0, 'ST'
                      if not cd[(data + 132)]:
                          revert with 0, 'ST'
                  else:
                      mem[633 len return_data.size] = ext_call.return_data[0 len return_data.size]
                      if not ext_call.success:
                          revert with 0, 'ST'
                      if return_data.size:
                          require return_data.size >= 32
                          if not mem[633]:
                              revert with 0, 'ST'

def decreaseLiquidity(tuple params) payable: 
  require calldata.size - 4 >=′ 160
  if not stor3[params]:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  44,
                  0x6c4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                  mem[208 len 20]
  if not stor3[params]:
      revert with 0, 
                  32,
                  41,
                  0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                  mem[169 len 23],
                  mem[215 len 9]
  require stor3[params] - 1 < tokenByIndex.length
  if tokenByIndex[stor3[params] - 1].field_256 != caller:
      if not stor3[params]:
          revert with 0, 'ERC721: approved query for nonexistent token'
      if approved[params].field_96 != caller:
          if not stor5[stor2[stor3[params] - 1].field_256][caller]:
              revert with 0, 'Not approved'
  if block.timestamp > cd[132]:
      revert with 0, 'Transaction too old'
  require cd[36] == uint128(cd[36])
  require uint128(cd[36]) > 0
  require cd[36] == uint128(cd[36])
  require approved[params].field_384 >= uint128(cd[36])
  require stor11[stor12[params].field_256].field_0 < stor11[stor12[params].field_256].field_256
  require cd[36] == uint128(cd[36])
  mem[601] = uint128(cd[36])
  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).burn(int24 tickLower, int24 tickUpper, uint128 amount) with:
       gas gas_remaining wei
      args ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), uint128(cd[36])
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >=′ 64
  if ext_call.return_data[0] < cd[68]:
      revert with 0, 'Price slippage check'
  if ext_call.return_data[32] < cd[100]:
      revert with 0, 'Price slippage check'
  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
  static call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).positions(bytes32 ) with:
          gas gas_remaining wei
         args sha3(this.address, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232)
  mem[ceil32(return_data.size) + 591 len 160] = ext_call.return_data[0 len 160]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >=′ 160
  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
  require ext_call.return_data[96] == ext_call.return_data[112 len 16]
  require ext_call.return_data[128] == ext_call.return_data[144 len 16]
  if not mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)):
      approved[params].field_1024 = uint128(approved[params].field_1024 + ext_call.return_data[0] + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128))
  else:
      require unknown10000000() > mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384))
      approved[params].field_1024 = uint128(approved[params].field_1024 + ext_call.return_data[0] + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128))
  if not mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)):
      approved[params].field_1152 = uint128(approved[params].field_1152 + ext_call.return_data[32] + (Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) >> 128))
  else:
      require unknown10000000() > mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384))
      approved[params].field_1152 = uint128(approved[params].field_1152 + ext_call.return_data[32] + (Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128))
  approved[params].field_512 = ext_call.return_data[32]
  approved[params].field_768 = ext_call.return_data[64]
  require cd[36] == uint128(cd[36])
  approved[params].field_384 = uint128(approved[params].field_384 - cd[36])
  require cd[36] == uint128(cd[36])
  mem[(2 * ceil32(return_data.size)) + 591] = uint128(cd[36])
  mem[(2 * ceil32(return_data.size)) + 623] = ext_call.return_data[0]
  mem[(2 * ceil32(return_data.size)) + 655] = ext_call.return_data[32]
  log DecreaseLiquidity(uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1):
                        mem[(2 * ceil32(return_data.size)) + 591 len ceil32(return_data.size) + 96],
                        params,
  mem[(2 * ceil32(return_data.size)) + 591] = ext_call.return_data[0]
  mem[(2 * ceil32(return_data.size)) + 623] = ext_call.return_data[32]
  return memory
    from (2 * ceil32(return_data.size)) + 591
     len ceil32(return_data.size) + 64

def multicall(bytes[] data) payable: 
  require calldata.size - 4 >=′ 32
  require data <= LOCK8605463013()
  require data + 35 <′ calldata.size
  require data.length <= LOCK8605463013()
  require data + (32 * data.length) + 36 <= calldata.size
  require data.length <= LOCK8605463013()
  mem[96] = data.length
  mem[64] = (32 * data.length) + 128
  if not data.length:
      idx = 0
      while idx < data.length:
          require cd[(data + (32 * idx) + 36)] <′ calldata.size + -data - 67
          require cd[(data + cd[(data + (32 * idx) + 36)] + 36)] <= LOCK8605463013()
          require data + cd[(data + (32 * idx) + 36)] + 68 <=′ calldata.size - cd[(data + cd[(data + (32 * idx) + 36)] + 36)]
          mem[mem[64] len cd[(data + cd[(data + (32 * idx) + 36)] + 36)]] = call.data[data + cd[(data + (32 * idx) + 36)] + 68 len cd[(data + cd[(data + (32 * idx) + 36)] + 36)]]
          mem[cd[(data + cd[(data + (32 * idx) + 36)] + 36)] + mem[64]] = 0
          delegate this.address with:
               gas gas_remaining wei
              args call.data[data + cd[(data + (32 * idx) + 36)] + 68 len cd[(data + cd[(data + (32 * idx) + 36)] + 36)]]
          if not return_data.size:
              if delegate.return_code:
                  require idx < mem[96]
                  mem[(32 * idx) + 128] = 96
                  idx = idx + 1
                  continue 
              require mem[96] >= 68
              _109 = mem[100]
              require mem[100] >=′ 32
              _112 = mem[132]
              require mem[132] <= LOCK8605463013()
              require mem[100] + 132 >′ mem[132] + 163
              _120 = mem[mem[132] + 132]
              require mem[mem[132] + 132] <= LOCK8605463013()
              _126 = mem[64]
              require mem[64] + ceil32(mem[mem[132] + 132]) + 32 >= mem[64] and mem[64] + ceil32(mem[mem[132] + 132]) + 32 <= LOCK8605463013()
              mem[64] = mem[64] + ceil32(mem[mem[132] + 132]) + 32
              mem[_126] = mem[mem[132] + 132]
              require _112 + _120 + 164 <= _109 + 132
              idx = 0
              while idx < _120:
                  mem[idx + _126 + 32] = mem[idx + _112 + 164]
                  idx = idx + 32
                  continue 
              if ceil32(_120) <= _120:
                  _181 = mem[64]
                  mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                  mem[mem[64] + 4] = 32
                  _187 = mem[_126]
                  mem[mem[64] + 36] = mem[_126]
                  idx = 0
                  while idx < _187:
                      mem[idx + _181 + 68] = mem[idx + _126 + 32]
                      idx = idx + 32
                      continue 
                  if ceil32(_187) > _187:
                      mem[_187 + _181 + 68] = 0
                  revert with memory
                    from mem[64]
                     len ceil32(_187) + _181 + -mem[64] + 68
              mem[_120 + _126 + 32] = 0
              _182 = mem[64]
              mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
              mem[mem[64] + 4] = 32
              _188 = mem[_126]
              mem[mem[64] + 36] = mem[_126]
              idx = 0
              while idx < _188:
                  mem[idx + _182 + 68] = mem[idx + _126 + 32]
                  idx = idx + 32
                  continue 
              if ceil32(_188) > _188:
                  mem[_188 + _182 + 68] = 0
              revert with memory
                from mem[64]
                 len ceil32(_188) + _182 + -mem[64] + 68
          _101 = mem[64]
          mem[64] = mem[64] + ceil32(return_data.size) + 1
          mem[_101] = return_data.size
          mem[_101 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
          if delegate.return_code:
              require idx < mem[96]
              mem[(32 * idx) + 128] = _101
              idx = idx + 1
              continue 
          require return_data.size >= 68
          _110 = Mask(224, 0, return_data.size), mem[_101 + 32 len 4]
          require Mask(224, 0, return_data.size), mem[_101 + 32 len 4] >=′ 32
          _113 = mem[_101 + 36]
          require mem[_101 + 36] <= LOCK8605463013()
          require _101 + Mask(224, 0, return_data.size), mem[_101 + 32 len 4] + 36 >′ _101 + mem[_101 + 36] + 67
          _121 = mem[_101 + mem[_101 + 36] + 36]
          require mem[_101 + mem[_101 + 36] + 36] <= LOCK8605463013()
          _127 = mem[64]
          require mem[64] + ceil32(mem[_101 + mem[_101 + 36] + 36]) + 32 >= mem[64] and mem[64] + ceil32(mem[_101 + mem[_101 + 36] + 36]) + 32 <= LOCK8605463013()
          mem[64] = mem[64] + ceil32(mem[_101 + mem[_101 + 36] + 36]) + 32
          mem[_127] = _121
          require _113 + _121 + 68 <= _110 + 36
          idx = 0
          while idx < _121:
              mem[idx + _127 + 32] = mem[idx + _101 + _113 + 68]
              idx = idx + 32
              continue 
          if ceil32(_121) <= _121:
              _183 = mem[64]
              mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
              mem[mem[64] + 4] = 32
              mem[mem[64] + 36] = _121
              idx = 0
              while idx < _121:
                  mem[idx + _183 + 68] = mem[idx + _127 + 32]
                  idx = idx + 32
                  continue 
              if ceil32(_121) > _121:
                  mem[_121 + _183 + 68] = 0
              revert with memory
                from mem[64]
                 len ceil32(_121) + _183 + -mem[64] + 68
          mem[_121 + _127 + 32] = 0
          _184 = mem[64]
          mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
          mem[mem[64] + 4] = 32
          mem[mem[64] + 36] = _121
          idx = 0
          while idx < _121:
              mem[idx + _184 + 68] = mem[idx + _127 + 32]
              idx = idx + 32
              continue 
          if ceil32(_121) > _121:
              mem[_121 + _184 + 68] = 0
          revert with memory
            from mem[64]
             len ceil32(_121) + _184 + -mem[64] + 68
      _88 = mem[64]
      mem[mem[64]] = 32
      _89 = mem[96]
      mem[mem[64] + 32] = mem[96]
      s = 0
      t = 128
      u = mem[64] + 64
      v = mem[64] + (32 * mem[96]) + 64
      while s < _89:
          mem[u] = v + -_88 - 64
          _174 = mem[t]
          _178 = mem[mem[t]]
          mem[v] = mem[mem[t]]
          idx = 0
          while idx < _178:
              mem[idx + v + 32] = mem[idx + _174 + 32]
              idx = idx + 32
              continue 
          if ceil32(_178) > _178:
              mem[_178 + v + 32] = 0
          s = s + 1
          t = t + 32
          u = u + 32
          v = ceil32(_178) + v + 32
          continue 
  else:
      mem[128] = 96
      s = 128
      idx = data.length
      while idx - 1:
          mem[s + 32] = 96
          s = s + 32
          idx = idx - 1
          continue 
      idx = 0
      while idx < data.length:
          require cd[(data + (32 * idx) + 36)] <′ calldata.size + -data - 67
          require cd[(data + cd[(data + (32 * idx) + 36)] + 36)] <= LOCK8605463013()
          require data + cd[(data + (32 * idx) + 36)] + 68 <=′ calldata.size - cd[(data + cd[(data + (32 * idx) + 36)] + 36)]
          mem[mem[64] len cd[(data + cd[(data + (32 * idx) + 36)] + 36)]] = call.data[data + cd[(data + (32 * idx) + 36)] + 68 len cd[(data + cd[(data + (32 * idx) + 36)] + 36)]]
          mem[cd[(data + cd[(data + (32 * idx) + 36)] + 36)] + mem[64]] = 0
          delegate this.address with:
               gas gas_remaining wei
              args call.data[data + cd[(data + (32 * idx) + 36)] + 68 len cd[(data + cd[(data + (32 * idx) + 36)] + 36)]]
          if not return_data.size:
              if delegate.return_code:
                  require idx < mem[96]
                  mem[(32 * idx) + 128] = 96
                  idx = idx + 1
                  continue 
              require mem[96] >= 68
              _205 = mem[100]
              require mem[100] >=′ 32
              _215 = mem[132]
              require mem[132] <= LOCK8605463013()
              require mem[100] + 132 >′ mem[132] + 163
              _217 = mem[mem[132] + 132]
              require mem[mem[132] + 132] <= LOCK8605463013()
              _219 = mem[64]
              require mem[64] + ceil32(mem[mem[132] + 132]) + 32 >= mem[64] and mem[64] + ceil32(mem[mem[132] + 132]) + 32 <= LOCK8605463013()
              mem[64] = mem[64] + ceil32(mem[mem[132] + 132]) + 32
              mem[_219] = mem[mem[132] + 132]
              require _215 + _217 + 164 <= _205 + 132
              idx = 0
              while idx < _217:
                  mem[idx + _219 + 32] = mem[idx + _215 + 164]
                  idx = idx + 32
                  continue 
              if ceil32(_217) <= _217:
                  _253 = mem[64]
                  mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                  mem[mem[64] + 4] = 32
                  _266 = mem[_219]
                  mem[mem[64] + 36] = mem[_219]
                  idx = 0
                  while idx < _266:
                      mem[idx + _253 + 68] = mem[idx + _219 + 32]
                      idx = idx + 32
                      continue 
                  if ceil32(_266) > _266:
                      mem[_266 + _253 + 68] = 0
                  revert with memory
                    from mem[64]
                     len ceil32(_266) + _253 + -mem[64] + 68
              mem[_217 + _219 + 32] = 0
              _254 = mem[64]
              mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
              mem[mem[64] + 4] = 32
              _267 = mem[_219]
              mem[mem[64] + 36] = mem[_219]
              idx = 0
              while idx < _267:
                  mem[idx + _254 + 68] = mem[idx + _219 + 32]
                  idx = idx + 32
                  continue 
              if ceil32(_267) > _267:
                  mem[_267 + _254 + 68] = 0
              revert with memory
                from mem[64]
                 len ceil32(_267) + _254 + -mem[64] + 68
          _200 = mem[64]
          mem[64] = mem[64] + ceil32(return_data.size) + 1
          mem[_200] = return_data.size
          mem[_200 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
          if delegate.return_code:
              require idx < mem[96]
              mem[(32 * idx) + 128] = _200
              idx = idx + 1
              continue 
          require return_data.size >= 68
          _206 = Mask(224, 0, return_data.size), mem[_200 + 32 len 4]
          require Mask(224, 0, return_data.size), mem[_200 + 32 len 4] >=′ 32
          _216 = mem[_200 + 36]
          require mem[_200 + 36] <= LOCK8605463013()
          require _200 + Mask(224, 0, return_data.size), mem[_200 + 32 len 4] + 36 >′ _200 + mem[_200 + 36] + 67
          _218 = mem[_200 + mem[_200 + 36] + 36]
          require mem[_200 + mem[_200 + 36] + 36] <= LOCK8605463013()
          _220 = mem[64]
          require mem[64] + ceil32(mem[_200 + mem[_200 + 36] + 36]) + 32 >= mem[64] and mem[64] + ceil32(mem[_200 + mem[_200 + 36] + 36]) + 32 <= LOCK8605463013()
          mem[64] = mem[64] + ceil32(mem[_200 + mem[_200 + 36] + 36]) + 32
          mem[_220] = _218
          require _216 + _218 + 68 <= _206 + 36
          idx = 0
          while idx < _218:
              mem[idx + _220 + 32] = mem[idx + _200 + _216 + 68]
              idx = idx + 32
              continue 
          if ceil32(_218) <= _218:
              _255 = mem[64]
              mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
              mem[mem[64] + 4] = 32
              mem[mem[64] + 36] = _218
              idx = 0
              while idx < _218:
                  mem[idx + _255 + 68] = mem[idx + _220 + 32]
                  idx = idx + 32
                  continue 
              if ceil32(_218) > _218:
                  mem[_218 + _255 + 68] = 0
              revert with memory
                from mem[64]
                 len ceil32(_218) + _255 + -mem[64] + 68
          mem[_218 + _220 + 32] = 0
          _256 = mem[64]
          mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
          mem[mem[64] + 4] = 32
          mem[mem[64] + 36] = _218
          idx = 0
          while idx < _218:
              mem[idx + _256 + 68] = mem[idx + _220 + 32]
              idx = idx + 32
              continue 
          if ceil32(_218) > _218:
              mem[_218 + _256 + 68] = 0
          revert with memory
            from mem[64]
             len ceil32(_218) + _256 + -mem[64] + 68
      _179 = mem[64]
      mem[mem[64]] = 32
      _180 = mem[96]
      mem[mem[64] + 32] = mem[96]
      s = 0
      t = 128
      u = mem[64] + 64
      v = mem[64] + (32 * mem[96]) + 64
      while s < _180:
          mem[u] = v + -_179 - 64
          _248 = mem[t]
          _252 = mem[mem[t]]
          mem[v] = mem[mem[t]]
          idx = 0
          while idx < _252:
              mem[idx + v + 32] = mem[idx + _248 + 32]
              idx = idx + 32
              continue 
          if ceil32(_252) > _252:
              mem[_252 + v + 32] = 0
          s = s + 1
          t = t + 32
          u = u + 32
          v = ceil32(_252) + v + 32
          continue 
  return memory
    from mem[64]
     len v - mem[64]

def mint(tuple params) payable: 
  require calldata.size - 4 >=′ 352
  if block.timestamp > cd[324]:
      revert with 0, 'Transaction too old'
  require params == address(params)
  require cd[36] == address(cd[36])
  require cd[68] == cd[68] % unknown01000000()
  require cd[100] == ('signextend', 2, ('cd', 100))
  require cd[132] == ('signextend', 2, ('cd', 132))
  require address(params) < uint64(cd[36]) << 96
  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(params << 192, address(cd[36]), cd[68] % unknown01000000()), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
  static call address(sha3(0, 2276643401503442211, sha3(params << 192, address(cd[36]), cd[68] % unknown01000000()), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).slot0() with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >=′ 224
  require ext_call.return_data[0] == ext_call.return_data[12 len 20]
  require ext_call.return_data[32] == ('signextend', 2, ('ext_call.return_data', 32, 32))
  require ext_call.return_data[64] == ext_call.return_data[94 len 2]
  require ext_call.return_data[96] == ext_call.return_data[126 len 2]
  require ext_call.return_data[128] == ext_call.return_data[158 len 2]
  require ext_call.return_data[160] == ext_call.return_data[191 len 1]
  require ext_call.return_data[192] == bool(ext_call.return_data[192])
  if ('signextend', 2, ('signextend', 2, ('cd', 100))) <′ 0:
      if -('signextend', 2, ('signextend', 2, ('cd', 100))) > 887272:
          revert with 0, 'T'
      if Mask(1, 1, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
          if Mask(1, 2, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
              if Mask(1, 3, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                  if Mask(1, 4, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if not Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                  else:
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
              else:
                  if Mask(1, 4, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                  else:
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
          else:
              if Mask(1, 3, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                  if Mask(1, 4, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                  else:
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
              else:
                  if Mask(1, 4, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                  else:
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      else:
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                              if not Mask(1, 11, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
      else:
          if Mask(1, 2, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
              if Mask(1, 3, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                  if Mask(1, 4, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                  else:
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
              else:
                  if Mask(1, 4, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                  else:
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      else:
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                              if not Mask(1, 11, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
          else:
              if Mask(1, 3, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                  if Mask(1, 4, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                  else:
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      else:
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                              if not Mask(1, 11, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
              else:
                  if Mask(1, 4, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      else:
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                              if not Mask(1, 11, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                  else:
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      else:
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                              if not Mask(1, 11, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      else:
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                              if not Mask(1, 11, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      else:
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                              if not Mask(1, 11, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      else:
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                              if not Mask(1, 11, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if Mask(1, 9, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                              if not Mask(1, 11, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      else:
                                          if Mask(1, 10, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                              if not Mask(1, 11, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          else:
                                              if not Mask(1, 11, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                                  if not Mask(1, 12, -('signextend', 2, ('signextend', 2, ('cd', 100)))):
  else:
      if ('signextend', 2, ('signextend', 2, ('cd', 100))) > 887272:
          revert with 0, 'T'
      if Mask(1, 1, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
          if Mask(1, 2, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
              if Mask(1, 3, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                  if Mask(1, 4, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if not Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                  else:
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
              else:
                  if Mask(1, 4, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                  else:
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
          else:
              if Mask(1, 3, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                  if Mask(1, 4, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                  else:
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
              else:
                  if Mask(1, 4, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                  else:
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      else:
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                              if not Mask(1, 11, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
      else:
          if Mask(1, 2, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
              if Mask(1, 3, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                  if Mask(1, 4, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                  else:
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
              else:
                  if Mask(1, 4, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                  else:
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      else:
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                              if not Mask(1, 11, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
          else:
              if Mask(1, 3, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                  if Mask(1, 4, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                  else:
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      else:
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                              if not Mask(1, 11, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
              else:
                  if Mask(1, 4, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      else:
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                              if not Mask(1, 11, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                  else:
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      else:
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                              if not Mask(1, 11, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      else:
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                              if not Mask(1, 11, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      else:
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                              if not Mask(1, 11, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      if Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      else:
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                              if not Mask(1, 11, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                  else:
                                      if Mask(1, 9, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                              if not Mask(1, 11, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                      else:
                                          if Mask(1, 10, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                              if not Mask(1, 11, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                          else:
                                              if not Mask(1, 11, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
                                                  if not Mask(1, 12, ('signextend', 2, ('signextend', 2, ('cd', 100)))):
  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)

def increaseLiquidity(tuple params) payable: 
  require calldata.size - 4 >=′ 192
  if block.timestamp > cd[164]:
      revert with 0, 'Transaction too old'
  require stor11[stor12[params].field_256].field_0 < stor11[stor12[params].field_256].field_256
  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
  static call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).slot0() with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >=′ 224
  require ext_call.return_data[0] == ext_call.return_data[12 len 20]
  require ext_call.return_data[32] == ('signextend', 2, ('ext_call.return_data', 32, 32))
  require ext_call.return_data[64] == ext_call.return_data[94 len 2]
  require ext_call.return_data[96] == ext_call.return_data[126 len 2]
  require ext_call.return_data[128] == ext_call.return_data[158 len 2]
  require ext_call.return_data[160] == ext_call.return_data[191 len 1]
  require ext_call.return_data[192] == bool(ext_call.return_data[192])
  if ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) <′ 0:
      if -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) > 887272:
          revert with 0, 'T'
      if Mask(1, 1, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
          if Mask(1, 2, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
              if Mask(1, 3, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                  if Mask(1, 4, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if not Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                  else:
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
              else:
                  if Mask(1, 4, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                  else:
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
          else:
              if Mask(1, 3, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                  if Mask(1, 4, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                  else:
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
              else:
                  if Mask(1, 4, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                  else:
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      else:
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                              if not Mask(1, 11, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
      else:
          if Mask(1, 2, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
              if Mask(1, 3, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                  if Mask(1, 4, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                  else:
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
              else:
                  if Mask(1, 4, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                  else:
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      else:
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                              if not Mask(1, 11, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
          else:
              if Mask(1, 3, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                  if Mask(1, 4, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                  else:
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      else:
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                              if not Mask(1, 11, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
              else:
                  if Mask(1, 4, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      else:
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                              if not Mask(1, 11, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                  else:
                      if Mask(1, 5, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      else:
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                              if not Mask(1, 11, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      else:
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                              if not Mask(1, 11, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      else:
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                              if not Mask(1, 11, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      else:
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                              if not Mask(1, 11, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if Mask(1, 9, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                              if not Mask(1, 11, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      else:
                                          if Mask(1, 10, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                              if not Mask(1, 11, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          else:
                                              if not Mask(1, 11, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                                  if not Mask(1, 12, -('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
  else:
      if ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) > 887272:
          revert with 0, 'T'
      if Mask(1, 1, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
          if Mask(1, 2, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
              if Mask(1, 3, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                  if Mask(1, 4, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if not Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                  else:
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
              else:
                  if Mask(1, 4, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                  else:
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
          else:
              if Mask(1, 3, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                  if Mask(1, 4, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                  else:
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
              else:
                  if Mask(1, 4, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                  else:
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      else:
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                              if not Mask(1, 11, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
      else:
          if Mask(1, 2, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
              if Mask(1, 3, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                  if Mask(1, 4, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                  else:
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
              else:
                  if Mask(1, 4, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                  else:
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      else:
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                              if not Mask(1, 11, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
          else:
              if Mask(1, 3, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                  if Mask(1, 4, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if not Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                  else:
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      else:
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                              if not Mask(1, 11, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
              else:
                  if Mask(1, 4, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      else:
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                              if not Mask(1, 11, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                  else:
                      if Mask(1, 5, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if not Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      else:
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                              if not Mask(1, 11, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                      else:
                          if Mask(1, 6, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      else:
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                              if not Mask(1, 11, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                          else:
                              if Mask(1, 7, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if not Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      else:
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                              if not Mask(1, 11, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                              else:
                                  if Mask(1, 8, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      if Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      else:
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                              if not Mask(1, 11, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                  else:
                                      if Mask(1, 9, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          if not Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                              if not Mask(1, 11, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                      else:
                                          if Mask(1, 10, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                              if not Mask(1, 11, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                          else:
                                              if not Mask(1, 11, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
                                                  if not Mask(1, 12, ('signextend', 2, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))))):
  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)

def collect(tuple params) payable: 
  require calldata.size - 4 >=′ 128
  if not stor3[params]:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  44,
                  0x6c4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                  mem[208 len 20]
  if stor3[params]:
      require stor3[params] - 1 < tokenByIndex.length
      if tokenByIndex[stor3[params] - 1].field_256 != caller:
          if not stor3[params]:
              revert with 0, 'ERC721: approved query for nonexistent token'
          if approved[params].field_96 != caller:
              if not stor5[stor2[stor3[params] - 1].field_256][caller]:
                  revert with 0, 'Not approved'
              require cd[68] == uint128(cd[68])
              if uint128(cd[68]) > 0:
                  require cd[36] == address(cd[36])
                  if address(cd[36]):
                      require cd[36] == address(cd[36])
                      require stor11[stor12[params].field_256].field_0 < stor11[stor12[params].field_256].field_256
                      if not approved[params].field_384:
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) > approved[params].field_1024:
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) > approved[params].field_1152:
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(cd[36]), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), approved[params].field_1024, approved[params].field_1152
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = 0
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(cd[36]),
                                        address recipient=approved[params].field_1024,
                                        uint256 amount0=approved[params].field_1152,
                                        uint256 amount1=params)
                              else:
                                  require cd[100] == uint128(cd[100])
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(cd[36]), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), approved[params].field_1024, uint128(cd[100])
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = 0
                                  approved[params].field_1152 = uint128(approved[params].field_1152 - cd[100])
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(cd[36]),
                                        address recipient=approved[params].field_1024,
                                        uint256 amount0=uint128(cd[100]),
                                        uint256 amount1=params)
                          else:
                              require cd[68] == uint128(cd[68])
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) > approved[params].field_1152:
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(cd[36]), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), cd[68] << 128, approved[params].field_1152
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = uint128(approved[params].field_1024 - cd[68])
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(cd[36]),
                                        address recipient=cd[68] << 128,
                                        uint256 amount0=approved[params].field_1152,
                                        uint256 amount1=params)
                              else:
                                  require cd[100] == uint128(cd[100])
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(cd[36]), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), cd[68] << 128, uint128(cd[100])
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = uint128(approved[params].field_1024 - cd[68])
                                  approved[params].field_1152 = uint128(approved[params].field_1152 - cd[100])
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(cd[36]),
                                        address recipient=cd[68] << 128,
                                        uint256 amount0=uint128(cd[100]),
                                        uint256 amount1=params)
                          return ext_call.return_data[0] << 128, uint128(ext_call.return_data[32])
                      require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                      call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).burn(int24 tickLower, int24 tickUpper, uint128 amount) with:
                           gas gas_remaining wei
                          args ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), 0
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=′ 64
                      require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                      static call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).positions(bytes32 ) with:
                              gas gas_remaining wei
                             args sha3(this.address, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232)
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=′ 160
                      require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                      require ext_call.return_data[96] == ext_call.return_data[112 len 16]
                      require ext_call.return_data[128] == ext_call.return_data[144 len 16]
                      if not mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)):
                          if not mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)):
                              approved[params].field_512 = ext_call.return_data[32]
                              approved[params].field_768 = ext_call.return_data[64]
                              require cd[68] == uint128(cd[68])
                              if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128)):
                          else:
                              require unknown10000000() > mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384))
                              approved[params].field_512 = ext_call.return_data[32]
                              approved[params].field_768 = ext_call.return_data[64]
                              require cd[68] == uint128(cd[68])
                              if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128)):
                                  require cd[68] == uint128(cd[68])
                      else:
                          require unknown10000000() > mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384))
                          if not mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)):
                              approved[params].field_512 = ext_call.return_data[32]
                              approved[params].field_768 = ext_call.return_data[64]
                              require cd[68] == uint128(cd[68])
                              if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128)):
                                  require cd[68] == uint128(cd[68])
                          else:
                              require unknown10000000() > mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384))
                              approved[params].field_512 = ext_call.return_data[32]
                              approved[params].field_768 = ext_call.return_data[64]
                              require cd[68] == uint128(cd[68])
                              if uint128(cd[68]) > uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128)):
                                  require cd[100] == uint128(cd[100])
                              else:
                                  require cd[68] == uint128(cd[68])
                  else:
                      require stor11[stor12[params].field_256].field_0 < stor11[stor12[params].field_256].field_256
                      if not approved[params].field_384:
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) > approved[params].field_1024:
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) > approved[params].field_1152:
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(this.address), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), approved[params].field_1024, approved[params].field_1152
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = 0
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(this.address),
                                        address recipient=approved[params].field_1024,
                                        uint256 amount0=approved[params].field_1152,
                                        uint256 amount1=params)
                              else:
                                  require cd[100] == uint128(cd[100])
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(this.address), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), approved[params].field_1024, uint128(cd[100])
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = 0
                                  approved[params].field_1152 = uint128(approved[params].field_1152 - cd[100])
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(this.address),
                                        address recipient=approved[params].field_1024,
                                        uint256 amount0=uint128(cd[100]),
                                        uint256 amount1=params)
                          else:
                              require cd[68] == uint128(cd[68])
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) > approved[params].field_1152:
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(this.address), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), cd[68] << 128, approved[params].field_1152
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = uint128(approved[params].field_1024 - cd[68])
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(this.address),
                                        address recipient=cd[68] << 128,
                                        uint256 amount0=approved[params].field_1152,
                                        uint256 amount1=params)
                              else:
                                  require cd[100] == uint128(cd[100])
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(this.address), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), cd[68] << 128, uint128(cd[100])
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = uint128(approved[params].field_1024 - cd[68])
                                  approved[params].field_1152 = uint128(approved[params].field_1152 - cd[100])
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(this.address),
                                        address recipient=cd[68] << 128,
                                        uint256 amount0=uint128(cd[100]),
                                        uint256 amount1=params)
                          return ext_call.return_data[0] << 128, uint128(ext_call.return_data[32])
                      require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                      call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).burn(int24 tickLower, int24 tickUpper, uint128 amount) with:
                           gas gas_remaining wei
                          args ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), 0
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=′ 64
                      require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                      static call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).positions(bytes32 ) with:
                              gas gas_remaining wei
                             args sha3(this.address, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232)
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=′ 160
                      require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                      require ext_call.return_data[96] == ext_call.return_data[112 len 16]
                      require ext_call.return_data[128] == ext_call.return_data[144 len 16]
                      if not mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)):
                          if not mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)):
                              approved[params].field_512 = ext_call.return_data[32]
                              approved[params].field_768 = ext_call.return_data[64]
                              require cd[68] == uint128(cd[68])
                              if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128)):
                                  require cd[68] == uint128(cd[68])
                              else:
                                  require cd[100] == uint128(cd[100])
                          else:
                              require unknown10000000() > mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384))
                              approved[params].field_512 = ext_call.return_data[32]
                              approved[params].field_768 = ext_call.return_data[64]
                              require cd[68] == uint128(cd[68])
                              if uint128(cd[68]) > uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128)):
                                  require cd[100] == uint128(cd[100])
                              else:
                                  require cd[68] == uint128(cd[68])
                      else:
                          require unknown10000000() > mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384))
                          if not mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)):
                              approved[params].field_512 = ext_call.return_data[32]
                              approved[params].field_768 = ext_call.return_data[64]
                              require cd[68] == uint128(cd[68])
                              if uint128(cd[68]) > uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128)):
                                  require cd[100] == uint128(cd[100])
                              else:
                                  require cd[68] == uint128(cd[68])
                          else:
                              require unknown10000000() > mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384))
                              approved[params].field_512 = ext_call.return_data[32]
                              approved[params].field_768 = ext_call.return_data[64]
                              require cd[68] == uint128(cd[68])
                              if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128)):
                                  require cd[68] == uint128(cd[68])
                                  require cd[100] == uint128(cd[100])
                              else:
                                  require cd[100] == uint128(cd[100])
                                  if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152):
              else:
                  require cd[100] == uint128(cd[100])
                  require uint128(cd[100]) > 0
                  require cd[36] == address(cd[36])
                  if address(cd[36]):
                      require cd[36] == address(cd[36])
                      require stor11[stor12[params].field_256].field_0 < stor11[stor12[params].field_256].field_256
                      if not approved[params].field_384:
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) <= approved[params].field_1024:
                              require cd[68] == uint128(cd[68])
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) <= approved[params].field_1152:
                                  require cd[100] == uint128(cd[100])
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(cd[36]), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), cd[68] << 128, uint128(cd[100])
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                              call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                   gas gas_remaining wei
                                  args address(cd[36]), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), cd[68] << 128, approved[params].field_1152
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=′ 64
                              require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                              require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                              approved[params].field_1024 = uint128(approved[params].field_1024 - cd[68])
                              approved[params].field_1152 = 0
                              log Collect(
                                    uint256 tokenId=address(cd[36]),
                                    address recipient=cd[68] << 128,
                                    uint256 amount0=approved[params].field_1152,
                                    uint256 amount1=params)
                          else:
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) > approved[params].field_1152:
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(cd[36]), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), approved[params].field_1024, approved[params].field_1152
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = 0
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(cd[36]),
                                        address recipient=approved[params].field_1024,
                                        uint256 amount0=approved[params].field_1152,
                                        uint256 amount1=params)
                              else:
                                  require cd[100] == uint128(cd[100])
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(cd[36]), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), approved[params].field_1024, uint128(cd[100])
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = 0
                                  approved[params].field_1152 = uint128(approved[params].field_1152 - cd[100])
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(cd[36]),
                                        address recipient=approved[params].field_1024,
                                        uint256 amount0=uint128(cd[100]),
                                        uint256 amount1=params)
                          return ext_call.return_data[0] << 128, uint128(ext_call.return_data[32])
                      require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                      call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).burn(int24 tickLower, int24 tickUpper, uint128 amount) with:
                           gas gas_remaining wei
                          args ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), 0
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=′ 64
                      require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                      static call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).positions(bytes32 ) with:
                              gas gas_remaining wei
                             args sha3(this.address, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232)
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=′ 160
                      require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                      require ext_call.return_data[96] == ext_call.return_data[112 len 16]
                      require ext_call.return_data[128] == ext_call.return_data[144 len 16]
                      if not mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)):
                          if not mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)):
                              approved[params].field_512 = ext_call.return_data[32]
                              approved[params].field_768 = ext_call.return_data[64]
                          else:
                              require unknown10000000() > mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384))
                              approved[params].field_512 = ext_call.return_data[32]
                              approved[params].field_768 = ext_call.return_data[64]
                              require cd[68] == uint128(cd[68])
                      else:
                          require unknown10000000() > mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384))
                          if mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)):
                              require unknown10000000() > mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384))
                          approved[params].field_512 = ext_call.return_data[32]
                          approved[params].field_768 = ext_call.return_data[64]
                          require cd[68] == uint128(cd[68])
                  else:
                      require stor11[stor12[params].field_256].field_0 < stor11[stor12[params].field_256].field_256
                      if not approved[params].field_384:
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) > approved[params].field_1024:
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) > approved[params].field_1152:
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(this.address), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), approved[params].field_1024, approved[params].field_1152
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = 0
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(this.address),
                                        address recipient=approved[params].field_1024,
                                        uint256 amount0=approved[params].field_1152,
                                        uint256 amount1=params)
                              else:
                                  require cd[100] == uint128(cd[100])
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(this.address), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), approved[params].field_1024, uint128(cd[100])
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = 0
                                  approved[params].field_1152 = uint128(approved[params].field_1152 - cd[100])
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(this.address),
                                        address recipient=approved[params].field_1024,
                                        uint256 amount0=uint128(cd[100]),
                                        uint256 amount1=params)
                          else:
                              require cd[68] == uint128(cd[68])
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) > approved[params].field_1152:
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(this.address), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), cd[68] << 128, approved[params].field_1152
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = uint128(approved[params].field_1024 - cd[68])
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(this.address),
                                        address recipient=cd[68] << 128,
                                        uint256 amount0=approved[params].field_1152,
                                        uint256 amount1=params)
                              else:
                                  require cd[100] == uint128(cd[100])
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(this.address), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), cd[68] << 128, uint128(cd[100])
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = uint128(approved[params].field_1024 - cd[68])
                                  approved[params].field_1152 = uint128(approved[params].field_1152 - cd[100])
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(this.address),
                                        address recipient=cd[68] << 128,
                                        uint256 amount0=uint128(cd[100]),
                                        uint256 amount1=params)
                          return ext_call.return_data[0] << 128, uint128(ext_call.return_data[32])
                      require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                      call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).burn(int24 tickLower, int24 tickUpper, uint128 amount) with:
                           gas gas_remaining wei
                          args ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), 0
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=′ 64
                      require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                      static call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).positions(bytes32 ) with:
                              gas gas_remaining wei
                             args sha3(this.address, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232)
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=′ 160
                      require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                      require ext_call.return_data[96] == ext_call.return_data[112 len 16]
                      require ext_call.return_data[128] == ext_call.return_data[144 len 16]
                      if not mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)):
                          if not mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)):
                              approved[params].field_512 = ext_call.return_data[32]
                              approved[params].field_768 = ext_call.return_data[64]
                              require cd[68] == uint128(cd[68])
                          else:
                              require unknown10000000() > mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384))
                              approved[params].field_512 = ext_call.return_data[32]
                              approved[params].field_768 = ext_call.return_data[64]
                              require cd[68] == uint128(cd[68])
                              if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128)):
                      else:
                          require unknown10000000() > mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384))
                          if not mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)):
                              approved[params].field_512 = ext_call.return_data[32]
                              approved[params].field_768 = ext_call.return_data[64]
                              require cd[68] == uint128(cd[68])
                              if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128)):
                          else:
                              require unknown10000000() > mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384))
                              approved[params].field_512 = ext_call.return_data[32]
                              approved[params].field_768 = ext_call.return_data[64]
                              require cd[68] == uint128(cd[68])
                              if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128)):
                                  require cd[68] == uint128(cd[68])
          else:
              require cd[68] == uint128(cd[68])
              if uint128(cd[68]) <= 0:
                  require cd[100] == uint128(cd[100])
                  require uint128(cd[100]) > 0
                  require cd[36] == address(cd[36])
                  if not address(cd[36]):
                      require stor11[stor12[params].field_256].field_0 < stor11[stor12[params].field_256].field_256
                      if not approved[params].field_384:
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) > approved[params].field_1024:
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) > approved[params].field_1152:
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(this.address), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), approved[params].field_1024, approved[params].field_1152
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = 0
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(this.address),
                                        address recipient=approved[params].field_1024,
                                        uint256 amount0=approved[params].field_1152,
                                        uint256 amount1=params)
                              else:
                                  require cd[100] == uint128(cd[100])
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(this.address), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), approved[params].field_1024, uint128(cd[100])
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = 0
                                  approved[params].field_1152 = uint128(approved[params].field_1152 - cd[100])
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(this.address),
                                        address recipient=approved[params].field_1024,
                                        uint256 amount0=uint128(cd[100]),
                                        uint256 amount1=params)
                          else:
                              require cd[68] == uint128(cd[68])
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) > approved[params].field_1152:
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(this.address), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), cd[68] << 128, approved[params].field_1152
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = uint128(approved[params].field_1024 - cd[68])
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(this.address),
                                        address recipient=cd[68] << 128,
                                        uint256 amount0=approved[params].field_1152,
                                        uint256 amount1=params)
                              else:
                                  require cd[100] == uint128(cd[100])
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(this.address), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), cd[68] << 128, uint128(cd[100])
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = uint128(approved[params].field_1024 - cd[68])
                                  approved[params].field_1152 = uint128(approved[params].field_1152 - cd[100])
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(this.address),
                                        address recipient=cd[68] << 128,
                                        uint256 amount0=uint128(cd[100]),
                                        uint256 amount1=params)
                          return ext_call.return_data[0] << 128, uint128(ext_call.return_data[32])
                      require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                      call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).burn(int24 tickLower, int24 tickUpper, uint128 amount) with:
                           gas gas_remaining wei
                          args ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), 0
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=′ 64
                      require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                      static call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).positions(bytes32 ) with:
                              gas gas_remaining wei
                             args sha3(this.address, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232)
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=′ 160
                      require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                      require ext_call.return_data[96] == ext_call.return_data[112 len 16]
                      require ext_call.return_data[128] == ext_call.return_data[144 len 16]
                      if not mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)):
                          if not mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)):
                              approved[params].field_512 = ext_call.return_data[32]
                              approved[params].field_768 = ext_call.return_data[64]
                              require cd[68] == uint128(cd[68])
                              if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128)):
                                  require cd[68] == uint128(cd[68])
                          else:
                              require unknown10000000() > mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384))
                              approved[params].field_512 = ext_call.return_data[32]
                              approved[params].field_768 = ext_call.return_data[64]
                              require cd[68] == uint128(cd[68])
                              if uint128(cd[68]) > uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128)):
                                  require cd[100] == uint128(cd[100])
                              else:
                                  require cd[68] == uint128(cd[68])
                      else:
                          require unknown10000000() > mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384))
                          if mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)):
                              require unknown10000000() > mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384))
                          approved[params].field_512 = ext_call.return_data[32]
                          approved[params].field_768 = ext_call.return_data[64]
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) > uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128)):
                              require cd[100] == uint128(cd[100])
                          else:
                              require cd[68] == uint128(cd[68])
                  else:
                      require cd[36] == address(cd[36])
                      require stor11[stor12[params].field_256].field_0 < stor11[stor12[params].field_256].field_256
                      if not approved[params].field_384:
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) > approved[params].field_1024:
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) > approved[params].field_1152:
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(cd[36]), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), approved[params].field_1024, approved[params].field_1152
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = 0
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(cd[36]),
                                        address recipient=approved[params].field_1024,
                                        uint256 amount0=approved[params].field_1152,
                                        uint256 amount1=params)
                              else:
                                  require cd[100] == uint128(cd[100])
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(cd[36]), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), approved[params].field_1024, uint128(cd[100])
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = 0
                                  approved[params].field_1152 = uint128(approved[params].field_1152 - cd[100])
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(cd[36]),
                                        address recipient=approved[params].field_1024,
                                        uint256 amount0=uint128(cd[100]),
                                        uint256 amount1=params)
                              return ext_call.return_data[0] << 128, uint128(ext_call.return_data[32])
                          require cd[68] == uint128(cd[68])
                          require cd[100] == uint128(cd[100])
                          if uint128(cd[100]) > approved[params].field_1152:
                              require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                              call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                   gas gas_remaining wei
                                  args address(cd[36]), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), cd[68] << 128, approved[params].field_1152
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=′ 64
                              require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                              require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                              approved[params].field_1024 = uint128(approved[params].field_1024 - cd[68])
                              approved[params].field_1152 = 0
                              log Collect(
                                    uint256 tokenId=address(cd[36]),
                                    address recipient=cd[68] << 128,
                                    uint256 amount0=approved[params].field_1152,
                                    uint256 amount1=params)
                              return ext_call.return_data[0] << 128, uint128(ext_call.return_data[32])
                          require cd[100] == uint128(cd[100])
                          require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                          call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                               gas gas_remaining wei
                              args address(cd[36]), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), cd[68] << 128, uint128(cd[100])
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=′ 64
                          require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                          require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                          approved[params].field_1024 = uint128(approved[params].field_1024 - cd[68])
                          approved[params].field_1152 = uint128(approved[params].field_1152 - cd[100])
                          approved[params].field_1152 = 0
                      else:
                          require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                          call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).burn(int24 tickLower, int24 tickUpper, uint128 amount) with:
                               gas gas_remaining wei
                              args ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), 0
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=′ 64
                          require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                          static call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).positions(bytes32 ) with:
                                  gas gas_remaining wei
                                 args sha3(this.address, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232)
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >=′ 160
                          require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                          require ext_call.return_data[96] == ext_call.return_data[112 len 16]
                          require ext_call.return_data[128] == ext_call.return_data[144 len 16]
                          if mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)):
                              require unknown10000000() > mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384))
                          if mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)):
                              require unknown10000000() > mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384))
                          approved[params].field_512 = ext_call.return_data[32]
                          approved[params].field_768 = ext_call.return_data[64]
                          require cd[68] == uint128(cd[68])
              else:
                  require cd[36] == address(cd[36])
                  if address(cd[36]):
                      require cd[36] == address(cd[36])
                      require stor11[stor12[params].field_256].field_0 < stor11[stor12[params].field_256].field_256
                      if not approved[params].field_384:
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) > approved[params].field_1024:
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) > approved[params].field_1152:
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(cd[36]), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), approved[params].field_1024, approved[params].field_1152
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = 0
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(cd[36]),
                                        address recipient=approved[params].field_1024,
                                        uint256 amount0=approved[params].field_1152,
                                        uint256 amount1=params)
                              else:
                                  require cd[100] == uint128(cd[100])
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(cd[36]), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), approved[params].field_1024, uint128(cd[100])
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = 0
                                  approved[params].field_1152 = uint128(approved[params].field_1152 - cd[100])
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(cd[36]),
                                        address recipient=approved[params].field_1024,
                                        uint256 amount0=uint128(cd[100]),
                                        uint256 amount1=params)
                          else:
                              require cd[68] == uint128(cd[68])
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) > approved[params].field_1152:
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(cd[36]), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), cd[68] << 128, approved[params].field_1152
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = uint128(approved[params].field_1024 - cd[68])
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(cd[36]),
                                        address recipient=cd[68] << 128,
                                        uint256 amount0=approved[params].field_1152,
                                        uint256 amount1=params)
                              else:
                                  require cd[100] == uint128(cd[100])
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(cd[36]), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), cd[68] << 128, uint128(cd[100])
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = uint128(approved[params].field_1024 - cd[68])
                                  approved[params].field_1152 = uint128(approved[params].field_1152 - cd[100])
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(cd[36]),
                                        address recipient=cd[68] << 128,
                                        uint256 amount0=uint128(cd[100]),
                                        uint256 amount1=params)
                          return ext_call.return_data[0] << 128, uint128(ext_call.return_data[32])
                      require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                      call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).burn(int24 tickLower, int24 tickUpper, uint128 amount) with:
                           gas gas_remaining wei
                          args ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), 0
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=′ 64
                      require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                      static call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).positions(bytes32 ) with:
                              gas gas_remaining wei
                             args sha3(this.address, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232)
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=′ 160
                      require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                      require ext_call.return_data[96] == ext_call.return_data[112 len 16]
                      require ext_call.return_data[128] == ext_call.return_data[144 len 16]
                      if not mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)):
                          if mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)):
                              require unknown10000000() > mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384))
                          approved[params].field_512 = ext_call.return_data[32]
                          approved[params].field_768 = ext_call.return_data[64]
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) > uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128)):
                              require cd[100] == uint128(cd[100])
                          else:
                              require cd[68] == uint128(cd[68])
                      else:
                          require unknown10000000() > mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384))
                          if not mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)):
                              approved[params].field_512 = ext_call.return_data[32]
                              approved[params].field_768 = ext_call.return_data[64]
                              require cd[68] == uint128(cd[68])
                              if uint128(cd[68]) > uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128)):
                                  require cd[100] == uint128(cd[100])
                              else:
                                  require cd[68] == uint128(cd[68])
                          else:
                              require unknown10000000() > mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384))
                              approved[params].field_512 = ext_call.return_data[32]
                              approved[params].field_768 = ext_call.return_data[64]
                              require cd[68] == uint128(cd[68])
                              if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128)):
                                  require cd[68] == uint128(cd[68])
                              else:
                                  require cd[100] == uint128(cd[100])
                  else:
                      require stor11[stor12[params].field_256].field_0 < stor11[stor12[params].field_256].field_256
                      if not approved[params].field_384:
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) > approved[params].field_1024:
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) > approved[params].field_1152:
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(this.address), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), approved[params].field_1024, approved[params].field_1152
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = 0
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(this.address),
                                        address recipient=approved[params].field_1024,
                                        uint256 amount0=approved[params].field_1152,
                                        uint256 amount1=params)
                              else:
                                  require cd[100] == uint128(cd[100])
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(this.address), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), approved[params].field_1024, uint128(cd[100])
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = 0
                                  approved[params].field_1152 = uint128(approved[params].field_1152 - cd[100])
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(this.address),
                                        address recipient=approved[params].field_1024,
                                        uint256 amount0=uint128(cd[100]),
                                        uint256 amount1=params)
                          else:
                              require cd[68] == uint128(cd[68])
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) > approved[params].field_1152:
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(this.address), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), cd[68] << 128, approved[params].field_1152
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = uint128(approved[params].field_1024 - cd[68])
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(this.address),
                                        address recipient=cd[68] << 128,
                                        uint256 amount0=approved[params].field_1152,
                                        uint256 amount1=params)
                              else:
                                  require cd[100] == uint128(cd[100])
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args address(this.address), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), cd[68] << 128, uint128(cd[100])
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = uint128(approved[params].field_1024 - cd[68])
                                  approved[params].field_1152 = uint128(approved[params].field_1152 - cd[100])
                                  approved[params].field_1152 = 0
                                  log Collect(
                                        uint256 tokenId=address(this.address),
                                        address recipient=cd[68] << 128,
                                        uint256 amount0=uint128(cd[100]),
                                        uint256 amount1=params)
                          return ext_call.return_data[0] << 128, uint128(ext_call.return_data[32])
                      mem[601] = 0
                      require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                      call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).burn(int24 tickLower, int24 tickUpper, uint128 amount) with:
                           gas gas_remaining wei
                          args ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), 0
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=′ 64
                      require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                      static call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).positions(bytes32 ) with:
                              gas gas_remaining wei
                             args sha3(this.address, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232)
                      mem[ceil32(return_data.size) + 591 len 160] = ext_call.return_data[0 len 160]
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >=′ 160
                      require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                      require ext_call.return_data[96] == ext_call.return_data[112 len 16]
                      require ext_call.return_data[128] == ext_call.return_data[144 len 16]
                      if not mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)):
                          if not mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)):
                              approved[params].field_512 = ext_call.return_data[32]
                              approved[params].field_768 = ext_call.return_data[64]
                              require cd[68] == uint128(cd[68])
                              if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128)):
                                  require cd[68] == uint128(cd[68])
                                  require cd[100] == uint128(cd[100])
                              else:
                                  require cd[100] == uint128(cd[100])
                                  if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) >> 128) + approved[params].field_1152):
                          else:
                              require unknown10000000() > mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384))
                              approved[params].field_512 = ext_call.return_data[32]
                              approved[params].field_768 = ext_call.return_data[64]
                              require cd[68] == uint128(cd[68])
                              if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128)):
                                  require cd[68] == uint128(cd[68])
                                  require cd[100] == uint128(cd[100])
                              else:
                                  require cd[100] == uint128(cd[100])
                                  if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152):
                                      require cd[100] == uint128(cd[100])
                                  else:
                                      mem[(2 * ceil32(return_data.size)) + 595] = this.address
                                      mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                      mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                      mem[(2 * ceil32(return_data.size)) + 691] = uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128))
                                      mem[(2 * ceil32(return_data.size)) + 723] = uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152)
                                      require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                      call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                           gas gas_remaining wei
                                          args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                      else:
                          require unknown10000000() > mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384))
                          if not mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)):
                              approved[params].field_512 = ext_call.return_data[32]
                              approved[params].field_768 = ext_call.return_data[64]
                              require cd[68] == uint128(cd[68])
                              if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128)):
                                  require cd[68] == uint128(cd[68])
                                  require cd[100] == uint128(cd[100])
                              else:
                                  require cd[100] == uint128(cd[100])
                                  if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) >> 128) + approved[params].field_1152):
                                      require cd[100] == uint128(cd[100])
                                  else:
                                      mem[(2 * ceil32(return_data.size)) + 595] = this.address
                                      mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                      mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                      mem[(2 * ceil32(return_data.size)) + 691] = uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128))
                                      mem[(2 * ceil32(return_data.size)) + 723] = uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) >> 128) + approved[params].field_1152)
                                      require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                      call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                           gas gas_remaining wei
                                          args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                          else:
                              require unknown10000000() > mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384))
                              approved[params].field_512 = ext_call.return_data[32]
                              approved[params].field_768 = ext_call.return_data[64]
                              require cd[68] == uint128(cd[68])
                              if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128)):
                                  require cd[68] == uint128(cd[68])
                                  require cd[100] == uint128(cd[100])
                              else:
                                  require cd[100] == uint128(cd[100])
                                  if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152):
                                      require cd[100] == uint128(cd[100])
                                  else:
                                      mem[(2 * ceil32(return_data.size)) + 595] = this.address
                                      mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                      mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                      mem[(2 * ceil32(return_data.size)) + 691] = uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128))
                                      mem[(2 * ceil32(return_data.size)) + 723] = uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152)
                                      require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                      call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                           gas gas_remaining wei
                                          args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
      else:
          require cd[68] == uint128(cd[68])
          if uint128(cd[68]) <= 0:
              require cd[100] == uint128(cd[100])
              require uint128(cd[100]) > 0
              require cd[36] == address(cd[36])
              if address(cd[36]):
                  require cd[36] == address(cd[36])
                  require stor11[stor12[params].field_256].field_0 < stor11[stor12[params].field_256].field_256
                  if not approved[params].field_384:
                      require cd[68] == uint128(cd[68])
                      if uint128(cd[68]) > approved[params].field_1024:
                          require cd[100] == uint128(cd[100])
                          if uint128(cd[100]) > approved[params].field_1152:
                              require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                              call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                   gas gas_remaining wei
                                  args address(cd[36]), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), approved[params].field_1024, approved[params].field_1152
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=′ 64
                              require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                              require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                              approved[params].field_1024 = 0
                              approved[params].field_1152 = 0
                              log Collect(
                                    uint256 tokenId=address(cd[36]),
                                    address recipient=approved[params].field_1024,
                                    uint256 amount0=approved[params].field_1152,
                                    uint256 amount1=params)
                          else:
                              require cd[100] == uint128(cd[100])
                              require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                              call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                   gas gas_remaining wei
                                  args address(cd[36]), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), approved[params].field_1024, uint128(cd[100])
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=′ 64
                              require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                              require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                              approved[params].field_1024 = 0
                              approved[params].field_1152 = uint128(approved[params].field_1152 - cd[100])
                              approved[params].field_1152 = 0
                              log Collect(
                                    uint256 tokenId=address(cd[36]),
                                    address recipient=approved[params].field_1024,
                                    uint256 amount0=uint128(cd[100]),
                                    uint256 amount1=params)
                      else:
                          require cd[68] == uint128(cd[68])
                          require cd[100] == uint128(cd[100])
                          if uint128(cd[100]) > approved[params].field_1152:
                              require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                              call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                   gas gas_remaining wei
                                  args address(cd[36]), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), cd[68] << 128, approved[params].field_1152
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=′ 64
                              require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                              require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                              approved[params].field_1024 = uint128(approved[params].field_1024 - cd[68])
                              approved[params].field_1152 = 0
                              log Collect(
                                    uint256 tokenId=address(cd[36]),
                                    address recipient=cd[68] << 128,
                                    uint256 amount0=approved[params].field_1152,
                                    uint256 amount1=params)
                          else:
                              require cd[100] == uint128(cd[100])
                              require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                              call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                   gas gas_remaining wei
                                  args address(cd[36]), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), cd[68] << 128, uint128(cd[100])
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=′ 64
                              require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                              require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                              approved[params].field_1024 = uint128(approved[params].field_1024 - cd[68])
                              approved[params].field_1152 = uint128(approved[params].field_1152 - cd[100])
                              approved[params].field_1152 = 0
                              log Collect(
                                    uint256 tokenId=address(cd[36]),
                                    address recipient=cd[68] << 128,
                                    uint256 amount0=uint128(cd[100]),
                                    uint256 amount1=params)
                      return ext_call.return_data[0] << 128, uint128(ext_call.return_data[32])
                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).burn(int24 tickLower, int24 tickUpper, uint128 amount) with:
                       gas gas_remaining wei
                      args ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), 0
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=′ 64
                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                  static call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).positions(bytes32 ) with:
                          gas gas_remaining wei
                         args sha3(this.address, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232)
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=′ 160
                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                  require ext_call.return_data[96] == ext_call.return_data[112 len 16]
                  require ext_call.return_data[128] == ext_call.return_data[144 len 16]
                  if not mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)):
                      if not mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)):
                          approved[params].field_512 = ext_call.return_data[32]
                          approved[params].field_768 = ext_call.return_data[64]
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128)):
                              require cd[68] == uint128(cd[68])
                          else:
                              require cd[100] == uint128(cd[100])
                      else:
                          require unknown10000000() > mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384))
                          approved[params].field_512 = ext_call.return_data[32]
                          approved[params].field_768 = ext_call.return_data[64]
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) > uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128)):
                              require cd[100] == uint128(cd[100])
                          else:
                              require cd[68] == uint128(cd[68])
                  else:
                      require unknown10000000() > mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384))
                      if not mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)):
                          approved[params].field_512 = ext_call.return_data[32]
                          approved[params].field_768 = ext_call.return_data[64]
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) > uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128)):
                              require cd[100] == uint128(cd[100])
                          else:
                              require cd[68] == uint128(cd[68])
                      else:
                          require unknown10000000() > mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384))
                          approved[params].field_512 = ext_call.return_data[32]
                          approved[params].field_768 = ext_call.return_data[64]
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128)):
                              require cd[68] == uint128(cd[68])
                              require cd[100] == uint128(cd[100])
                          else:
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152):
              else:
                  require stor11[stor12[params].field_256].field_0 < stor11[stor12[params].field_256].field_256
                  if not approved[params].field_384:
                      require cd[68] == uint128(cd[68])
                      if uint128(cd[68]) > approved[params].field_1024:
                          require cd[100] == uint128(cd[100])
                          if uint128(cd[100]) > approved[params].field_1152:
                              require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                              call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                   gas gas_remaining wei
                                  args address(this.address), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), approved[params].field_1024, approved[params].field_1152
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=′ 64
                              require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                              require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                              approved[params].field_1024 = 0
                              approved[params].field_1152 = 0
                              log Collect(
                                    uint256 tokenId=address(this.address),
                                    address recipient=approved[params].field_1024,
                                    uint256 amount0=approved[params].field_1152,
                                    uint256 amount1=params)
                          else:
                              require cd[100] == uint128(cd[100])
                              require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                              call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                   gas gas_remaining wei
                                  args address(this.address), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), approved[params].field_1024, uint128(cd[100])
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=′ 64
                              require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                              require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                              approved[params].field_1024 = 0
                              approved[params].field_1152 = uint128(approved[params].field_1152 - cd[100])
                              approved[params].field_1152 = 0
                              log Collect(
                                    uint256 tokenId=address(this.address),
                                    address recipient=approved[params].field_1024,
                                    uint256 amount0=uint128(cd[100]),
                                    uint256 amount1=params)
                      else:
                          require cd[68] == uint128(cd[68])
                          require cd[100] == uint128(cd[100])
                          if uint128(cd[100]) > approved[params].field_1152:
                              require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                              call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                   gas gas_remaining wei
                                  args address(this.address), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), cd[68] << 128, approved[params].field_1152
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=′ 64
                              require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                              require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                              approved[params].field_1024 = uint128(approved[params].field_1024 - cd[68])
                              approved[params].field_1152 = 0
                              log Collect(
                                    uint256 tokenId=address(this.address),
                                    address recipient=cd[68] << 128,
                                    uint256 amount0=approved[params].field_1152,
                                    uint256 amount1=params)
                          else:
                              require cd[100] == uint128(cd[100])
                              require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                              call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                   gas gas_remaining wei
                                  args address(this.address), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), cd[68] << 128, uint128(cd[100])
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=′ 64
                              require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                              require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                              approved[params].field_1024 = uint128(approved[params].field_1024 - cd[68])
                              approved[params].field_1152 = uint128(approved[params].field_1152 - cd[100])
                              approved[params].field_1152 = 0
                              log Collect(
                                    uint256 tokenId=address(this.address),
                                    address recipient=cd[68] << 128,
                                    uint256 amount0=uint128(cd[100]),
                                    uint256 amount1=params)
                      return ext_call.return_data[0] << 128, uint128(ext_call.return_data[32])
                  mem[601] = 0
                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).burn(int24 tickLower, int24 tickUpper, uint128 amount) with:
                       gas gas_remaining wei
                      args ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), 0
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=′ 64
                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                  static call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).positions(bytes32 ) with:
                          gas gas_remaining wei
                         args sha3(this.address, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232)
                  mem[ceil32(return_data.size) + 591 len 160] = ext_call.return_data[0 len 160]
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=′ 160
                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                  require ext_call.return_data[96] == ext_call.return_data[112 len 16]
                  require ext_call.return_data[128] == ext_call.return_data[144 len 16]
                  if not mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)):
                      if not mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)):
                          approved[params].field_512 = ext_call.return_data[32]
                          approved[params].field_768 = ext_call.return_data[64]
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128)):
                              require cd[68] == uint128(cd[68])
                              require cd[100] == uint128(cd[100])
                          else:
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) >> 128) + approved[params].field_1152):
                                  require cd[100] == uint128(cd[100])
                              else:
                                  mem[(2 * ceil32(return_data.size)) + 595] = this.address
                                  mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 691] = uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128))
                                  mem[(2 * ceil32(return_data.size)) + 723] = uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) >> 128) + approved[params].field_1152)
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                      else:
                          require unknown10000000() > mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384))
                          approved[params].field_512 = ext_call.return_data[32]
                          approved[params].field_768 = ext_call.return_data[64]
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128)):
                              require cd[68] == uint128(cd[68])
                              require cd[100] == uint128(cd[100])
                          else:
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152):
                                  require cd[100] == uint128(cd[100])
                              else:
                                  mem[(2 * ceil32(return_data.size)) + 595] = this.address
                                  mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 691] = uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128))
                                  mem[(2 * ceil32(return_data.size)) + 723] = uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152)
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                  else:
                      require unknown10000000() > mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384))
                      if not mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)):
                          approved[params].field_512 = ext_call.return_data[32]
                          approved[params].field_768 = ext_call.return_data[64]
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128)):
                              require cd[68] == uint128(cd[68])
                              require cd[100] == uint128(cd[100])
                          else:
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) >> 128) + approved[params].field_1152):
                                  require cd[100] == uint128(cd[100])
                              else:
                                  mem[(2 * ceil32(return_data.size)) + 595] = this.address
                                  mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 691] = uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128))
                                  mem[(2 * ceil32(return_data.size)) + 723] = uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) >> 128) + approved[params].field_1152)
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                      else:
                          require unknown10000000() > mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384))
                          approved[params].field_512 = ext_call.return_data[32]
                          approved[params].field_768 = ext_call.return_data[64]
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128)):
                              require cd[68] == uint128(cd[68])
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152):
                          else:
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152):
                                  require cd[100] == uint128(cd[100])
                              else:
                                  mem[(2 * ceil32(return_data.size)) + 595] = this.address
                                  mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 691] = uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128))
                                  mem[(2 * ceil32(return_data.size)) + 723] = uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152)
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
          else:
              require cd[36] == address(cd[36])
              if address(cd[36]):
                  require cd[36] == address(cd[36])
                  require stor11[stor12[params].field_256].field_0 < stor11[stor12[params].field_256].field_256
                  if not approved[params].field_384:
                      require cd[68] == uint128(cd[68])
                      if uint128(cd[68]) > approved[params].field_1024:
                          require cd[100] == uint128(cd[100])
                          if uint128(cd[100]) > approved[params].field_1152:
                              require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                              call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                   gas gas_remaining wei
                                  args address(cd[36]), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), approved[params].field_1024, approved[params].field_1152
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=′ 64
                              require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                              require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                              approved[params].field_1024 = 0
                              approved[params].field_1152 = 0
                              log Collect(
                                    uint256 tokenId=address(cd[36]),
                                    address recipient=approved[params].field_1024,
                                    uint256 amount0=approved[params].field_1152,
                                    uint256 amount1=params)
                          else:
                              require cd[100] == uint128(cd[100])
                              require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                              call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                   gas gas_remaining wei
                                  args address(cd[36]), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), approved[params].field_1024, uint128(cd[100])
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=′ 64
                              require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                              require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                              approved[params].field_1024 = 0
                              approved[params].field_1152 = uint128(approved[params].field_1152 - cd[100])
                              approved[params].field_1152 = 0
                              log Collect(
                                    uint256 tokenId=address(cd[36]),
                                    address recipient=approved[params].field_1024,
                                    uint256 amount0=uint128(cd[100]),
                                    uint256 amount1=params)
                      else:
                          require cd[68] == uint128(cd[68])
                          require cd[100] == uint128(cd[100])
                          if uint128(cd[100]) > approved[params].field_1152:
                              require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                              call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                   gas gas_remaining wei
                                  args address(cd[36]), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), cd[68] << 128, approved[params].field_1152
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=′ 64
                              require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                              require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                              approved[params].field_1024 = uint128(approved[params].field_1024 - cd[68])
                              approved[params].field_1152 = 0
                              log Collect(
                                    uint256 tokenId=address(cd[36]),
                                    address recipient=cd[68] << 128,
                                    uint256 amount0=approved[params].field_1152,
                                    uint256 amount1=params)
                          else:
                              require cd[100] == uint128(cd[100])
                              require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                              call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                   gas gas_remaining wei
                                  args address(cd[36]), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), cd[68] << 128, uint128(cd[100])
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=′ 64
                              require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                              require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                              approved[params].field_1024 = uint128(approved[params].field_1024 - cd[68])
                              approved[params].field_1152 = uint128(approved[params].field_1152 - cd[100])
                              approved[params].field_1152 = 0
                              log Collect(
                                    uint256 tokenId=address(cd[36]),
                                    address recipient=cd[68] << 128,
                                    uint256 amount0=uint128(cd[100]),
                                    uint256 amount1=params)
                      return ext_call.return_data[0] << 128, uint128(ext_call.return_data[32])
                  mem[601] = 0
                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).burn(int24 tickLower, int24 tickUpper, uint128 amount) with:
                       gas gas_remaining wei
                      args ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), 0
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=′ 64
                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                  static call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).positions(bytes32 ) with:
                          gas gas_remaining wei
                         args sha3(this.address, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232)
                  mem[ceil32(return_data.size) + 591 len 160] = ext_call.return_data[0 len 160]
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=′ 160
                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                  require ext_call.return_data[96] == ext_call.return_data[112 len 16]
                  require ext_call.return_data[128] == ext_call.return_data[144 len 16]
                  if not mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)):
                      if not mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)):
                          approved[params].field_512 = ext_call.return_data[32]
                          approved[params].field_768 = ext_call.return_data[64]
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128)):
                              require cd[68] == uint128(cd[68])
                              require cd[100] == uint128(cd[100])
                          else:
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) >> 128) + approved[params].field_1152):
                                  require cd[100] == uint128(cd[100])
                              else:
                                  mem[(2 * ceil32(return_data.size)) + 595] = address(cd[36])
                                  mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 691] = uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128))
                                  mem[(2 * ceil32(return_data.size)) + 723] = uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) >> 128) + approved[params].field_1152)
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                      else:
                          require unknown10000000() > mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384))
                          approved[params].field_512 = ext_call.return_data[32]
                          approved[params].field_768 = ext_call.return_data[64]
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128)):
                              require cd[68] == uint128(cd[68])
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152):
                          else:
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152):
                                  require cd[100] == uint128(cd[100])
                              else:
                                  mem[(2 * ceil32(return_data.size)) + 595] = address(cd[36])
                                  mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 691] = uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128))
                                  mem[(2 * ceil32(return_data.size)) + 723] = uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152)
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                  else:
                      require unknown10000000() > mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384))
                      if not mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)):
                          approved[params].field_512 = ext_call.return_data[32]
                          approved[params].field_768 = ext_call.return_data[64]
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128)):
                              require cd[68] == uint128(cd[68])
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) >> 128) + approved[params].field_1152):
                          else:
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) >> 128) + approved[params].field_1152):
                                  require cd[100] == uint128(cd[100])
                              else:
                                  mem[(2 * ceil32(return_data.size)) + 595] = address(cd[36])
                                  mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 691] = uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128))
                                  mem[(2 * ceil32(return_data.size)) + 723] = uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) >> 128) + approved[params].field_1152)
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                      else:
                          require unknown10000000() > mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384))
                          approved[params].field_512 = ext_call.return_data[32]
                          approved[params].field_768 = ext_call.return_data[64]
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128)):
                              require cd[68] == uint128(cd[68])
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152):
                                  require cd[100] == uint128(cd[100])
                              else:
                                  mem[(2 * ceil32(return_data.size)) + 595] = address(cd[36])
                                  mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 691] = uint128(cd[68])
                                  mem[(2 * ceil32(return_data.size)) + 723] = uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152)
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                          else:
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152):
                                  require cd[100] == uint128(cd[100])
                                  mem[(2 * ceil32(return_data.size)) + 595] = address(cd[36])
                                  mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 691] = uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128))
                                  mem[(2 * ceil32(return_data.size)) + 723] = uint128(cd[100])
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                              else:
                                  mem[(2 * ceil32(return_data.size)) + 595] = address(cd[36])
                                  mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 691] = uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128))
                                  mem[(2 * ceil32(return_data.size)) + 723] = uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152)
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
              else:
                  require stor11[stor12[params].field_256].field_0 < stor11[stor12[params].field_256].field_256
                  if not approved[params].field_384:
                      require cd[68] == uint128(cd[68])
                      if uint128(cd[68]) > approved[params].field_1024:
                          require cd[100] == uint128(cd[100])
                          if uint128(cd[100]) > approved[params].field_1152:
                              require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                              call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                   gas gas_remaining wei
                                  args address(this.address), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), approved[params].field_1024, approved[params].field_1152
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=′ 64
                              require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                              require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                              approved[params].field_1024 = 0
                              approved[params].field_1152 = 0
                              log Collect(
                                    uint256 tokenId=address(this.address),
                                    address recipient=approved[params].field_1024,
                                    uint256 amount0=approved[params].field_1152,
                                    uint256 amount1=params)
                          else:
                              require cd[100] == uint128(cd[100])
                              require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                              call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                   gas gas_remaining wei
                                  args address(this.address), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), approved[params].field_1024, uint128(cd[100])
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=′ 64
                              require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                              require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                              approved[params].field_1024 = 0
                              approved[params].field_1152 = uint128(approved[params].field_1152 - cd[100])
                              approved[params].field_1152 = 0
                              log Collect(
                                    uint256 tokenId=address(this.address),
                                    address recipient=approved[params].field_1024,
                                    uint256 amount0=uint128(cd[100]),
                                    uint256 amount1=params)
                      else:
                          require cd[68] == uint128(cd[68])
                          require cd[100] == uint128(cd[100])
                          if uint128(cd[100]) > approved[params].field_1152:
                              require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                              call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                   gas gas_remaining wei
                                  args address(this.address), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), cd[68] << 128, approved[params].field_1152
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=′ 64
                              require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                              require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                              approved[params].field_1024 = uint128(approved[params].field_1024 - cd[68])
                              approved[params].field_1152 = 0
                              log Collect(
                                    uint256 tokenId=address(this.address),
                                    address recipient=cd[68] << 128,
                                    uint256 amount0=approved[params].field_1152,
                                    uint256 amount1=params)
                          else:
                              require cd[100] == uint128(cd[100])
                              require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                              call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                   gas gas_remaining wei
                                  args address(this.address), ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), cd[68] << 128, uint128(cd[100])
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >=′ 64
                              require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                              require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                              approved[params].field_1024 = uint128(approved[params].field_1024 - cd[68])
                              approved[params].field_1152 = uint128(approved[params].field_1152 - cd[100])
                              approved[params].field_1152 = 0
                              log Collect(
                                    uint256 tokenId=address(this.address),
                                    address recipient=cd[68] << 128,
                                    uint256 amount0=uint128(cd[100]),
                                    uint256 amount1=params)
                      return ext_call.return_data[0] << 128, uint128(ext_call.return_data[32])
                  mem[601] = 0
                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).burn(int24 tickLower, int24 tickUpper, uint128 amount) with:
                       gas gas_remaining wei
                      args ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12)))))), 0
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=′ 64
                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                  static call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).positions(bytes32 ) with:
                          gas gas_remaining wei
                         args sha3(this.address, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232, Mask(24, 232, ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))) >> 232)
                  mem[ceil32(return_data.size) + 591 len 160] = ext_call.return_data[0 len 160]
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >=′ 160
                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                  require ext_call.return_data[96] == ext_call.return_data[112 len 16]
                  require ext_call.return_data[128] == ext_call.return_data[144 len 16]
                  if not mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)):
                      if not mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)):
                          approved[params].field_512 = ext_call.return_data[32]
                          approved[params].field_768 = ext_call.return_data[64]
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128)):
                              require cd[68] == uint128(cd[68])
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) >> 128) + approved[params].field_1152):
                                  require cd[100] == uint128(cd[100])
                              else:
                                  mem[(2 * ceil32(return_data.size)) + 595] = this.address
                                  mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 691] = uint128(cd[68])
                                  mem[(2 * ceil32(return_data.size)) + 723] = uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) >> 128) + approved[params].field_1152)
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                          else:
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) >> 128) + approved[params].field_1152):
                                  require cd[100] == uint128(cd[100])
                                  mem[(2 * ceil32(return_data.size)) + 595] = this.address
                                  mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 691] = uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128))
                                  mem[(2 * ceil32(return_data.size)) + 723] = uint128(cd[100])
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                              else:
                                  mem[(2 * ceil32(return_data.size)) + 595] = this.address
                                  mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 691] = uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128))
                                  mem[(2 * ceil32(return_data.size)) + 723] = uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) >> 128) + approved[params].field_1152)
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = 0
                                  approved[params].field_1152 = 0
                      else:
                          require unknown10000000() > mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384))
                          approved[params].field_512 = ext_call.return_data[32]
                          approved[params].field_768 = ext_call.return_data[64]
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128)):
                              require cd[68] == uint128(cd[68])
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152):
                                  require cd[100] == uint128(cd[100])
                              else:
                                  mem[(2 * ceil32(return_data.size)) + 595] = this.address
                                  mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 691] = uint128(cd[68])
                                  mem[(2 * ceil32(return_data.size)) + 723] = uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152)
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                          else:
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152):
                                  require cd[100] == uint128(cd[100])
                                  mem[(2 * ceil32(return_data.size)) + 595] = this.address
                                  mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 691] = uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128))
                                  mem[(2 * ceil32(return_data.size)) + 723] = uint128(cd[100])
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                              else:
                                  mem[(2 * ceil32(return_data.size)) + 595] = this.address
                                  mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 691] = uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) >> 128))
                                  mem[(2 * ceil32(return_data.size)) + 723] = uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152)
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = 0
                                  approved[params].field_1152 = 0
                  else:
                      require unknown10000000() > mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384))
                      if not mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)):
                          approved[params].field_512 = ext_call.return_data[32]
                          approved[params].field_768 = ext_call.return_data[64]
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128)):
                              require cd[68] == uint128(cd[68])
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) >> 128) + approved[params].field_1152):
                                  require cd[100] == uint128(cd[100])
                              else:
                                  mem[(2 * ceil32(return_data.size)) + 595] = this.address
                                  mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 691] = uint128(cd[68])
                                  mem[(2 * ceil32(return_data.size)) + 723] = uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) >> 128) + approved[params].field_1152)
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                          else:
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) >> 128) + approved[params].field_1152):
                                  require cd[100] == uint128(cd[100])
                                  mem[(2 * ceil32(return_data.size)) + 595] = this.address
                                  mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 691] = uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128))
                                  mem[(2 * ceil32(return_data.size)) + 723] = uint128(cd[100])
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                              else:
                                  mem[(2 * ceil32(return_data.size)) + 595] = this.address
                                  mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 691] = uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128))
                                  mem[(2 * ceil32(return_data.size)) + 723] = uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) >> 128) + approved[params].field_1152)
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = 0
                                  approved[params].field_1152 = 0
                      else:
                          require unknown10000000() > mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384))
                          approved[params].field_512 = ext_call.return_data[32]
                          approved[params].field_768 = ext_call.return_data[64]
                          require cd[68] == uint128(cd[68])
                          if uint128(cd[68]) <= uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128)):
                              require cd[68] == uint128(cd[68])
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152):
                                  require cd[100] == uint128(cd[100])
                                  mem[(2 * ceil32(return_data.size)) + 595] = this.address
                                  mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 691] = uint128(cd[68])
                                  mem[(2 * ceil32(return_data.size)) + 723] = uint128(cd[100])
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                              else:
                                  mem[(2 * ceil32(return_data.size)) + 595] = this.address
                                  mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 691] = uint128(cd[68])
                                  mem[(2 * ceil32(return_data.size)) + 723] = uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152)
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                          else:
                              require cd[100] == uint128(cd[100])
                              if uint128(cd[100]) <= uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152):
                                  require cd[100] == uint128(cd[100])
                                  mem[(2 * ceil32(return_data.size)) + 595] = this.address
                                  mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 691] = uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128))
                                  mem[(2 * ceil32(return_data.size)) + 723] = uint128(cd[100])
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                              else:
                                  mem[(2 * ceil32(return_data.size)) + 595] = this.address
                                  mem[(2 * ceil32(return_data.size)) + 627] = ('signextend', 2, ('signextend', 2, ('field', 336, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 659] = ('signextend', 2, ('signextend', 2, ('field', 360, ('stor', ('map', ('param', 'params'), ('name', 'approved', 12))))))
                                  mem[(2 * ceil32(return_data.size)) + 691] = uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128))
                                  mem[(2 * ceil32(return_data.size)) + 723] = uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152)
                                  require ext_code.size(address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)))
                                  call address(sha3(0, 2276643401503442211, sha3(stor11[stor12[params].field_256].field_0, stor11[stor12[params].field_256].field_256, stor11[stor12[params].field_256].field_416), 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54)).collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) with:
                                       gas gas_remaining wei
                                      args mem[(2 * ceil32(return_data.size)) + 595 len ceil32(return_data.size) + 160]
                                  mem[(2 * ceil32(return_data.size)) + 591 len 64] = ext_call.return_data[0 len 64]
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >=′ 64
                                  require ext_call.return_data[0] == ext_call.return_data[16 len 16]
                                  require ext_call.return_data[32] == ext_call.return_data[48 len 16]
                                  approved[params].field_1024 = 0
                                  approved[params].field_1152 = 0
                                  mem[(4 * ceil32(return_data.size)) + 591] = this.address
                                  mem[(4 * ceil32(return_data.size)) + 623] = uint128(approved[params].field_1024 + (Mask(128, 128, (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384) - mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) - (ext_call.return_data[32] * approved[params].field_384) + (approved[params].field_512 * approved[params].field_384) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, -1) < (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) - (mulmod(ext_call.return_data[32] - approved[params].field_512, approved[params].field_384, unknown10000000()) > (ext_call.return_data[32] * approved[params].field_384) - (approved[params].field_512 * approved[params].field_384)) << 128))
                                  mem[(4 * ceil32(return_data.size)) + 655] = uint128((Mask(128, 128, (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384) - mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000())) >> 128 or mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) - (ext_call.return_data[64] * approved[params].field_384) + (approved[params].field_768 * approved[params].field_384) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, -1) < (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) - (mulmod(ext_call.return_data[64] - approved[params].field_768, approved[params].field_384, unknown10000000()) > (ext_call.return_data[64] * approved[params].field_384) - (approved[params].field_768 * approved[params].field_384)) << 128) + approved[params].field_1152)
                                  log Collect(uint256 tokenId, address recipient, uint256 amount0, uint256 amount1):
                                              mem[(4 * ceil32(return_data.size)) + 591 len (5 * ceil32(return_data.size)) + 96],
                                              params,
  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)


