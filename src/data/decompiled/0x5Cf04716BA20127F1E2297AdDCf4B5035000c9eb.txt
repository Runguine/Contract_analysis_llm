# Palkeoramix decompiler. 

def storage:
  totalSupply is uint256 at storage 0
  owner is address at storage 1
  balanceOf is mapping of uint256 at storage 2
  allowance is mapping of uint256 at storage 3
  transferable is uint8 at storage 4
  name is array of uint256 at storage 5
  symbol is array of uint256 at storage 6
  decimals is uint8 at storage 7
  totalSupplyCap is uint256 at storage 8

def name(): # not payable
  return name[0 len name.length]

def totalSupply(): # not payable
  return totalSupply

def decimals(): # not payable
  return decimals

def balanceOf(address account): # not payable
  return balanceOf[address(account)]

def owner(): # not payable
  return owner

def transferable(): # not payable
  return bool(transferable)

def symbol(): # not payable
  return symbol[0 len symbol.length]

def totalSupplyCap(): # not payable
  return totalSupplyCap

def allowance(address owner, address spender): # not payable
  return allowance[address(owner)][address(spender)]

#
#  Regular functions
#

def _fallback(?) payable: # default function
  revert

def setTransferable(bool _transferable): # not payable
  require caller == owner
  transferable = uint8(_transferable)

def transferOwnership(address newOwner): # not payable
  require caller == owner
  require newOwner
  owner = newOwner
  log OwnershipTransferred(
        address previousOwner=owner,
        address newOwner=newOwner)

def approve(address spender, uint256 amount): # not payable
  if amount:
      require not allowance[caller][address(spender)]
  allowance[caller][address(spender)] = amount
  log Approval(
        address owner=amount,
        address spender=caller,
        uint256 value=spender)
  return 1

def transfer(address recipient, uint256 amount): # not payable
  require bool(transferable) == 1
  require recipient
  require amount <= balanceOf[caller]
  require amount <= balanceOf[caller]
  balanceOf[caller] -= amount
  require balanceOf[address(recipient)] + amount >= balanceOf[address(recipient)]
  balanceOf[address(recipient)] += amount
  log Transfer(
        address from=amount,
        address to=caller,
        uint256 value=recipient)
  return 1

def transferFrom(address sender, address recipient, uint256 amount): # not payable
  require bool(transferable) == 1
  require recipient
  require amount <= balanceOf[address(sender)]
  require amount <= allowance[address(sender)][caller]
  require amount <= balanceOf[address(sender)]
  balanceOf[address(sender)] -= amount
  require balanceOf[address(recipient)] + amount >= balanceOf[address(recipient)]
  balanceOf[address(recipient)] += amount
  require amount <= allowance[address(sender)][caller]
  allowance[address(sender)][caller] -= amount
  log Transfer(
        address from=amount,
        address to=sender,
        uint256 value=recipient)
  return 1


