# Palkeoramix decompiler. 

def storage:
  stor3608 is address at storage 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc
  storB531 is address at storage 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103

def _fallback(?) payable: # default function
  if caller - storB531:
      delegate stor3608 with:
         funct call.data[0 len 4]
           gas gas_remaining wei
          args call.data[4 len calldata.size - 4]
      if not delegate.return_code:
          revert with ext_call.return_data[0 len return_data.size]
      return ext_call.return_data[0 len return_data.size]
  if not call.func_hash - 0x3659cfe600000000000000000000000000000000000000000000000000000000:
      require not call.value
      require 4 <= calldata.size
      require calldata.size <= calldata.size
      require calldata.size - 4 >=′ 32
      require _param1 == address(_param1)
      if not ext_code.size(address(_param1)):
          revert with 0, 'ERC1967: new implementation is not a contract'
      stor3608 = address(_param1)
      log Upgraded(address implementation=address(_param1))
  else:
      if call.func_hash - 0x4f1ef28600000000000000000000000000000000000000000000000000000000:
          if call.func_hash + 0x70d7c69000000000000000000000000000000000000000000000000000000000:
              if not call.func_hash + 0x7ae5bc000000000000000000000000000000000000000000000000000000000:
                  require not call.value
                  return storB531
              if call.func_hash - 0x5c60da1b00000000000000000000000000000000000000000000000000000000:
                  revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                              'TransparentUpgradeableProxy: admin cannot fallback to proxy target'
              require not call.value
              return stor3608
          require not call.value
          require 4 <= calldata.size
          require calldata.size <= calldata.size
          require calldata.size - 4 >=′ 32
          require _param1 == address(_param1)
          log AdminChanged(
                address previousAdmin=storB531,
                address newAdmin=address(_param1))
          if not address(_param1):
              revert with 0, 'ERC1967: new admin is the zero address'
          storB531 = address(_param1)
      else:
          require 4 <= calldata.size
          require calldata.size <= calldata.size
          require calldata.size - 4 >=′ 64
          require _param1 == address(_param1)
          require _param2 <= LOCK8605463013()
          require _param2 + 35 <′ calldata.size
          if _param2.length > LOCK8605463013():
              revert with 0, 65
          if ceil32(ceil32(_param2.length)) + 129 < 128 or ceil32(ceil32(_param2.length)) + 129 > LOCK8605463013():
              revert with 0, 65
          mem[128] = _param2.length
          require _param2 + _param2.length + 36 <= calldata.size
          mem[160 len _param2.length] = _param2[all]
          if not ext_code.size(address(_param1)):
              revert with 0, 'ERC1967: new implementation is not a contract'
          stor3608 = address(_param1)
          log Upgraded(address implementation=address(_param1))
          mem[ceil32(ceil32(_param2.length)) + 129] = 39
          mem[ceil32(ceil32(_param2.length)) + 161 len 39] = 0xfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65
          mem[ceil32(ceil32(_param2.length)) + 225 len ceil32(_param2.length)] = _param2[all], Mask(8 * ceil32(_param2.length) - _param2.length, -(8 * ceil32(_param2.length) + -ceil32(ceil32(_param2.length)) + 31) + 256, 39) >> -(8 * ceil32(_param2.length) + -ceil32(ceil32(_param2.length)) + 31) + 256
          mem[_param2.length + ceil32(ceil32(_param2.length)) + 225] = 0
          delegate address(_param1).mem[ceil32(ceil32(_param2.length)) + 225 len 4] with:
               gas gas_remaining wei
              args mem[ceil32(ceil32(_param2.length)) + 229 len _param2.length - 4]
          if not return_data.size:
              if not delegate.return_code:
                  if mem[96]:
                      revert with memory
                        from 128
                         len mem[96]
                  revert with 0, 
                              32,
                              39,
                              0xfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65, mem[ceil32(ceil32(_param2.length)) + 200 len 25] >> 56,
                              0
              if not -mem[96]:
                  if not ext_code.size(address(_param1)):
                      revert with 0, 'Address: call to non-contract'
          else:
              if not delegate.return_code:
                  if return_data.size:
                      revert with ext_call.return_data[0 len return_data.size]
                  revert with 0, 
                              32,
                              39,
                              0xfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65, mem[ceil32(ceil32(_param2.length)) + 200 len 25] >> 56,
                              0
              if not -return_data.size:
                  if not ext_code.size(address(_param1)):
                      revert with 0, 'Address: call to non-contract'
  return 


