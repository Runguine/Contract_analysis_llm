# Palkeoramix decompiler. 

def storage:
  controllerAddress is address at storage 0
  name is array of uint256 at storage 1
  decimals is uint8 at storage 2
  symbol is array of uint256 at storage 3
  version is array of uint256 at storage 4
  parentTokenAddress is address at storage 5
  parentSnapShotBlock is uint256 at storage 6
  creationBlock is uint256 at storage 7
  stor8 is array of struct at storage 8
  allowance is mapping of uint256 at storage 9
  stor10 is array of struct at storage 10
  transfersEnabled is uint8 at storage 11
  tokenFactoryAddress is address at storage 11 offset 8

def name(): # not payable
  return name[0 len name.length]

def creationBlock(): # not payable
  return creationBlock

def decimals(): # not payable
  return decimals

def version(): # not payable
  return version[0 len version.length]

def parentToken(): # not payable
  return parentTokenAddress

def symbol(): # not payable
  return symbol[0 len symbol.length]

def transfersEnabled(): # not payable
  return bool(transfersEnabled)

def parentSnapShotBlock(): # not payable
  return parentSnapShotBlock

def allowance(address owner, address spender): # not payable
  return allowance[address(owner)][address(spender)]

def tokenFactory(): # not payable
  return tokenFactoryAddress

def controller(): # not payable
  return controllerAddress

#
#  Regular functions
#

def changeController(address _newController): # not payable
  require caller == controllerAddress
  controllerAddress = _newController

def enableTransfers(bool _transfersEnabled): # not payable
  require caller == controllerAddress
  transfersEnabled = uint8(_transfersEnabled)

def _fallback(?) payable: # default function
  require controllerAddress
  require ext_code.size(controllerAddress) > 0
  require ext_code.size(controllerAddress)
  call controllerAddress.proxyPayment(address _owner) with:
     value call.value wei
       gas gas_remaining wei
      args caller
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require 1 == bool(ext_call.return_data[0])

def approve(address spender, uint256 amount): # not payable
  require transfersEnabled
  if amount:
      require not allowance[caller][address(spender)]
  if controllerAddress:
      if ext_code.size(controllerAddress) > 0:
          require ext_code.size(controllerAddress)
          call controllerAddress.onApprove(address _owner, address _spender, uint256 _amount) with:
               gas gas_remaining wei
              args caller, address(spender), amount
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
          require 1 == bool(ext_call.return_data[0])
  allowance[caller][address(spender)] = amount
  log Approval(
        address owner=amount,
        address spender=caller,
        uint256 value=spender)
  return 1

def claimTokens(address _token): # not payable
  require caller == controllerAddress
  if not _token:
      call controllerAddress with:
         value eth.balance(this.address) wei
           gas 2300 * is_zero(value) wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
  else:
      require ext_code.size(_token)
      call _token.balanceOf(address account) with:
           gas gas_remaining wei
          args this.address
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(_token)
      call _token.transfer(address recipient, uint256 amount) with:
           gas gas_remaining wei
          args controllerAddress, ext_call.return_data[0]
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      log ClaimedTokens(
            address _token=ext_call.return_data[0],
            address _controller=_token,
            uint256 _amount=controllerAddress)

def approveAndCall(address _spender, uint256 _value, bytes _extraData): # not payable
  require transfersEnabled
  if _value:
      require not allowance[caller][address(_spender)]
  if controllerAddress:
      if ext_code.size(controllerAddress) > 0:
          require ext_code.size(controllerAddress)
          call controllerAddress.onApprove(address _owner, address _spender, uint256 _amount) with:
               gas gas_remaining wei
              args caller, address(_spender), _value
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
          require 1 == bool(ext_call.return_data[0])
  allowance[caller][address(_spender)] = _value
  log Approval(
        address owner=_value,
        address spender=caller,
        uint256 value=_spender)
  require ext_code.size(_spender)
  call _spender.receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) with:
       gas gas_remaining wei
      args caller, _value, this.address, Array(len=_extraData.length, data=_extraData[all])
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  return 1

def totalSupply(): # not payable
  if not stor10.length:
      if not parentTokenAddress:
          return 0
      require ext_code.size(parentTokenAddress)
      if block.number < parentSnapShotBlock:
          call parentTokenAddress.totalSupplyAt(uint256 snapshotId) with:
               gas gas_remaining wei
              args block.number
      else:
          call parentTokenAddress.totalSupplyAt(uint256 snapshotId) with:
               gas gas_remaining wei
              args parentSnapShotBlock
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      return ext_call.return_data[0]
  require 0 < stor10.length
  if uint128(stor10.field_0) > block.number:
      if not parentTokenAddress:
          return 0
      require ext_code.size(parentTokenAddress)
      if block.number < parentSnapShotBlock:
          call parentTokenAddress.totalSupplyAt(uint256 snapshotId) with:
               gas gas_remaining wei
              args block.number
      else:
          call parentTokenAddress.totalSupplyAt(uint256 snapshotId) with:
               gas gas_remaining wei
              args parentSnapShotBlock
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      return ext_call.return_data[0]
  if not stor10.length:
      return 0
  require stor10.length - 1 < stor10.length
  if block.number >= stor10[stor10.length].field_0:
      if stor10.length - 1 < stor10.length:
          return stor10[stor10.length].field_0
  else:
      if 0 < stor10.length:
          if block.number < uint128(stor10.field_0):
              return 0
          s = 0
          idx = 0
          while stor10.length - 1 > idx:
              require idx + stor10.length / 2 < stor10.length
              mem[0] = 10
              if stor10[0.5 / idx + stor10.length].field_0 > block.number:
                  s = idx + stor10.length / 2
                  idx = idx
                  continue 
              s = idx + stor10.length / 2
              idx = idx + stor10.length / 2
              continue 
          if idx < stor10.length:
              return stor10[idx].field_128
  revert

def totalSupplyAt(uint256 snapshotId): # not payable
  if not stor10.length:
      if not parentTokenAddress:
          return 0
      require ext_code.size(parentTokenAddress)
      if snapshotId < parentSnapShotBlock:
          call parentTokenAddress.totalSupplyAt(uint256 snapshotId) with:
               gas gas_remaining wei
              args snapshotId
      else:
          call parentTokenAddress.totalSupplyAt(uint256 snapshotId) with:
               gas gas_remaining wei
              args parentSnapShotBlock
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      return ext_call.return_data[0]
  require 0 < stor10.length
  if uint128(stor10.field_0) > snapshotId:
      if not parentTokenAddress:
          return 0
      require ext_code.size(parentTokenAddress)
      if snapshotId < parentSnapShotBlock:
          call parentTokenAddress.totalSupplyAt(uint256 snapshotId) with:
               gas gas_remaining wei
              args snapshotId
      else:
          call parentTokenAddress.totalSupplyAt(uint256 snapshotId) with:
               gas gas_remaining wei
              args parentSnapShotBlock
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      return ext_call.return_data[0]
  if not stor10.length:
      return 0
  require stor10.length - 1 < stor10.length
  if snapshotId >= stor10[stor10.length].field_0:
      if stor10.length - 1 < stor10.length:
          return stor10[stor10.length].field_0
  else:
      if 0 < stor10.length:
          if snapshotId < uint128(stor10.field_0):
              return 0
          s = 0
          idx = 0
          while stor10.length - 1 > idx:
              require idx + stor10.length / 2 < stor10.length
              mem[0] = 10
              if stor10[0.5 / idx + stor10.length].field_0 > snapshotId:
                  s = idx + stor10.length / 2
                  idx = idx
                  continue 
              s = idx + stor10.length / 2
              idx = idx + stor10.length / 2
              continue 
          if idx < stor10.length:
              return stor10[idx].field_128
  revert

def balanceOf(address account): # not payable
  if not stor8[address(account)].field_0:
      if not parentTokenAddress:
          return 0
      require ext_code.size(parentTokenAddress)
      if block.number < parentSnapShotBlock:
          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
               gas gas_remaining wei
              args address(account), block.number
      else:
          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
               gas gas_remaining wei
              args address(account), parentSnapShotBlock
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      return ext_call.return_data[0]
  require 0 < stor8[address(account)].field_0
  if stor8[address(account)].field_0 > block.number:
      if not parentTokenAddress:
          return 0
      require ext_code.size(parentTokenAddress)
      if block.number < parentSnapShotBlock:
          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
               gas gas_remaining wei
              args address(account), block.number
      else:
          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
               gas gas_remaining wei
              args address(account), parentSnapShotBlock
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      return ext_call.return_data[0]
  if not stor8[address(account)].field_0:
      return 0
  require stor8[address(account)].field_0 - 1 < stor8[address(account)].field_0
  if block.number >= stor8[address(account)][stor8[address(account)].field_0].field_0:
      if stor8[address(account)].field_0 - 1 < stor8[address(account)].field_0:
          return stor8[address(account)][stor8[address(account)].field_0].field_0
  else:
      if 0 < stor8[address(account)].field_0:
          if block.number < stor8[address(account)].field_0:
              return 0
          s = 0
          idx = 0
          while stor8[address(account)].field_0 - 1 > idx:
              require idx + stor8[address(account)].field_0 / 2 < stor8[address(account)].field_0
              mem[0] = sha3(address(account), 8)
              if stor8[address(account)][0.5 / idx + stor8[address(account)].field_0].field_0 > block.number:
                  s = idx + stor8[address(account)].field_0 / 2
                  idx = idx
                  continue 
              s = idx + stor8[address(account)].field_0 / 2
              idx = idx + stor8[address(account)].field_0 / 2
              continue 
          if idx < stor8[address(account)].field_0:
              return stor8[address(account)][idx].field_128
  revert

def balanceOfAt(address account, uint256 snapshotId): # not payable
  if not stor8[address(account)].field_0:
      if not parentTokenAddress:
          return 0
      require ext_code.size(parentTokenAddress)
      if snapshotId < parentSnapShotBlock:
          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
               gas gas_remaining wei
              args address(account), snapshotId
      else:
          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
               gas gas_remaining wei
              args address(account), parentSnapShotBlock
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      return ext_call.return_data[0]
  require 0 < stor8[address(account)].field_0
  if stor8[address(account)].field_0 > snapshotId:
      if not parentTokenAddress:
          return 0
      require ext_code.size(parentTokenAddress)
      if snapshotId < parentSnapShotBlock:
          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
               gas gas_remaining wei
              args address(account), snapshotId
      else:
          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
               gas gas_remaining wei
              args address(account), parentSnapShotBlock
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      return ext_call.return_data[0]
  if not stor8[address(account)].field_0:
      return 0
  require stor8[address(account)].field_0 - 1 < stor8[address(account)].field_0
  if snapshotId >= stor8[address(account)][stor8[address(account)].field_0].field_0:
      if stor8[address(account)].field_0 - 1 < stor8[address(account)].field_0:
          return stor8[address(account)][stor8[address(account)].field_0].field_0
  else:
      if 0 < stor8[address(account)].field_0:
          if snapshotId < stor8[address(account)].field_0:
              return 0
          s = 0
          idx = 0
          while stor8[address(account)].field_0 - 1 > idx:
              require idx + stor8[address(account)].field_0 / 2 < stor8[address(account)].field_0
              mem[0] = sha3(address(account), 8)
              if stor8[address(account)][0.5 / idx + stor8[address(account)].field_0].field_0 > snapshotId:
                  s = idx + stor8[address(account)].field_0 / 2
                  idx = idx
                  continue 
              s = idx + stor8[address(account)].field_0 / 2
              idx = idx + stor8[address(account)].field_0 / 2
              continue 
          if idx < stor8[address(account)].field_0:
              return stor8[address(account)][idx].field_128
  revert

def createCloneToken(string _cloneTokenName, uint8 _cloneDecimalUnits, string _cloneTokenSymbol, uint256 _snapshotBlock, bool _transfersEnabled): # not payable
  mem[128 len _cloneTokenName.length] = _cloneTokenName[all]
  mem[ceil32(_cloneTokenName.length) + 128] = _cloneTokenSymbol.length
  mem[ceil32(_cloneTokenName.length) + 160 len _cloneTokenSymbol.length] = _cloneTokenSymbol[all]
  mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 160] = 0x5b7b72c100000000000000000000000000000000000000000000000000000000
  mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 388 len ceil32(_cloneTokenName.length)] = _cloneTokenName[all], mem[_cloneTokenName.length + 128 len ceil32(_cloneTokenName.length) - _cloneTokenName.length]
  mem[_cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 388] = _cloneTokenSymbol.length
  mem[_cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 420 len ceil32(_cloneTokenSymbol.length)] = _cloneTokenSymbol[all], mem[ceil32(_cloneTokenName.length) + _cloneTokenSymbol.length + 160 len ceil32(_cloneTokenSymbol.length) - _cloneTokenSymbol.length]
  if not _snapshotBlock:
      if not _cloneTokenSymbol.length % 32:
          require ext_code.size(tokenFactoryAddress)
          call tokenFactoryAddress.createCloneToken(address _parentToken, uint256 _snapshotBlock, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, bool _transfersEnabled) with:
               gas gas_remaining wei
              args this.address, block.number - 1, Array(len=_cloneTokenName.length, data=Mask(8 * ceil32(_cloneTokenName.length), -(8 * ceil32(_cloneTokenName.length)) + 256, _cloneTokenName[all], mem[_cloneTokenName.length + 128 len ceil32(_cloneTokenName.length) - _cloneTokenName.length]) << (8 * ceil32(_cloneTokenName.length)) - 256, mem[(2 * ceil32(_cloneTokenName.length)) + ceil32(_cloneTokenSymbol.length) + 388 len _cloneTokenSymbol.length + _cloneTokenName.length + -ceil32(_cloneTokenName.length) + 32]), _cloneDecimalUnits << 248, _cloneTokenName.length + 224, _transfersEnabled
      else:
          mem[floor32(_cloneTokenSymbol.length) + _cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 420] = mem[floor32(_cloneTokenSymbol.length) + _cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + -(_cloneTokenSymbol.length % 32) + 452 len _cloneTokenSymbol.length % 32]
          require ext_code.size(tokenFactoryAddress)
          call tokenFactoryAddress.createCloneToken(address _parentToken, uint256 _snapshotBlock, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, bool _transfersEnabled) with:
               gas gas_remaining wei
              args this.address, block.number - 1, Array(len=_cloneTokenName.length, data=Mask(8 * ceil32(_cloneTokenName.length), -(8 * ceil32(_cloneTokenName.length)) + 256, _cloneTokenName[all], mem[_cloneTokenName.length + 128 len ceil32(_cloneTokenName.length) - _cloneTokenName.length]) << (8 * ceil32(_cloneTokenName.length)) - 256, mem[(2 * ceil32(_cloneTokenName.length)) + ceil32(_cloneTokenSymbol.length) + 388 len floor32(_cloneTokenSymbol.length) + _cloneTokenName.length + -ceil32(_cloneTokenName.length) + 64]), _cloneDecimalUnits << 248, _cloneTokenName.length + 224, _transfersEnabled
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(address(ext_call.return_data[0]))
      call address(ext_call.return_data[0]).changeController(address _newController) with:
           gas gas_remaining wei
          args caller
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      log NewCloneToken(
            address _cloneToken=(block.number - 1),
            uint256 _snapshotBlock=address(ext_call.return_data[0]))
  else:
      if not _cloneTokenSymbol.length % 32:
          require ext_code.size(tokenFactoryAddress)
          call tokenFactoryAddress.createCloneToken(address _parentToken, uint256 _snapshotBlock, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, bool _transfersEnabled) with:
               gas gas_remaining wei
              args this.address, _snapshotBlock, Array(len=_cloneTokenName.length, data=Mask(8 * ceil32(_cloneTokenName.length), -(8 * ceil32(_cloneTokenName.length)) + 256, _cloneTokenName[all], mem[_cloneTokenName.length + 128 len ceil32(_cloneTokenName.length) - _cloneTokenName.length]) << (8 * ceil32(_cloneTokenName.length)) - 256, mem[(2 * ceil32(_cloneTokenName.length)) + ceil32(_cloneTokenSymbol.length) + 388 len _cloneTokenSymbol.length + _cloneTokenName.length + -ceil32(_cloneTokenName.length) + 32]), _cloneDecimalUnits << 248, _cloneTokenName.length + 224, _transfersEnabled
      else:
          mem[floor32(_cloneTokenSymbol.length) + _cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 420] = mem[floor32(_cloneTokenSymbol.length) + _cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + -(_cloneTokenSymbol.length % 32) + 452 len _cloneTokenSymbol.length % 32]
          require ext_code.size(tokenFactoryAddress)
          call tokenFactoryAddress.createCloneToken(address _parentToken, uint256 _snapshotBlock, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, bool _transfersEnabled) with:
               gas gas_remaining wei
              args this.address, _snapshotBlock, Array(len=_cloneTokenName.length, data=Mask(8 * ceil32(_cloneTokenName.length), -(8 * ceil32(_cloneTokenName.length)) + 256, _cloneTokenName[all], mem[_cloneTokenName.length + 128 len ceil32(_cloneTokenName.length) - _cloneTokenName.length]) << (8 * ceil32(_cloneTokenName.length)) - 256, mem[(2 * ceil32(_cloneTokenName.length)) + ceil32(_cloneTokenSymbol.length) + 388 len floor32(_cloneTokenSymbol.length) + _cloneTokenName.length + -ceil32(_cloneTokenName.length) + 64]), _cloneDecimalUnits << 248, _cloneTokenName.length + 224, _transfersEnabled
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(address(ext_call.return_data[0]))
      call address(ext_call.return_data[0]).changeController(address _newController) with:
           gas gas_remaining wei
          args caller
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      log NewCloneToken(
            address _cloneToken=_snapshotBlock,
            uint256 _snapshotBlock=address(ext_call.return_data[0]))
  return address(ext_call.return_data[0])

def transfer(address recipient, uint256 amount): # not payable
  require transfersEnabled
  if not amount:
      return 1
  require block.number > parentSnapShotBlock
  require recipient
  require recipient != this.address
  if not stor8[caller].field_0:
      if not parentTokenAddress:
          if 0 < amount:
              return 0
          if not controllerAddress:
              if not stor8[caller].field_0:
                  stor8[caller].field_0++
                  if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                      require stor8[caller].field_0 < stor8[caller].field_0
                      stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                      stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                      if not stor8[address(recipient)].field_0:
                          if not parentTokenAddress:
                              require 0 <= amount
                              if not stor8[address(recipient)].field_0:
                                  stor8[address(recipient)].field_0++
                                  if stor8[address(recipient)].field_0 <= stor8[address(recipient)].field_0 + 1:
                              else:
                                  require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)][stor8[address(recipient)].field_0].field_0 >= block.number:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      stor8[address(recipient)][stor8[address(recipient)].field_0].field_0 = uint128(amount)
                                  else:
                                      stor8[address(recipient)].field_0++
                          else:
                              require ext_code.size(parentTokenAddress)
                              if block.number < parentSnapShotBlock:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining wei
                                      args address(recipient), block.number
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                                  require ext_call.return_data[0] <= ext_call.return_data[0] + amount
                              else:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining wei
                                      args address(recipient), parentSnapShotBlock
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                      else:
                          require 0 < stor8[address(recipient)].field_0
                          if stor8[address(recipient)].field_0 > block.number:
                              if not parentTokenAddress:
                                  require 0 <= amount
                                  if not stor8[address(recipient)].field_0:
                                      stor8[address(recipient)].field_0++
                                  else:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                              else:
                                  require ext_code.size(parentTokenAddress)
                                  if block.number < parentSnapShotBlock:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), block.number
                                  else:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), parentSnapShotBlock
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                          else:
                              if not stor8[address(recipient)].field_0:
                                  require 0 <= amount
                              else:
                                  require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                  if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require 0 < stor8[address(recipient)].field_0
                                  if block.number >= stor8[address(recipient)].field_0:
                                      if stor8[address(recipient)].field_0 - 1 > 0:
              else:
                  require stor8[caller].field_0 - 1 < stor8[caller].field_0
                  if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      stor8[caller][stor8[caller].field_0].field_0 = uint128(-amount)
                      if not stor8[address(recipient)].field_0:
                          if not parentTokenAddress:
                              require 0 <= amount
                              if stor8[address(recipient)].field_0:
                                  require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)][stor8[address(recipient)].field_0].field_0 >= block.number:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      stor8[address(recipient)][stor8[address(recipient)].field_0].field_0 = uint128(amount)
                                  else:
                                      stor8[address(recipient)].field_0++
                              else:
                                  stor8[address(recipient)].field_0++
                                  if stor8[address(recipient)].field_0 <= stor8[address(recipient)].field_0 + 1:
                                      require stor8[address(recipient)].field_0 < stor8[address(recipient)].field_0
                                      stor8[address(recipient)][stor8[address(recipient)].field_0].field_0 = uint128(block.number)
                                      stor8[address(recipient)][stor8[address(recipient)].field_0].field_128 = uint128(amount)
                          else:
                              require ext_code.size(parentTokenAddress)
                              if block.number >= parentSnapShotBlock:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining wei
                                      args address(recipient), parentSnapShotBlock
                              else:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining wei
                                      args address(recipient), block.number
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] <= ext_call.return_data[0] + amount
                      else:
                          require 0 < stor8[address(recipient)].field_0
                          if stor8[address(recipient)].field_0 > block.number:
                              if not parentTokenAddress:
                                  require 0 <= amount
                                  if not stor8[address(recipient)].field_0:
                                      stor8[address(recipient)].field_0++
                                  else:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      if stor8[address(recipient)][stor8[address(recipient)].field_0].field_0 >= block.number:
                              else:
                                  require ext_code.size(parentTokenAddress)
                                  if block.number >= parentSnapShotBlock:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), parentSnapShotBlock
                                  else:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), block.number
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                          else:
                              if not stor8[address(recipient)].field_0:
                                  require 0 <= amount
                                  if stor8[address(recipient)].field_0:
                              else:
                                  require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                  if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                  else:
                                      require 0 < stor8[address(recipient)].field_0
                                      if block.number >= stor8[address(recipient)].field_0:
                                          if stor8[address(recipient)].field_0 - 1 <= 0:
                                              require 0 < stor8[address(recipient)].field_0
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          require stor8[address(recipient)].field_1 < stor8[address(recipient)].field_0
                  else:
                      stor8[caller].field_0++
                      if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                          require stor8[caller].field_0 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                          stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require 0 <= amount
                                  if not stor8[address(recipient)].field_0:
                                      stor8[address(recipient)].field_0++
                                  else:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                              else:
                                  require ext_code.size(parentTokenAddress)
                                  if block.number < parentSnapShotBlock:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), block.number
                                  else:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), parentSnapShotBlock
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 <= block.number:
                                  if stor8[address(recipient)].field_0:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require 0 < stor8[address(recipient)].field_0
                              else:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                      if stor8[address(recipient)].field_0:
                                  else:
                                      require ext_code.size(parentTokenAddress)
                                      if block.number >= parentSnapShotBlock:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), parentSnapShotBlock
                                      else:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), block.number
                                          if not ext_call.success:
                                              revert with ext_call.return_data[0 len return_data.size]
          else:
              if ext_code.size(controllerAddress) <= 0:
                  if not stor8[caller].field_0:
                      stor8[caller].field_0++
                      if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                          require stor8[caller].field_0 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                          stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require 0 <= amount
                                  if not stor8[address(recipient)].field_0:
                                      stor8[address(recipient)].field_0++
                                      if stor8[address(recipient)].field_0 <= stor8[address(recipient)].field_0 + 1:
                                  else:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      if stor8[address(recipient)][stor8[address(recipient)].field_0].field_0 >= block.number:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          stor8[address(recipient)][stor8[address(recipient)].field_0].field_0 = uint128(amount)
                                      else:
                                          stor8[address(recipient)].field_0++
                              else:
                                  require ext_code.size(parentTokenAddress)
                                  if block.number < parentSnapShotBlock:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), block.number
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                                      require return_data.size >= 32
                                      require ext_call.return_data[0] <= ext_call.return_data[0] + amount
                                  else:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), parentSnapShotBlock
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                                      require return_data.size >= 32
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 > block.number:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                      if not stor8[address(recipient)].field_0:
                                          stor8[address(recipient)].field_0++
                                      else:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                  else:
                                      require ext_code.size(parentTokenAddress)
                                      if block.number < parentSnapShotBlock:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), block.number
                                      else:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), parentSnapShotBlock
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                                      require return_data.size >= 32
                              else:
                                  if not stor8[address(recipient)].field_0:
                                      require 0 <= amount
                                  else:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require 0 < stor8[address(recipient)].field_0
                                      if block.number >= stor8[address(recipient)].field_0:
                                          if stor8[address(recipient)].field_0 - 1 > 0:
                  else:
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require 0 <= amount
                                  if stor8[address(recipient)].field_0:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      if stor8[address(recipient)][stor8[address(recipient)].field_0].field_0 >= block.number:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          stor8[address(recipient)][stor8[address(recipient)].field_0].field_0 = uint128(amount)
                                      else:
                                          stor8[address(recipient)].field_0++
                                  else:
                                      stor8[address(recipient)].field_0++
                                      if stor8[address(recipient)].field_0 <= stor8[address(recipient)].field_0 + 1:
                                          require stor8[address(recipient)].field_0 < stor8[address(recipient)].field_0
                                          stor8[address(recipient)][stor8[address(recipient)].field_0].field_0 = uint128(block.number)
                                          stor8[address(recipient)][stor8[address(recipient)].field_0].field_128 = uint128(amount)
                              else:
                                  require ext_code.size(parentTokenAddress)
                                  if block.number >= parentSnapShotBlock:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), parentSnapShotBlock
                                  else:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), block.number
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                                  require ext_call.return_data[0] <= ext_call.return_data[0] + amount
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 > block.number:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                      if not stor8[address(recipient)].field_0:
                                          stor8[address(recipient)].field_0++
                                      else:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          if stor8[address(recipient)][stor8[address(recipient)].field_0].field_0 >= block.number:
                                  else:
                                      require ext_code.size(parentTokenAddress)
                                      if block.number >= parentSnapShotBlock:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), parentSnapShotBlock
                                      else:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), block.number
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                                      require return_data.size >= 32
                              else:
                                  if not stor8[address(recipient)].field_0:
                                      require 0 <= amount
                                      if stor8[address(recipient)].field_0:
                                  else:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      else:
                                          require 0 < stor8[address(recipient)].field_0
                                          if block.number >= stor8[address(recipient)].field_0:
                                              if stor8[address(recipient)].field_0 - 1 <= 0:
                                                  require 0 < stor8[address(recipient)].field_0
                                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                              require stor8[address(recipient)].field_1 < stor8[address(recipient)].field_0
                      else:
                          stor8[caller].field_0++
                          if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                      if not stor8[address(recipient)].field_0:
                                          stor8[address(recipient)].field_0++
                                      else:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                  else:
                                      require ext_code.size(parentTokenAddress)
                                      if block.number < parentSnapShotBlock:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), block.number
                                      else:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), parentSnapShotBlock
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                                      require return_data.size >= 32
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 <= block.number:
                                      if stor8[address(recipient)].field_0:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                                              require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          require 0 < stor8[address(recipient)].field_0
                                  else:
                                      if not parentTokenAddress:
                                          require 0 <= amount
                                          if stor8[address(recipient)].field_0:
                                      else:
                                          require ext_code.size(parentTokenAddress)
                                          if block.number >= parentSnapShotBlock:
                                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                                   gas gas_remaining wei
                                                  args address(recipient), parentSnapShotBlock
                                          else:
                                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                                   gas gas_remaining wei
                                                  args address(recipient), block.number
                                              if not ext_call.success:
                                                  revert with ext_call.return_data[0 len return_data.size]
              else:
                  require ext_code.size(controllerAddress)
                  call controllerAddress.'J91I' with:
                       gas gas_remaining wei
                      args caller, address(recipient), amount
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require 1 == bool(ext_call.return_data[0])
                  if not stor8[caller].field_0:
                      stor8[caller].field_0++
                      if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                          require stor8[caller].field_0 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                          stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require 0 <= amount
                                  if stor8[address(recipient)].field_0:
                              else:
                                  require ext_code.size(parentTokenAddress)
                                  if block.number >= parentSnapShotBlock:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), parentSnapShotBlock
                                  else:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), block.number
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 > block.number:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                  else:
                                      if block.number < parentSnapShotBlock:
                              else:
                                  if stor8[address(recipient)].field_0:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                  else:
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require 0 <= amount
                                  if not stor8[address(recipient)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require ext_code.size(parentTokenAddress)
                              if block.number < parentSnapShotBlock:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining wei
                                      args address(recipient), block.number
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                              else:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining wei
                                      args address(recipient), parentSnapShotBlock
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 <= block.number:
                                  if stor8[address(recipient)].field_0:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require 0 < stor8[address(recipient)].field_0
                              else:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                  else:
                                      if block.number < parentSnapShotBlock:
                                          require ext_code.size(parentTokenAddress)
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), block.number
                      else:
                          stor8[caller].field_0++
                          if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                  else:
                                      if block.number < parentSnapShotBlock:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 <= block.number:
                                      if stor8[address(recipient)].field_0:
                                  else:
                                      if parentTokenAddress:
      else:
          require ext_code.size(parentTokenAddress)
          if block.number >= parentSnapShotBlock:
              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                   gas gas_remaining wei
                  args caller, parentSnapShotBlock
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >= 32
              if ext_call.return_data[0] < amount:
                  return 0
              if not controllerAddress:
                  if not stor8[caller].field_0:
                      stor8[caller].field_0++
                      if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                          require stor8[caller].field_0 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                          stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                          if not stor8[address(recipient)].field_0:
                              if parentTokenAddress:
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 > block.number:
                  else:
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require 0 <= amount
                              else:
                                  if block.number < parentSnapShotBlock:
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 <= block.number:
                                  if stor8[address(recipient)].field_0:
                              else:
                                  if parentTokenAddress:
                      else:
                          stor8[caller].field_0++
                          if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                              if stor8[address(recipient)].field_0:
                                  require 0 < stor8[address(recipient)].field_0
              else:
                  if ext_code.size(controllerAddress) <= 0:
                      if not stor8[caller].field_0:
                          stor8[caller].field_0++
                          if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                      else:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                              require stor8[caller].field_0 - 1 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                  else:
                                      if block.number < parentSnapShotBlock:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 <= block.number:
                                      if stor8[address(recipient)].field_0:
                                  else:
                                      if parentTokenAddress:
                          else:
                              stor8[caller].field_0++
                              if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                                  require stor8[caller].field_0 < stor8[caller].field_0
                                  stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                                  stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                                  if stor8[address(recipient)].field_0:
                                      require 0 < stor8[address(recipient)].field_0
                  else:
                      require ext_code.size(controllerAddress)
                      call controllerAddress.'J91I' with:
                           gas gas_remaining wei
                          args caller, address(recipient), amount
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >= 32
                      require 1 == bool(ext_call.return_data[0])
                      if not stor8[caller].field_0:
                          stor8[caller].field_0++
                          if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                              if stor8[address(recipient)].field_0:
                      else:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                              require stor8[caller].field_0 - 1 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                              if not stor8[address(recipient)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require 0 < stor8[address(recipient)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          stor8[caller].field_0++
                          if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
          else:
              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                   gas gas_remaining wei
                  args caller, block.number
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >= 32
              if ext_call.return_data[0] < amount:
                  return 0
              if not controllerAddress:
                  if not stor8[caller].field_0:
                      stor8[caller].field_0++
                      if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                          require stor8[caller].field_0 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                          stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require 0 <= amount
                              else:
                                  if block.number < parentSnapShotBlock:
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 <= block.number:
                                  if stor8[address(recipient)].field_0:
                              else:
                                  if parentTokenAddress:
                  else:
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require 0 <= amount
                              else:
                                  if block.number < parentSnapShotBlock:
                                      require ext_code.size(parentTokenAddress)
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), block.number
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 > block.number:
                                  if parentTokenAddress:
                              else:
                                  if stor8[address(recipient)].field_0:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                      else:
                          stor8[caller].field_0++
                          if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
              else:
                  if ext_code.size(controllerAddress) <= 0:
                      if not stor8[caller].field_0:
                          stor8[caller].field_0++
                          if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                  else:
                                      if block.number < parentSnapShotBlock:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 <= block.number:
                                      if stor8[address(recipient)].field_0:
                                  else:
                                      if parentTokenAddress:
                      else:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                              require stor8[caller].field_0 - 1 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                  else:
                                      if block.number < parentSnapShotBlock:
                                          require ext_code.size(parentTokenAddress)
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), block.number
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                                      if parentTokenAddress:
                                  else:
                                      if stor8[address(recipient)].field_0:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                          else:
                              stor8[caller].field_0++
                              if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                                  require stor8[caller].field_0 < stor8[caller].field_0
                                  stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                                  stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                                  if not stor8[address(recipient)].field_0:
                                      if parentTokenAddress:
                                  else:
                                      require 0 < stor8[address(recipient)].field_0
                                      if stor8[address(recipient)].field_0 > block.number:
                  else:
                      require ext_code.size(controllerAddress)
                      call controllerAddress.'J91I' with:
                           gas gas_remaining wei
                          args caller, address(recipient), amount
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >= 32
                      require 1 == bool(ext_call.return_data[0])
                      if not stor8[caller].field_0:
                          stor8[caller].field_0++
                          if stor8[caller].field_0 > stor8[caller].field_0 + 1:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[caller].field_0 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                          stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                          if not stor8[address(recipient)].field_0:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require 0 < stor8[address(recipient)].field_0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                          if stor8[address(recipient)].field_0:
                              require 0 < stor8[address(recipient)].field_0
                      else:
                          stor8[caller].field_0++
                          if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
  else:
      require 0 < stor8[caller].field_0
      if stor8[caller].field_0 <= block.number:
          if not stor8[caller].field_0:
              if 0 < amount:
                  return 0
              if not controllerAddress:
                  if not stor8[caller].field_0:
                      stor8[caller].field_0++
                      if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                          require stor8[caller].field_0 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                          stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require 0 <= amount
                              else:
                                  if block.number < parentSnapShotBlock:
                                      require ext_code.size(parentTokenAddress)
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), block.number
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 > block.number:
                                  if parentTokenAddress:
                              else:
                                  if stor8[address(recipient)].field_0:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                  else:
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require 0 <= amount
                                  if stor8[address(recipient)].field_0:
                              else:
                                  require ext_code.size(parentTokenAddress)
                                  if block.number >= parentSnapShotBlock:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), parentSnapShotBlock
                                  else:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), block.number
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 > block.number:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                  else:
                                      if block.number < parentSnapShotBlock:
                              else:
                                  if stor8[address(recipient)].field_0:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                      else:
                          stor8[caller].field_0++
                          if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
              else:
                  if ext_code.size(controllerAddress) <= 0:
                      if not stor8[caller].field_0:
                          stor8[caller].field_0++
                          if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                  else:
                                      if block.number < parentSnapShotBlock:
                                          require ext_code.size(parentTokenAddress)
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), block.number
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                                      if parentTokenAddress:
                                  else:
                                      if stor8[address(recipient)].field_0:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                      else:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                              require stor8[caller].field_0 - 1 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                      if stor8[address(recipient)].field_0:
                                  else:
                                      require ext_code.size(parentTokenAddress)
                                      if block.number >= parentSnapShotBlock:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), parentSnapShotBlock
                                      else:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), block.number
                                          if not ext_call.success:
                                              revert with ext_call.return_data[0 len return_data.size]
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                                      if not parentTokenAddress:
                                          require 0 <= amount
                                      else:
                                          if block.number < parentSnapShotBlock:
                                  else:
                                      if stor8[address(recipient)].field_0:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                          else:
                              stor8[caller].field_0++
                              if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                                  require stor8[caller].field_0 < stor8[caller].field_0
                                  stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                                  stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                                  if not stor8[address(recipient)].field_0:
                                      if parentTokenAddress:
                                  else:
                                      require 0 < stor8[address(recipient)].field_0
                                      if stor8[address(recipient)].field_0 > block.number:
                  else:
                      require ext_code.size(controllerAddress)
                      call controllerAddress.'J91I' with:
                           gas gas_remaining wei
                          args caller, address(recipient), amount
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >= 32
                      require 1 == bool(ext_call.return_data[0])
                      if not stor8[caller].field_0:
                          stor8[caller].field_0++
                          if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                              if stor8[address(recipient)].field_0:
                                  require 0 < stor8[address(recipient)].field_0
                      else:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                              require stor8[caller].field_0 - 1 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                          else:
                              stor8[caller].field_0++
                              if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                                  require stor8[caller].field_0 < stor8[caller].field_0
                                  stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                                  stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                                  if stor8[address(recipient)].field_0:
          else:
              require stor8[caller].field_0 - 1 < stor8[caller].field_0
              if block.number >= stor8[caller][stor8[caller].field_0].field_0:
                  require stor8[caller].field_0 - 1 < stor8[caller].field_0
                  if stor8[caller][stor8[caller].field_0].field_0 < amount:
                      return 0
                  if not controllerAddress:
                      if not stor8[caller].field_0:
                          stor8[caller].field_0++
                          if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(stor8[caller][stor8[caller].field_0].field_0 - amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(stor8[caller][stor8[caller].field_0].field_0 - amount)
                          if not stor8[address(recipient)].field_0:
                              if parentTokenAddress:
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 > block.number:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      stor8[caller].field_0++
                      if stor8[caller].field_0 > stor8[caller].field_0 + 1:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[caller].field_0 < stor8[caller].field_0
                      stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                      stor8[caller][stor8[caller].field_0].field_128 = uint128(stor8[caller][stor8[caller].field_0].field_0 - amount)
                      if not stor8[address(recipient)].field_0:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require 0 < stor8[address(recipient)].field_0
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  if ext_code.size(controllerAddress) <= 0:
                      if not stor8[caller].field_0:
                          stor8[caller].field_0++
                          if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(stor8[caller][stor8[caller].field_0].field_0 - amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(stor8[caller][stor8[caller].field_0].field_0 - amount)
                          if not stor8[address(recipient)].field_0:
                              if parentTokenAddress:
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 > block.number:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      stor8[caller].field_0++
                      if stor8[caller].field_0 > stor8[caller].field_0 + 1:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[caller].field_0 < stor8[caller].field_0
                      stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                      stor8[caller][stor8[caller].field_0].field_128 = uint128(stor8[caller][stor8[caller].field_0].field_0 - amount)
                      if not stor8[address(recipient)].field_0:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require 0 < stor8[address(recipient)].field_0
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require ext_code.size(controllerAddress)
                  call controllerAddress.'J91I' with:
                       gas gas_remaining wei
                      args caller, address(recipient), amount
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require 1 == bool(ext_call.return_data[0])
                  if not stor8[caller].field_0:
                      stor8[caller].field_0++
                      if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                          require stor8[caller].field_0 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                          stor8[caller][stor8[caller].field_0].field_128 = uint128(stor8[caller][stor8[caller].field_0].field_0 - amount)
                  else:
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(stor8[caller][stor8[caller].field_0].field_0 - amount)
                          if stor8[address(recipient)].field_0:
                      else:
                          stor8[caller].field_0++
                          if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(stor8[caller][stor8[caller].field_0].field_0 - amount)
              else:
                  require 0 < stor8[caller].field_0
                  if block.number < stor8[caller].field_0:
                      if 0 < amount:
                          return 0
                      if not controllerAddress:
                          if not stor8[caller].field_0:
                              stor8[caller].field_0++
                              if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                                  require stor8[caller].field_0 < stor8[caller].field_0
                                  stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                                  stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                                  if stor8[address(recipient)].field_0:
                                      require 0 < stor8[address(recipient)].field_0
                          else:
                              require stor8[caller].field_0 - 1 < stor8[caller].field_0
                              if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                                  require stor8[caller].field_0 - 1 < stor8[caller].field_0
                                  stor8[caller][stor8[caller].field_0].field_0 = uint128(-amount)
                                  if not stor8[address(recipient)].field_0:
                                      if parentTokenAddress:
                                  else:
                                      require 0 < stor8[address(recipient)].field_0
                                      if stor8[address(recipient)].field_0 > block.number:
                              else:
                                  stor8[caller].field_0++
                                  if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                                      require stor8[caller].field_0 < stor8[caller].field_0
                                      stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                                      stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                                      if stor8[address(recipient)].field_0:
                      else:
                          if ext_code.size(controllerAddress) <= 0:
                              if not stor8[caller].field_0:
                                  stor8[caller].field_0++
                                  if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                                      require stor8[caller].field_0 < stor8[caller].field_0
                                      stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                                      stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                                      if stor8[address(recipient)].field_0:
                                          require 0 < stor8[address(recipient)].field_0
                              else:
                                  require stor8[caller].field_0 - 1 < stor8[caller].field_0
                                  if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                                      stor8[caller][stor8[caller].field_0].field_0 = uint128(-amount)
                                      if not stor8[address(recipient)].field_0:
                                          if parentTokenAddress:
                                      else:
                                          require 0 < stor8[address(recipient)].field_0
                                          if stor8[address(recipient)].field_0 > block.number:
                                  else:
                                      stor8[caller].field_0++
                                      if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                                          require stor8[caller].field_0 < stor8[caller].field_0
                                          stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                                          stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                                          if stor8[address(recipient)].field_0:
                          else:
                              require ext_code.size(controllerAddress)
                              call controllerAddress.'J91I' with:
                                   gas gas_remaining wei
                                  args caller, address(recipient), amount
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require 1 == bool(ext_call.return_data[0])
                              if not stor8[caller].field_0:
                                  stor8[caller].field_0++
                                  if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                                      require stor8[caller].field_0 < stor8[caller].field_0
                                      stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                                      stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                              else:
                                  require stor8[caller].field_0 - 1 < stor8[caller].field_0
                                  if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                                      stor8[caller][stor8[caller].field_0].field_0 = uint128(-amount)
                                  else:
                                      stor8[caller].field_0++
                                      if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                                          require stor8[caller].field_0 < stor8[caller].field_0
                                          stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                                          stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
      else:
          if not parentTokenAddress:
              if 0 < amount:
                  return 0
              if not controllerAddress:
                  if not stor8[caller].field_0:
                      stor8[caller].field_0++
                      if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                          require stor8[caller].field_0 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                          stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require 0 <= amount
                                  if not stor8[address(recipient)].field_0:
                                      stor8[address(recipient)].field_0++
                                  else:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                              else:
                                  require ext_code.size(parentTokenAddress)
                                  if block.number < parentSnapShotBlock:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), block.number
                                  else:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), parentSnapShotBlock
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 <= block.number:
                                  if stor8[address(recipient)].field_0:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require 0 < stor8[address(recipient)].field_0
                              else:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                      if stor8[address(recipient)].field_0:
                                  else:
                                      require ext_code.size(parentTokenAddress)
                                      if block.number >= parentSnapShotBlock:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), parentSnapShotBlock
                                      else:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), block.number
                                          if not ext_call.success:
                                              revert with ext_call.return_data[0 len return_data.size]
                  else:
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require 0 <= amount
                                  if not stor8[address(recipient)].field_0:
                                      stor8[address(recipient)].field_0++
                                  else:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      if stor8[address(recipient)][stor8[address(recipient)].field_0].field_0 >= block.number:
                              else:
                                  require ext_code.size(parentTokenAddress)
                                  if block.number >= parentSnapShotBlock:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), parentSnapShotBlock
                                  else:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), block.number
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 <= block.number:
                                  if not stor8[address(recipient)].field_0:
                                      require 0 <= amount
                                  else:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require 0 < stor8[address(recipient)].field_0
                                      if block.number >= stor8[address(recipient)].field_0:
                              else:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                      if not stor8[address(recipient)].field_0:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require ext_code.size(parentTokenAddress)
                                  if block.number < parentSnapShotBlock:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), block.number
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                                      require return_data.size >= 32
                                  else:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), parentSnapShotBlock
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                      else:
                          stor8[caller].field_0++
                          if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                      if stor8[address(recipient)].field_0:
                                  else:
                                      require ext_code.size(parentTokenAddress)
                                      if block.number >= parentSnapShotBlock:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), parentSnapShotBlock
                                      else:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), block.number
                                          if not ext_call.success:
                                              revert with ext_call.return_data[0 len return_data.size]
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                                      if not parentTokenAddress:
                                          require 0 <= amount
                                      else:
                                          if block.number < parentSnapShotBlock:
                                  else:
                                      if stor8[address(recipient)].field_0:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
              else:
                  if ext_code.size(controllerAddress) <= 0:
                      if not stor8[caller].field_0:
                          stor8[caller].field_0++
                          if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                      if not stor8[address(recipient)].field_0:
                                          stor8[address(recipient)].field_0++
                                      else:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                  else:
                                      require ext_code.size(parentTokenAddress)
                                      if block.number < parentSnapShotBlock:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), block.number
                                      else:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), parentSnapShotBlock
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                                      require return_data.size >= 32
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 <= block.number:
                                      if stor8[address(recipient)].field_0:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                                              require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          require 0 < stor8[address(recipient)].field_0
                                  else:
                                      if not parentTokenAddress:
                                          require 0 <= amount
                                          if stor8[address(recipient)].field_0:
                                      else:
                                          require ext_code.size(parentTokenAddress)
                                          if block.number >= parentSnapShotBlock:
                                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                                   gas gas_remaining wei
                                                  args address(recipient), parentSnapShotBlock
                                          else:
                                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                                   gas gas_remaining wei
                                                  args address(recipient), block.number
                                              if not ext_call.success:
                                                  revert with ext_call.return_data[0 len return_data.size]
                      else:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                              require stor8[caller].field_0 - 1 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                      if not stor8[address(recipient)].field_0:
                                          stor8[address(recipient)].field_0++
                                      else:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          if stor8[address(recipient)][stor8[address(recipient)].field_0].field_0 >= block.number:
                                  else:
                                      require ext_code.size(parentTokenAddress)
                                      if block.number >= parentSnapShotBlock:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), parentSnapShotBlock
                                      else:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), block.number
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                                      require return_data.size >= 32
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 <= block.number:
                                      if not stor8[address(recipient)].field_0:
                                          require 0 <= amount
                                      else:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                                              require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          require 0 < stor8[address(recipient)].field_0
                                          if block.number >= stor8[address(recipient)].field_0:
                                  else:
                                      if not parentTokenAddress:
                                          require 0 <= amount
                                          if not stor8[address(recipient)].field_0:
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require ext_code.size(parentTokenAddress)
                                      if block.number < parentSnapShotBlock:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), block.number
                                          if not ext_call.success:
                                              revert with ext_call.return_data[0 len return_data.size]
                                          require return_data.size >= 32
                                      else:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), parentSnapShotBlock
                                          if not ext_call.success:
                                              revert with ext_call.return_data[0 len return_data.size]
                          else:
                              stor8[caller].field_0++
                              if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                                  require stor8[caller].field_0 < stor8[caller].field_0
                                  stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                                  stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                                  if not stor8[address(recipient)].field_0:
                                      if not parentTokenAddress:
                                          require 0 <= amount
                                          if stor8[address(recipient)].field_0:
                                      else:
                                          require ext_code.size(parentTokenAddress)
                                          if block.number >= parentSnapShotBlock:
                                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                                   gas gas_remaining wei
                                                  args address(recipient), parentSnapShotBlock
                                          else:
                                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                                   gas gas_remaining wei
                                                  args address(recipient), block.number
                                              if not ext_call.success:
                                                  revert with ext_call.return_data[0 len return_data.size]
                                  else:
                                      require 0 < stor8[address(recipient)].field_0
                                      if stor8[address(recipient)].field_0 > block.number:
                                          if not parentTokenAddress:
                                              require 0 <= amount
                                          else:
                                              if block.number < parentSnapShotBlock:
                                      else:
                                          if stor8[address(recipient)].field_0:
                                              require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                              if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                  else:
                      require ext_code.size(controllerAddress)
                      call controllerAddress.'J91I' with:
                           gas gas_remaining wei
                          args caller, address(recipient), amount
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >= 32
                      require 1 == bool(ext_call.return_data[0])
                      if not stor8[caller].field_0:
                          stor8[caller].field_0++
                          if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                  else:
                                      if block.number < parentSnapShotBlock:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 <= block.number:
                                      if stor8[address(recipient)].field_0:
                                  else:
                                      if parentTokenAddress:
                      else:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                              require stor8[caller].field_0 - 1 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                  else:
                                      if block.number < parentSnapShotBlock:
                                          require ext_code.size(parentTokenAddress)
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), block.number
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                                      if parentTokenAddress:
                                  else:
                                      if stor8[address(recipient)].field_0:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                          else:
                              stor8[caller].field_0++
                              if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                                  require stor8[caller].field_0 < stor8[caller].field_0
                                  stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                                  stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                                  if not stor8[address(recipient)].field_0:
                                      if parentTokenAddress:
                                  else:
                                      require 0 < stor8[address(recipient)].field_0
                                      if stor8[address(recipient)].field_0 > block.number:
          else:
              require ext_code.size(parentTokenAddress)
              if block.number < parentSnapShotBlock:
                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                       gas gas_remaining wei
                      args caller, block.number
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  if ext_call.return_data[0] < amount:
                      return 0
                  if not controllerAddress:
                      if not stor8[caller].field_0:
                          stor8[caller].field_0++
                          if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                          if not stor8[address(recipient)].field_0:
                              if parentTokenAddress:
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 > block.number:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      stor8[caller].field_0++
                      if stor8[caller].field_0 > stor8[caller].field_0 + 1:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[caller].field_0 < stor8[caller].field_0
                      stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                      stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                      if not stor8[address(recipient)].field_0:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require 0 < stor8[address(recipient)].field_0
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  if ext_code.size(controllerAddress) <= 0:
                      if not stor8[caller].field_0:
                          stor8[caller].field_0++
                          if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                          if not stor8[address(recipient)].field_0:
                              if parentTokenAddress:
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 > block.number:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      stor8[caller].field_0++
                      if stor8[caller].field_0 > stor8[caller].field_0 + 1:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[caller].field_0 < stor8[caller].field_0
                      stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                      stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                      if not stor8[address(recipient)].field_0:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require 0 < stor8[address(recipient)].field_0
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require ext_code.size(controllerAddress)
                  call controllerAddress.'J91I' with:
                       gas gas_remaining wei
                      args caller, address(recipient), amount
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require 1 == bool(ext_call.return_data[0])
                  if not stor8[caller].field_0:
                      stor8[caller].field_0++
                      if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                          require stor8[caller].field_0 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                          stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                  else:
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                          if stor8[address(recipient)].field_0:
                      else:
                          stor8[caller].field_0++
                          if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
              else:
                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                       gas gas_remaining wei
                      args caller, parentSnapShotBlock
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  if ext_call.return_data[0] < amount:
                      return 0
                  if not controllerAddress:
                      if not stor8[caller].field_0:
                          stor8[caller].field_0++
                          if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                              if stor8[address(recipient)].field_0:
                                  require 0 < stor8[address(recipient)].field_0
                      else:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                              require stor8[caller].field_0 - 1 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                          else:
                              stor8[caller].field_0++
                              if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                                  require stor8[caller].field_0 < stor8[caller].field_0
                                  stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                                  stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                                  if stor8[address(recipient)].field_0:
                  else:
                      if ext_code.size(controllerAddress) <= 0:
                          if not stor8[caller].field_0:
                              stor8[caller].field_0++
                              if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                                  require stor8[caller].field_0 < stor8[caller].field_0
                                  stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                                  stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                                  if stor8[address(recipient)].field_0:
                                      require 0 < stor8[address(recipient)].field_0
                          else:
                              require stor8[caller].field_0 - 1 < stor8[caller].field_0
                              if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                                  require stor8[caller].field_0 - 1 < stor8[caller].field_0
                                  stor8[caller][stor8[caller].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                                  if not stor8[address(recipient)].field_0:
                                      if parentTokenAddress:
                                  else:
                                      require 0 < stor8[address(recipient)].field_0
                                      if stor8[address(recipient)].field_0 > block.number:
                              else:
                                  stor8[caller].field_0++
                                  if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                                      require stor8[caller].field_0 < stor8[caller].field_0
                                      stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                                      stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                                      if stor8[address(recipient)].field_0:
                      else:
                          require ext_code.size(controllerAddress)
                          call controllerAddress.'J91I' with:
                               gas gas_remaining wei
                              args caller, address(recipient), amount
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require 1 == bool(ext_call.return_data[0])
                          if not stor8[caller].field_0:
                              stor8[caller].field_0++
                              if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                                  require stor8[caller].field_0 < stor8[caller].field_0
                                  stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                                  stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                          else:
                              require stor8[caller].field_0 - 1 < stor8[caller].field_0
                              if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                                  require stor8[caller].field_0 - 1 < stor8[caller].field_0
                                  stor8[caller][stor8[caller].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                              else:
                                  stor8[caller].field_0++
                                  if stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                                      require stor8[caller].field_0 < stor8[caller].field_0
                                      stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                                      stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)

def destroyTokens(address _owner, uint256 _amount): # not payable
  require caller == controllerAddress
  if not stor10.length:
      if not parentTokenAddress:
          require 0 >= _amount
          if not stor8[address(_owner)].field_0:
              if parentTokenAddress:
                  require ext_code.size(parentTokenAddress)
                  if block.number < parentSnapShotBlock:
                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                           gas gas_remaining wei
                          args address(_owner), block.number
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >= 32
                      require ext_call.return_data[0] >= _amount
                      if not stor10.length:
                          stor10.length++
                          if stor10.length <= stor10.length + 1:
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(-_amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor10.length - 1 < stor10.length
                      if stor10[stor10.length].field_0 >= block.number:
                          require stor10.length - 1 < stor10.length
                          stor10[stor10.length].field_0 = uint128(-_amount)
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                              if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(ext_call.return_data[0] - _amount)
                              else:
                                  stor8[address(_owner)].field_0++
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      stor10.length++
                      if stor10.length > stor10.length + 1:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor10.length < stor10.length
                      stor10[stor10.length].field_0 = uint128(block.number)
                      stor10[stor10.length].field_128 = uint128(-_amount)
                      if not stor8[address(_owner)].field_0:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                       gas gas_remaining wei
                      args address(_owner), parentSnapShotBlock
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require ext_call.return_data[0] >= _amount
                  if not stor10.length:
                      stor10.length++
                      if stor10.length <= stor10.length + 1:
                          require stor10.length < stor10.length
                          stor10[stor10.length].field_0 = uint128(block.number)
                          stor10[stor10.length].field_128 = uint128(-_amount)
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                  else:
                      require stor10.length - 1 < stor10.length
                      if stor10[stor10.length].field_0 >= block.number:
                          require stor10.length - 1 < stor10.length
                          stor10[stor10.length].field_0 = uint128(-_amount)
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                      else:
                          stor10.length++
                          if stor10.length <= stor10.length + 1:
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(-_amount)
                              if stor8[address(_owner)].field_0:
              else:
                  require 0 >= _amount
                  if not stor10.length:
                      stor10.length++
                      if stor10.length <= stor10.length + 1:
                          require stor10.length < stor10.length
                          stor10[stor10.length].field_0 = uint128(block.number)
                          stor10[stor10.length].field_128 = uint128(-_amount)
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                              if stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                              log Transfer(
                                    address from=_amount,
                                    address to=_owner,
                                    uint256 value=0)
                              return 1
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                              log Transfer(
                                    address from=_amount,
                                    address to=_owner,
                                    uint256 value=0)
                              return 1
                          stor8[address(_owner)].field_0++
                          if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                              log Transfer(
                                    address from=_amount,
                                    address to=_owner,
                                    uint256 value=0)
                  else:
                      require stor10.length - 1 < stor10.length
                      if stor10[stor10.length].field_0 >= block.number:
                          require stor10.length - 1 < stor10.length
                          stor10[stor10.length].field_0 = uint128(-_amount)
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                              if stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                              else:
                                  stor8[address(_owner)].field_0++
                                  if stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                          log Transfer(
                                address from=_amount,
                                address to=_owner,
                                uint256 value=0)
                          return 1
                      stor10.length++
                      if stor10.length <= stor10.length + 1:
                          require stor10.length < stor10.length
                          stor10[stor10.length].field_0 = uint128(block.number)
                          stor10[stor10.length].field_128 = uint128(-_amount)
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                              if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                                  log Transfer(
                                        address from=_amount,
                                        address to=_owner,
                                        uint256 value=0)
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                                  log Transfer(
                                        address from=_amount,
                                        address to=_owner,
                                        uint256 value=0)
                                  return 1
                              stor8[address(_owner)].field_0++
                              if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
          else:
              require 0 < stor8[address(_owner)].field_0
              if stor8[address(_owner)].field_0 <= block.number:
                  if not stor8[address(_owner)].field_0:
                      require 0 >= _amount
                      if not stor10.length:
                          stor10.length++
                          if stor10.length <= stor10.length + 1:
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(-_amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                                  if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                                  else:
                                      stor8[address(_owner)].field_0++
                      else:
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(-_amount)
                              if stor8[address(_owner)].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                                  else:
                                      stor8[address(_owner)].field_0++
                              else:
                                  stor8[address(_owner)].field_0++
                                  if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                      require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(-_amount)
                                  if not stor8[address(_owner)].field_0:
                                      stor8[address(_owner)].field_0++
                                  else:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                  else:
                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                      if block.number < stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                          require 0 < stor8[address(_owner)].field_0
                          if block.number < stor8[address(_owner)].field_0:
                              require 0 >= _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(-_amount)
                                      if stor8[address(_owner)].field_0:
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(-_amount)
                                      if not stor8[address(_owner)].field_0:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(-_amount)
                      else:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length > stor10.length + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(-_amount)
                              if not stor8[address(_owner)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(-_amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(-_amount)
              else:
                  if not parentTokenAddress:
                      require 0 >= _amount
                      if not stor10.length:
                          stor10.length++
                          if stor10.length <= stor10.length + 1:
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(-_amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                                  if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                      require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                                      log Transfer(
                                            address from=_amount,
                                            address to=_owner,
                                            uint256 value=0)
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                                      log Transfer(
                                            address from=_amount,
                                            address to=_owner,
                                            uint256 value=0)
                                      return 1
                                  stor8[address(_owner)].field_0++
                                  if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                      require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                      else:
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(-_amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                                  if stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                                  log Transfer(
                                        address from=_amount,
                                        address to=_owner,
                                        uint256 value=0)
                                  return 1
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                                  log Transfer(
                                        address from=_amount,
                                        address to=_owner,
                                        uint256 value=0)
                                  return 1
                              stor8[address(_owner)].field_0++
                              if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(-_amount)
                                  if stor8[address(_owner)].field_0:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                                      else:
                                          stor8[address(_owner)].field_0++
                                  else:
                                      stor8[address(_owner)].field_0++
                                      if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                          require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                  else:
                      require ext_code.size(parentTokenAddress)
                      if block.number >= parentSnapShotBlock:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining wei
                              args address(_owner), parentSnapShotBlock
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require ext_call.return_data[0] >= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(-_amount)
                                  if stor8[address(_owner)].field_0:
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(-_amount)
                                  if not stor8[address(_owner)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(-_amount)
                      else:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining wei
                              args address(_owner), block.number
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require ext_call.return_data[0] >= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length > stor10.length + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(-_amount)
                              if not stor8[address(_owner)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(-_amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(-_amount)
      else:
          require ext_code.size(parentTokenAddress)
          if block.number >= parentSnapShotBlock:
              call parentTokenAddress.totalSupplyAt(uint256 snapshotId) with:
                   gas gas_remaining wei
                  args parentSnapShotBlock
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >= 32
              require ext_call.return_data[0] >= _amount
              if not stor8[address(_owner)].field_0:
                  if not parentTokenAddress:
                      require 0 >= _amount
                      if not stor10.length:
                          stor10.length++
                          if stor10.length <= stor10.length + 1:
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] - _amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                      else:
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] - _amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] - _amount)
                                  if stor8[address(_owner)].field_0:
                  else:
                      require ext_code.size(parentTokenAddress)
                      if block.number >= parentSnapShotBlock:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining wei
                              args address(_owner), parentSnapShotBlock
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require ext_call.return_data[0] >= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] - _amount)
                              else:
                                  stor10.length++
                      else:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining wei
                              args address(_owner), block.number
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require ext_call.return_data[0] >= _amount
                          if stor10.length:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] - _amount)
                              else:
                                  stor10.length++
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] - _amount)
              else:
                  require 0 < stor8[address(_owner)].field_0
                  if stor8[address(_owner)].field_0 <= block.number:
                      if not stor8[address(_owner)].field_0:
                          require 0 >= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] - _amount)
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] - _amount)
                              else:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                      else:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if block.number < stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                              require 0 < stor8[address(_owner)].field_0
                              if block.number < stor8[address(_owner)].field_0:
                                  require 0 >= _amount
                                  if not stor10.length:
                                      stor10.length++
                                  else:
                                      require stor10.length - 1 < stor10.length
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= _amount
                              if not stor10.length:
                                  stor10.length++
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                  else:
                      if not parentTokenAddress:
                          require 0 >= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] - _amount)
                                  if stor8[address(_owner)].field_0:
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] - _amount)
                                  if not stor8[address(_owner)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] - _amount)
                      else:
                          require ext_code.size(parentTokenAddress)
                          if block.number >= parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), parentSnapShotBlock
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] >= _amount
                              if not stor10.length:
                                  stor10.length++
                              else:
                                  require stor10.length - 1 < stor10.length
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), block.number
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] >= _amount
                              if not stor10.length:
                                  stor10.length++
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
          else:
              call parentTokenAddress.totalSupplyAt(uint256 snapshotId) with:
                   gas gas_remaining wei
                  args block.number
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >= 32
              require ext_call.return_data[0] >= _amount
              if not stor8[address(_owner)].field_0:
                  if not parentTokenAddress:
                      require 0 >= _amount
                      if not stor10.length:
                          stor10.length++
                          if stor10.length <= stor10.length + 1:
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] - _amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor10.length - 1 < stor10.length
                      if stor10[stor10.length].field_0 >= block.number:
                          require stor10.length - 1 < stor10.length
                          stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] - _amount)
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                              if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                              else:
                                  stor8[address(_owner)].field_0++
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      stor10.length++
                      if stor10.length > stor10.length + 1:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor10.length < stor10.length
                      stor10[stor10.length].field_0 = uint128(block.number)
                      stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] - _amount)
                      if not stor8[address(_owner)].field_0:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require ext_code.size(parentTokenAddress)
                  if block.number < parentSnapShotBlock:
                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                           gas gas_remaining wei
                          args address(_owner), block.number
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >= 32
                      require ext_call.return_data[0] >= _amount
                      if not stor10.length:
                          stor10.length++
                          if stor10.length <= stor10.length + 1:
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] - _amount)
                      else:
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] - _amount)
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                  else:
                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                           gas gas_remaining wei
                          args address(_owner), parentSnapShotBlock
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >= 32
                      require ext_call.return_data[0] >= _amount
                      if stor10.length:
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] - _amount)
                          else:
                              stor10.length++
                      else:
                          stor10.length++
                          if stor10.length <= stor10.length + 1:
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] - _amount)
              else:
                  require 0 < stor8[address(_owner)].field_0
                  if stor8[address(_owner)].field_0 <= block.number:
                      if stor8[address(_owner)].field_0:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if block.number < stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                              require 0 < stor8[address(_owner)].field_0
                              if block.number < stor8[address(_owner)].field_0:
                                  require 0 >= _amount
                                  if not stor10.length:
                                      stor10.length++
                                  else:
                                      require stor10.length - 1 < stor10.length
                                      if stor10[stor10.length].field_0 >= block.number:
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] - _amount)
                                  else:
                                      stor10.length++
                      else:
                          require 0 >= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] - _amount)
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] - _amount)
                              else:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] - _amount)
                  else:
                      if not parentTokenAddress:
                          require 0 >= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length > stor10.length + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] - _amount)
                              if not stor8[address(_owner)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] - _amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] - _amount)
                      else:
                          require ext_code.size(parentTokenAddress)
                          if block.number >= parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), parentSnapShotBlock
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] >= _amount
                              if not stor10.length:
                                  stor10.length++
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), block.number
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] >= _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] - _amount)
                                  else:
                                      stor10.length++
  else:
      require 0 < stor10.length
      if uint128(stor10.field_0) <= block.number:
          if not stor10.length:
              require 0 >= _amount
              if not stor8[address(_owner)].field_0:
                  if not parentTokenAddress:
                      require 0 >= _amount
                      if not stor10.length:
                          stor10.length++
                          if stor10.length <= stor10.length + 1:
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(-_amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                                  if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                                  else:
                                      stor8[address(_owner)].field_0++
                      else:
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(-_amount)
                              if stor8[address(_owner)].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                                  else:
                                      stor8[address(_owner)].field_0++
                              else:
                                  stor8[address(_owner)].field_0++
                                  if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                      require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(-_amount)
                                  if not stor8[address(_owner)].field_0:
                                      stor8[address(_owner)].field_0++
                                  else:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                  else:
                      require ext_code.size(parentTokenAddress)
                      if block.number >= parentSnapShotBlock:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining wei
                              args address(_owner), parentSnapShotBlock
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require ext_call.return_data[0] >= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(-_amount)
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(-_amount)
                              else:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                      else:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining wei
                              args address(_owner), block.number
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require ext_call.return_data[0] >= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(-_amount)
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(-_amount)
                              else:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(-_amount)
              else:
                  require 0 < stor8[address(_owner)].field_0
                  if stor8[address(_owner)].field_0 <= block.number:
                      if not stor8[address(_owner)].field_0:
                          require 0 >= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(-_amount)
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(-_amount)
                                  if stor8[address(_owner)].field_0:
                              else:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(-_amount)
                      else:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if block.number < stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                              require 0 < stor8[address(_owner)].field_0
                              if block.number < stor8[address(_owner)].field_0:
                                  require 0 >= _amount
                                  if not stor10.length:
                                      stor10.length++
                                      if stor10.length <= stor10.length + 1:
                                  else:
                                      require stor10.length - 1 < stor10.length
                                      if stor10[stor10.length].field_0 >= block.number:
                                          require stor10.length - 1 < stor10.length
                                          stor10[stor10.length].field_0 = uint128(-_amount)
                                      else:
                                          stor10.length++
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= _amount
                              if stor10.length:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(-_amount)
                                  else:
                                      stor10.length++
                              else:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(-_amount)
                  else:
                      if not parentTokenAddress:
                          require 0 >= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(-_amount)
                                  if not stor8[address(_owner)].field_0:
                                      stor8[address(_owner)].field_0++
                                  else:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(-_amount)
                                  if not stor8[address(_owner)].field_0:
                                      stor8[address(_owner)].field_0++
                                  else:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                              else:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(-_amount)
                                      if stor8[address(_owner)].field_0:
                      else:
                          require ext_code.size(parentTokenAddress)
                          if block.number >= parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), parentSnapShotBlock
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] >= _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(-_amount)
                                  else:
                                      stor10.length++
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), block.number
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] >= _amount
                              if stor10.length:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(-_amount)
                                  else:
                                      stor10.length++
                              else:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(-_amount)
          else:
              require stor10.length - 1 < stor10.length
              if block.number >= stor10[stor10.length].field_0:
                  require stor10.length - 1 < stor10.length
                  require stor10[stor10.length].field_0 >= _amount
                  if not stor8[address(_owner)].field_0:
                      if not parentTokenAddress:
                          require 0 >= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length > stor10.length + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(stor10[stor10.length].field_0 - _amount)
                              if not stor8[address(_owner)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(stor10[stor10.length].field_0 - _amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(stor10[stor10.length].field_0 - _amount)
                      else:
                          require ext_code.size(parentTokenAddress)
                          if block.number >= parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), parentSnapShotBlock
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] >= _amount
                              if not stor10.length:
                                  stor10.length++
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), block.number
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] >= _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(stor10[stor10.length].field_0 - _amount)
                                  else:
                                      stor10.length++
                  else:
                      require 0 < stor8[address(_owner)].field_0
                      if stor8[address(_owner)].field_0 <= block.number:
                          if stor8[address(_owner)].field_0:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if block.number < stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                                  require 0 < stor8[address(_owner)].field_0
                                  if block.number >= stor8[address(_owner)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require 0 >= _amount
                                  if not stor10.length:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor10.length - 1 < stor10.length
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= _amount
                              if not stor10.length:
                                  stor10.length++
                              else:
                                  require stor10.length - 1 < stor10.length
                          else:
                              require 0 >= _amount
                              if stor10.length:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(stor10[stor10.length].field_0 - _amount)
                                  else:
                                      stor10.length++
                              else:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(stor10[stor10.length].field_0 - _amount)
                      else:
                          if not parentTokenAddress:
                              require 0 >= _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(stor10[stor10.length].field_0 - _amount)
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(stor10[stor10.length].field_0 - _amount)
                                      if stor8[address(_owner)].field_0:
                                  else:
                                      stor10.length++
                                      if stor10.length <= stor10.length + 1:
                                          require stor10.length < stor10.length
                                          stor10[stor10.length].field_0 = uint128(block.number)
                                          stor10[stor10.length].field_128 = uint128(stor10[stor10.length].field_0 - _amount)
                          else:
                              require ext_code.size(parentTokenAddress)
                              if block.number >= parentSnapShotBlock:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining wei
                                      args address(_owner), parentSnapShotBlock
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                                  require ext_call.return_data[0] >= _amount
                                  if not stor10.length:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor10.length - 1 < stor10.length
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), block.number
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] >= _amount
                              if not stor10.length:
                                  stor10.length++
                              else:
                                  require stor10.length - 1 < stor10.length
              else:
                  require 0 < stor10.length
                  if block.number < uint128(stor10.field_0):
                      require 0 >= _amount
                      if not stor8[address(_owner)].field_0:
                          if not parentTokenAddress:
                              require 0 >= _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(-_amount)
                                      if stor8[address(_owner)].field_0:
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(-_amount)
                                      if not stor8[address(_owner)].field_0:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(-_amount)
                          else:
                              require ext_code.size(parentTokenAddress)
                              if block.number >= parentSnapShotBlock:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining wei
                                      args address(_owner), parentSnapShotBlock
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                                  require ext_call.return_data[0] >= _amount
                                  if not stor10.length:
                                      stor10.length++
                                  else:
                                      require stor10.length - 1 < stor10.length
                              else:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining wei
                                      args address(_owner), block.number
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                                  require ext_call.return_data[0] >= _amount
                                  if not stor10.length:
                                      stor10.length++
                                  else:
                                      require stor10.length - 1 < stor10.length
                                      if stor10[stor10.length].field_0 >= block.number:
                      else:
                          require 0 < stor8[address(_owner)].field_0
                          if stor8[address(_owner)].field_0 <= block.number:
                              if not stor8[address(_owner)].field_0:
                                  require 0 >= _amount
                                  if not stor10.length:
                                      stor10.length++
                                      if stor10.length <= stor10.length + 1:
                                  else:
                                      require stor10.length - 1 < stor10.length
                                      if stor10[stor10.length].field_0 >= block.number:
                                          require stor10.length - 1 < stor10.length
                                          stor10[stor10.length].field_0 = uint128(-_amount)
                                      else:
                                          stor10.length++
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if block.number >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= _amount
                                      if not stor10.length:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require stor10.length - 1 < stor10.length
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require 0 < stor8[address(_owner)].field_0
                                  if block.number < stor8[address(_owner)].field_0:
                                      require 0 >= _amount
                                      if stor10.length:
                          else:
                              if parentTokenAddress:
                                  require ext_code.size(parentTokenAddress)
                                  if block.number < parentSnapShotBlock:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(_owner), block.number
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                                      require return_data.size >= 32
                                      require ext_call.return_data[0] >= _amount
                                      if not stor10.length:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require stor10.length - 1 < stor10.length
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining wei
                                      args address(_owner), parentSnapShotBlock
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                                  require ext_call.return_data[0] >= _amount
                                  if stor10.length:
                              else:
                                  require 0 >= _amount
                                  if not stor10.length:
                                      stor10.length++
                                      if stor10.length <= stor10.length + 1:
                                          require stor10.length < stor10.length
                                          stor10[stor10.length].field_0 = uint128(block.number)
                                          stor10[stor10.length].field_128 = uint128(-_amount)
                                  else:
                                      require stor10.length - 1 < stor10.length
                                      if stor10[stor10.length].field_0 >= block.number:
                                          require stor10.length - 1 < stor10.length
                                          stor10[stor10.length].field_0 = uint128(-_amount)
                                      else:
                                          stor10.length++
                                          if stor10.length <= stor10.length + 1:
                                              require stor10.length < stor10.length
                                              stor10[stor10.length].field_0 = uint128(block.number)
                                              stor10[stor10.length].field_128 = uint128(-_amount)
      else:
          if not parentTokenAddress:
              require 0 >= _amount
              if not stor8[address(_owner)].field_0:
                  if not parentTokenAddress:
                      require 0 >= _amount
                      if not stor10.length:
                          stor10.length++
                          if stor10.length <= stor10.length + 1:
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(-_amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                                  if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                      require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                                      log Transfer(
                                            address from=_amount,
                                            address to=_owner,
                                            uint256 value=0)
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                                      log Transfer(
                                            address from=_amount,
                                            address to=_owner,
                                            uint256 value=0)
                                      return 1
                                  stor8[address(_owner)].field_0++
                                  if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                      require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                      else:
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(-_amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                                  if stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                                  log Transfer(
                                        address from=_amount,
                                        address to=_owner,
                                        uint256 value=0)
                                  return 1
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                                  log Transfer(
                                        address from=_amount,
                                        address to=_owner,
                                        uint256 value=0)
                                  return 1
                              stor8[address(_owner)].field_0++
                              if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(-_amount)
                                  if stor8[address(_owner)].field_0:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                                      else:
                                          stor8[address(_owner)].field_0++
                                  else:
                                      stor8[address(_owner)].field_0++
                                      if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                          require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                  else:
                      require ext_code.size(parentTokenAddress)
                      if block.number >= parentSnapShotBlock:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining wei
                              args address(_owner), parentSnapShotBlock
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require ext_call.return_data[0] >= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(-_amount)
                                  if stor8[address(_owner)].field_0:
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(-_amount)
                                  if not stor8[address(_owner)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(-_amount)
                      else:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining wei
                              args address(_owner), block.number
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require ext_call.return_data[0] >= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length > stor10.length + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(-_amount)
                              if not stor8[address(_owner)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(-_amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(-_amount)
              else:
                  require 0 < stor8[address(_owner)].field_0
                  if stor8[address(_owner)].field_0 <= block.number:
                      if not stor8[address(_owner)].field_0:
                          require 0 >= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(-_amount)
                                  if not stor8[address(_owner)].field_0:
                                      stor8[address(_owner)].field_0++
                                  else:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(-_amount)
                                  if not stor8[address(_owner)].field_0:
                                      stor8[address(_owner)].field_0++
                                  else:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                              else:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(-_amount)
                                      if stor8[address(_owner)].field_0:
                      else:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if block.number >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(-_amount)
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(-_amount)
                                      if stor8[address(_owner)].field_0:
                                  else:
                                      stor10.length++
                                      if stor10.length <= stor10.length + 1:
                                          require stor10.length < stor10.length
                                          stor10[stor10.length].field_0 = uint128(block.number)
                                          stor10[stor10.length].field_128 = uint128(-_amount)
                          else:
                              require 0 < stor8[address(_owner)].field_0
                              if block.number < stor8[address(_owner)].field_0:
                                  require 0 >= _amount
                                  if not stor10.length:
                                      stor10.length++
                                      if stor10.length <= stor10.length + 1:
                                          require stor10.length < stor10.length
                                          stor10[stor10.length].field_0 = uint128(block.number)
                                          stor10[stor10.length].field_128 = uint128(-_amount)
                                  else:
                                      require stor10.length - 1 < stor10.length
                                      if stor10[stor10.length].field_0 >= block.number:
                                          require stor10.length - 1 < stor10.length
                                          stor10[stor10.length].field_0 = uint128(-_amount)
                                      else:
                                          stor10.length++
                                          if stor10.length <= stor10.length + 1:
                                              require stor10.length < stor10.length
                                              stor10[stor10.length].field_0 = uint128(block.number)
                                              stor10[stor10.length].field_128 = uint128(-_amount)
                  else:
                      if not parentTokenAddress:
                          require 0 >= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(-_amount)
                                  if stor8[address(_owner)].field_0:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                                      else:
                                          stor8[address(_owner)].field_0++
                                  else:
                                      stor8[address(_owner)].field_0++
                                      if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                          require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(-_amount)
                                  if not stor8[address(_owner)].field_0:
                                      stor8[address(_owner)].field_0++
                                      if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                          require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                                  else:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                                          log Transfer(
                                                address from=_amount,
                                                address to=_owner,
                                                uint256 value=0)
                                      else:
                                          stor8[address(_owner)].field_0++
                                          if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                              else:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(-_amount)
                                      if not stor8[address(_owner)].field_0:
                                          stor8[address(_owner)].field_0++
                                      else:
                                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                          if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                      else:
                          require ext_code.size(parentTokenAddress)
                          if block.number < parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), block.number
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] >= _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(-_amount)
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(-_amount)
                                      if stor8[address(_owner)].field_0:
                                  else:
                                      stor10.length++
                                      if stor10.length <= stor10.length + 1:
                                          require stor10.length < stor10.length
                                          stor10[stor10.length].field_0 = uint128(block.number)
                                          stor10[stor10.length].field_128 = uint128(-_amount)
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), parentSnapShotBlock
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] >= _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(-_amount)
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(-_amount)
                                  else:
                                      stor10.length++
                                      if stor10.length <= stor10.length + 1:
                                          require stor10.length < stor10.length
                                          stor10[stor10.length].field_0 = uint128(block.number)
                                          stor10[stor10.length].field_128 = uint128(-_amount)
          else:
              require ext_code.size(parentTokenAddress)
              if block.number < parentSnapShotBlock:
                  call parentTokenAddress.totalSupplyAt(uint256 snapshotId) with:
                       gas gas_remaining wei
                      args block.number
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require ext_call.return_data[0] >= _amount
                  if not stor8[address(_owner)].field_0:
                      if not parentTokenAddress:
                          require 0 >= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length > stor10.length + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] - _amount)
                              if not stor8[address(_owner)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] - _amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] - _amount)
                      else:
                          require ext_code.size(parentTokenAddress)
                          if block.number >= parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), parentSnapShotBlock
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] >= _amount
                              if not stor10.length:
                                  stor10.length++
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), block.number
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] >= _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] - _amount)
                                  else:
                                      stor10.length++
                  else:
                      require 0 < stor8[address(_owner)].field_0
                      if stor8[address(_owner)].field_0 <= block.number:
                          if stor8[address(_owner)].field_0:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if block.number < stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                                  require 0 < stor8[address(_owner)].field_0
                                  if block.number >= stor8[address(_owner)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require 0 >= _amount
                                  if not stor10.length:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor10.length - 1 < stor10.length
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= _amount
                              if not stor10.length:
                                  stor10.length++
                              else:
                                  require stor10.length - 1 < stor10.length
                          else:
                              require 0 >= _amount
                              if stor10.length:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] - _amount)
                                  else:
                                      stor10.length++
                              else:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] - _amount)
                      else:
                          if not parentTokenAddress:
                              require 0 >= _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] - _amount)
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] - _amount)
                                      if stor8[address(_owner)].field_0:
                                  else:
                                      stor10.length++
                                      if stor10.length <= stor10.length + 1:
                                          require stor10.length < stor10.length
                                          stor10[stor10.length].field_0 = uint128(block.number)
                                          stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] - _amount)
                          else:
                              require ext_code.size(parentTokenAddress)
                              if block.number >= parentSnapShotBlock:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining wei
                                      args address(_owner), parentSnapShotBlock
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                                  require ext_call.return_data[0] >= _amount
                                  if not stor10.length:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor10.length - 1 < stor10.length
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), block.number
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] >= _amount
                              if not stor10.length:
                                  stor10.length++
                              else:
                                  require stor10.length - 1 < stor10.length
              else:
                  call parentTokenAddress.totalSupplyAt(uint256 snapshotId) with:
                       gas gas_remaining wei
                      args parentSnapShotBlock
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require ext_call.return_data[0] >= _amount
                  if not stor8[address(_owner)].field_0:
                      if not parentTokenAddress:
                          require 0 >= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] - _amount)
                                  if stor8[address(_owner)].field_0:
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] - _amount)
                                  if not stor8[address(_owner)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] - _amount)
                      else:
                          require ext_code.size(parentTokenAddress)
                          if block.number >= parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), parentSnapShotBlock
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] >= _amount
                              if not stor10.length:
                                  stor10.length++
                              else:
                                  require stor10.length - 1 < stor10.length
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), block.number
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] >= _amount
                              if not stor10.length:
                                  stor10.length++
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                  else:
                      require 0 < stor8[address(_owner)].field_0
                      if stor8[address(_owner)].field_0 <= block.number:
                          if not stor8[address(_owner)].field_0:
                              require 0 >= _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] - _amount)
                                  else:
                                      stor10.length++
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if block.number >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= _amount
                                  if not stor10.length:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor10.length - 1 < stor10.length
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require 0 < stor8[address(_owner)].field_0
                              if block.number < stor8[address(_owner)].field_0:
                                  require 0 >= _amount
                                  if stor10.length:
                      else:
                          if parentTokenAddress:
                              require ext_code.size(parentTokenAddress)
                              if block.number < parentSnapShotBlock:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining wei
                                      args address(_owner), block.number
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                                  require ext_call.return_data[0] >= _amount
                                  if not stor10.length:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor10.length - 1 < stor10.length
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), parentSnapShotBlock
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] >= _amount
                              if stor10.length:
                          else:
                              require 0 >= _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] - _amount)
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] - _amount)
                                  else:
                                      stor10.length++
                                      if stor10.length <= stor10.length + 1:
                                          require stor10.length < stor10.length
                                          stor10[stor10.length].field_0 = uint128(block.number)
                                          stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] - _amount)
  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)

def generateTokens(address _owner, uint256 _amount): # not payable
  require caller == controllerAddress
  if not stor10.length:
      if not parentTokenAddress:
          require 0 <= _amount
          if not stor8[address(_owner)].field_0:
              if parentTokenAddress:
                  require ext_code.size(parentTokenAddress)
                  if block.number < parentSnapShotBlock:
                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                           gas gas_remaining wei
                          args address(_owner), block.number
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >= 32
                      require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                      if not stor10.length:
                          stor10.length++
                          if stor10.length <= stor10.length + 1:
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(_amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor10.length - 1 < stor10.length
                      if stor10[stor10.length].field_0 >= block.number:
                          require stor10.length - 1 < stor10.length
                          stor10[stor10.length].field_0 = uint128(_amount)
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                              if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount + ext_call.return_data[0])
                              else:
                                  stor8[address(_owner)].field_0++
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      stor10.length++
                      if stor10.length > stor10.length + 1:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor10.length < stor10.length
                      stor10[stor10.length].field_0 = uint128(block.number)
                      stor10[stor10.length].field_128 = uint128(_amount)
                      if not stor8[address(_owner)].field_0:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                       gas gas_remaining wei
                      args address(_owner), parentSnapShotBlock
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                  if not stor10.length:
                      stor10.length++
                      if stor10.length <= stor10.length + 1:
                          require stor10.length < stor10.length
                          stor10[stor10.length].field_0 = uint128(block.number)
                          stor10[stor10.length].field_128 = uint128(_amount)
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                  else:
                      require stor10.length - 1 < stor10.length
                      if stor10[stor10.length].field_0 >= block.number:
                          require stor10.length - 1 < stor10.length
                          stor10[stor10.length].field_0 = uint128(_amount)
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                      else:
                          stor10.length++
                          if stor10.length <= stor10.length + 1:
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(_amount)
                              if stor8[address(_owner)].field_0:
              else:
                  require 0 <= _amount
                  if not stor10.length:
                      stor10.length++
                      if stor10.length <= stor10.length + 1:
                          require stor10.length < stor10.length
                          stor10[stor10.length].field_0 = uint128(block.number)
                          stor10[stor10.length].field_128 = uint128(_amount)
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                              if stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                              log Transfer(
                                    address from=_amount,
                                    address to=0,
                                    uint256 value=_owner)
                              return 1
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                              log Transfer(
                                    address from=_amount,
                                    address to=0,
                                    uint256 value=_owner)
                              return 1
                          stor8[address(_owner)].field_0++
                          if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                              log Transfer(
                                    address from=_amount,
                                    address to=0,
                                    uint256 value=_owner)
                  else:
                      require stor10.length - 1 < stor10.length
                      if stor10[stor10.length].field_0 >= block.number:
                          require stor10.length - 1 < stor10.length
                          stor10[stor10.length].field_0 = uint128(_amount)
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                              if stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                              else:
                                  stor8[address(_owner)].field_0++
                                  if stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                          log Transfer(
                                address from=_amount,
                                address to=0,
                                uint256 value=_owner)
                          return 1
                      stor10.length++
                      if stor10.length <= stor10.length + 1:
                          require stor10.length < stor10.length
                          stor10[stor10.length].field_0 = uint128(block.number)
                          stor10[stor10.length].field_128 = uint128(_amount)
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                              if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                                  log Transfer(
                                        address from=_amount,
                                        address to=0,
                                        uint256 value=_owner)
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                                  log Transfer(
                                        address from=_amount,
                                        address to=0,
                                        uint256 value=_owner)
                                  return 1
                              stor8[address(_owner)].field_0++
                              if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
          else:
              require 0 < stor8[address(_owner)].field_0
              if stor8[address(_owner)].field_0 <= block.number:
                  if not stor8[address(_owner)].field_0:
                      require 0 <= _amount
                      if not stor10.length:
                          stor10.length++
                          if stor10.length <= stor10.length + 1:
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(_amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                                  if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                                  else:
                                      stor8[address(_owner)].field_0++
                      else:
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(_amount)
                              if stor8[address(_owner)].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                                  else:
                                      stor8[address(_owner)].field_0++
                              else:
                                  stor8[address(_owner)].field_0++
                                  if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                      require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(_amount)
                                  if not stor8[address(_owner)].field_0:
                                      stor8[address(_owner)].field_0++
                                  else:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                  else:
                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                      if block.number < stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                          require 0 < stor8[address(_owner)].field_0
                          if block.number < stor8[address(_owner)].field_0:
                              require 0 <= _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(_amount)
                                      if stor8[address(_owner)].field_0:
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(_amount)
                                      if not stor8[address(_owner)].field_0:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(_amount)
                      else:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 <= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 + _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length > stor10.length + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(_amount)
                              if not stor8[address(_owner)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(_amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(_amount)
              else:
                  if not parentTokenAddress:
                      require 0 <= _amount
                      if not stor10.length:
                          stor10.length++
                          if stor10.length <= stor10.length + 1:
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(_amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                                  if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                      require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                                      log Transfer(
                                            address from=_amount,
                                            address to=0,
                                            uint256 value=_owner)
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                                      log Transfer(
                                            address from=_amount,
                                            address to=0,
                                            uint256 value=_owner)
                                      return 1
                                  stor8[address(_owner)].field_0++
                                  if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                      require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                      else:
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(_amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                                  if stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                                  log Transfer(
                                        address from=_amount,
                                        address to=0,
                                        uint256 value=_owner)
                                  return 1
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                                  log Transfer(
                                        address from=_amount,
                                        address to=0,
                                        uint256 value=_owner)
                                  return 1
                              stor8[address(_owner)].field_0++
                              if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(_amount)
                                  if stor8[address(_owner)].field_0:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                                      else:
                                          stor8[address(_owner)].field_0++
                                  else:
                                      stor8[address(_owner)].field_0++
                                      if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                          require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                  else:
                      require ext_code.size(parentTokenAddress)
                      if block.number >= parentSnapShotBlock:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining wei
                              args address(_owner), parentSnapShotBlock
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(_amount)
                                  if stor8[address(_owner)].field_0:
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(_amount)
                                  if not stor8[address(_owner)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(_amount)
                      else:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining wei
                              args address(_owner), block.number
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length > stor10.length + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(_amount)
                              if not stor8[address(_owner)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(_amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(_amount)
      else:
          require ext_code.size(parentTokenAddress)
          if block.number >= parentSnapShotBlock:
              call parentTokenAddress.totalSupplyAt(uint256 snapshotId) with:
                   gas gas_remaining wei
                  args parentSnapShotBlock
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >= 32
              require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
              if not stor8[address(_owner)].field_0:
                  if not parentTokenAddress:
                      require 0 <= _amount
                      if not stor10.length:
                          stor10.length++
                          if stor10.length <= stor10.length + 1:
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] + _amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                      else:
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] + _amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] + _amount)
                                  if stor8[address(_owner)].field_0:
                  else:
                      require ext_code.size(parentTokenAddress)
                      if block.number >= parentSnapShotBlock:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining wei
                              args address(_owner), parentSnapShotBlock
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] + _amount)
                              else:
                                  stor10.length++
                      else:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining wei
                              args address(_owner), block.number
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                          if stor10.length:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] + _amount)
                              else:
                                  stor10.length++
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] + _amount)
              else:
                  require 0 < stor8[address(_owner)].field_0
                  if stor8[address(_owner)].field_0 <= block.number:
                      if not stor8[address(_owner)].field_0:
                          require 0 <= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] + _amount)
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] + _amount)
                              else:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                      else:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if block.number < stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                              require 0 < stor8[address(_owner)].field_0
                              if block.number < stor8[address(_owner)].field_0:
                                  require 0 <= _amount
                                  if not stor10.length:
                                      stor10.length++
                                  else:
                                      require stor10.length - 1 < stor10.length
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 <= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 + _amount
                              if not stor10.length:
                                  stor10.length++
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                  else:
                      if not parentTokenAddress:
                          require 0 <= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] + _amount)
                                  if stor8[address(_owner)].field_0:
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] + _amount)
                                  if not stor8[address(_owner)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] + _amount)
                      else:
                          require ext_code.size(parentTokenAddress)
                          if block.number >= parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), parentSnapShotBlock
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                              if not stor10.length:
                                  stor10.length++
                              else:
                                  require stor10.length - 1 < stor10.length
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), block.number
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                              if not stor10.length:
                                  stor10.length++
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
          else:
              call parentTokenAddress.totalSupplyAt(uint256 snapshotId) with:
                   gas gas_remaining wei
                  args block.number
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >= 32
              require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
              if not stor8[address(_owner)].field_0:
                  if not parentTokenAddress:
                      require 0 <= _amount
                      if not stor10.length:
                          stor10.length++
                          if stor10.length <= stor10.length + 1:
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] + _amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor10.length - 1 < stor10.length
                      if stor10[stor10.length].field_0 >= block.number:
                          require stor10.length - 1 < stor10.length
                          stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] + _amount)
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                              if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                              else:
                                  stor8[address(_owner)].field_0++
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      stor10.length++
                      if stor10.length > stor10.length + 1:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor10.length < stor10.length
                      stor10[stor10.length].field_0 = uint128(block.number)
                      stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] + _amount)
                      if not stor8[address(_owner)].field_0:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require ext_code.size(parentTokenAddress)
                  if block.number < parentSnapShotBlock:
                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                           gas gas_remaining wei
                          args address(_owner), block.number
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >= 32
                      require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                      if not stor10.length:
                          stor10.length++
                          if stor10.length <= stor10.length + 1:
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] + _amount)
                      else:
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] + _amount)
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                  else:
                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                           gas gas_remaining wei
                          args address(_owner), parentSnapShotBlock
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >= 32
                      require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                      if stor10.length:
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] + _amount)
                          else:
                              stor10.length++
                      else:
                          stor10.length++
                          if stor10.length <= stor10.length + 1:
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] + _amount)
              else:
                  require 0 < stor8[address(_owner)].field_0
                  if stor8[address(_owner)].field_0 <= block.number:
                      if stor8[address(_owner)].field_0:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if block.number < stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                              require 0 < stor8[address(_owner)].field_0
                              if block.number < stor8[address(_owner)].field_0:
                                  require 0 <= _amount
                                  if not stor10.length:
                                      stor10.length++
                                  else:
                                      require stor10.length - 1 < stor10.length
                                      if stor10[stor10.length].field_0 >= block.number:
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 <= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 + _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] + _amount)
                                  else:
                                      stor10.length++
                      else:
                          require 0 <= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] + _amount)
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] + _amount)
                              else:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] + _amount)
                  else:
                      if not parentTokenAddress:
                          require 0 <= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length > stor10.length + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] + _amount)
                              if not stor8[address(_owner)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] + _amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] + _amount)
                      else:
                          require ext_code.size(parentTokenAddress)
                          if block.number >= parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), parentSnapShotBlock
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                              if not stor10.length:
                                  stor10.length++
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), block.number
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] + _amount)
                                  else:
                                      stor10.length++
  else:
      require 0 < stor10.length
      if uint128(stor10.field_0) <= block.number:
          if not stor10.length:
              require 0 <= _amount
              if not stor8[address(_owner)].field_0:
                  if not parentTokenAddress:
                      require 0 <= _amount
                      if not stor10.length:
                          stor10.length++
                          if stor10.length <= stor10.length + 1:
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(_amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                                  if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                                  else:
                                      stor8[address(_owner)].field_0++
                      else:
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(_amount)
                              if stor8[address(_owner)].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                                  else:
                                      stor8[address(_owner)].field_0++
                              else:
                                  stor8[address(_owner)].field_0++
                                  if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                      require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(_amount)
                                  if not stor8[address(_owner)].field_0:
                                      stor8[address(_owner)].field_0++
                                  else:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                  else:
                      require ext_code.size(parentTokenAddress)
                      if block.number >= parentSnapShotBlock:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining wei
                              args address(_owner), parentSnapShotBlock
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(_amount)
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(_amount)
                              else:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                      else:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining wei
                              args address(_owner), block.number
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(_amount)
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(_amount)
                              else:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(_amount)
              else:
                  require 0 < stor8[address(_owner)].field_0
                  if stor8[address(_owner)].field_0 <= block.number:
                      if not stor8[address(_owner)].field_0:
                          require 0 <= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(_amount)
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(_amount)
                                  if stor8[address(_owner)].field_0:
                              else:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(_amount)
                      else:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if block.number < stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                              require 0 < stor8[address(_owner)].field_0
                              if block.number < stor8[address(_owner)].field_0:
                                  require 0 <= _amount
                                  if not stor10.length:
                                      stor10.length++
                                      if stor10.length <= stor10.length + 1:
                                  else:
                                      require stor10.length - 1 < stor10.length
                                      if stor10[stor10.length].field_0 >= block.number:
                                          require stor10.length - 1 < stor10.length
                                          stor10[stor10.length].field_0 = uint128(_amount)
                                      else:
                                          stor10.length++
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 <= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 + _amount
                              if stor10.length:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(_amount)
                                  else:
                                      stor10.length++
                              else:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(_amount)
                  else:
                      if not parentTokenAddress:
                          require 0 <= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(_amount)
                                  if not stor8[address(_owner)].field_0:
                                      stor8[address(_owner)].field_0++
                                  else:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(_amount)
                                  if not stor8[address(_owner)].field_0:
                                      stor8[address(_owner)].field_0++
                                  else:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                              else:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(_amount)
                                      if stor8[address(_owner)].field_0:
                      else:
                          require ext_code.size(parentTokenAddress)
                          if block.number >= parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), parentSnapShotBlock
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(_amount)
                                  else:
                                      stor10.length++
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), block.number
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                              if stor10.length:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(_amount)
                                  else:
                                      stor10.length++
                              else:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(_amount)
          else:
              require stor10.length - 1 < stor10.length
              if block.number >= stor10[stor10.length].field_0:
                  require stor10.length - 1 < stor10.length
                  require stor10[stor10.length].field_0 <= stor10[stor10.length].field_0 + _amount
                  if not stor8[address(_owner)].field_0:
                      if not parentTokenAddress:
                          require 0 <= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length > stor10.length + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(stor10[stor10.length].field_0 + _amount)
                              if not stor8[address(_owner)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(stor10[stor10.length].field_0 + _amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(stor10[stor10.length].field_0 + _amount)
                      else:
                          require ext_code.size(parentTokenAddress)
                          if block.number >= parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), parentSnapShotBlock
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                              if not stor10.length:
                                  stor10.length++
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), block.number
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(stor10[stor10.length].field_0 + _amount)
                                  else:
                                      stor10.length++
                  else:
                      require 0 < stor8[address(_owner)].field_0
                      if stor8[address(_owner)].field_0 <= block.number:
                          if stor8[address(_owner)].field_0:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if block.number < stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                                  require 0 < stor8[address(_owner)].field_0
                                  if block.number >= stor8[address(_owner)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require 0 <= _amount
                                  if not stor10.length:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor10.length - 1 < stor10.length
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 <= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 + _amount
                              if not stor10.length:
                                  stor10.length++
                              else:
                                  require stor10.length - 1 < stor10.length
                          else:
                              require 0 <= _amount
                              if stor10.length:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(stor10[stor10.length].field_0 + _amount)
                                  else:
                                      stor10.length++
                              else:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(stor10[stor10.length].field_0 + _amount)
                      else:
                          if not parentTokenAddress:
                              require 0 <= _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(stor10[stor10.length].field_0 + _amount)
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(stor10[stor10.length].field_0 + _amount)
                                      if stor8[address(_owner)].field_0:
                                  else:
                                      stor10.length++
                                      if stor10.length <= stor10.length + 1:
                                          require stor10.length < stor10.length
                                          stor10[stor10.length].field_0 = uint128(block.number)
                                          stor10[stor10.length].field_128 = uint128(stor10[stor10.length].field_0 + _amount)
                          else:
                              require ext_code.size(parentTokenAddress)
                              if block.number >= parentSnapShotBlock:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining wei
                                      args address(_owner), parentSnapShotBlock
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                                  require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                                  if not stor10.length:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor10.length - 1 < stor10.length
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), block.number
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                              if not stor10.length:
                                  stor10.length++
                              else:
                                  require stor10.length - 1 < stor10.length
              else:
                  require 0 < stor10.length
                  if block.number < uint128(stor10.field_0):
                      require 0 <= _amount
                      if not stor8[address(_owner)].field_0:
                          if not parentTokenAddress:
                              require 0 <= _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(_amount)
                                      if stor8[address(_owner)].field_0:
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(_amount)
                                      if not stor8[address(_owner)].field_0:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(_amount)
                          else:
                              require ext_code.size(parentTokenAddress)
                              if block.number >= parentSnapShotBlock:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining wei
                                      args address(_owner), parentSnapShotBlock
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                                  require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                                  if not stor10.length:
                                      stor10.length++
                                  else:
                                      require stor10.length - 1 < stor10.length
                              else:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining wei
                                      args address(_owner), block.number
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                                  require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                                  if not stor10.length:
                                      stor10.length++
                                  else:
                                      require stor10.length - 1 < stor10.length
                                      if stor10[stor10.length].field_0 >= block.number:
                      else:
                          require 0 < stor8[address(_owner)].field_0
                          if stor8[address(_owner)].field_0 <= block.number:
                              if not stor8[address(_owner)].field_0:
                                  require 0 <= _amount
                                  if not stor10.length:
                                      stor10.length++
                                      if stor10.length <= stor10.length + 1:
                                  else:
                                      require stor10.length - 1 < stor10.length
                                      if stor10[stor10.length].field_0 >= block.number:
                                          require stor10.length - 1 < stor10.length
                                          stor10[stor10.length].field_0 = uint128(_amount)
                                      else:
                                          stor10.length++
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if block.number >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 <= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 + _amount
                                      if not stor10.length:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require stor10.length - 1 < stor10.length
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require 0 < stor8[address(_owner)].field_0
                                  if block.number < stor8[address(_owner)].field_0:
                                      require 0 <= _amount
                                      if stor10.length:
                          else:
                              if parentTokenAddress:
                                  require ext_code.size(parentTokenAddress)
                                  if block.number < parentSnapShotBlock:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(_owner), block.number
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                                      require return_data.size >= 32
                                      require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                                      if not stor10.length:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require stor10.length - 1 < stor10.length
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining wei
                                      args address(_owner), parentSnapShotBlock
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                                  require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                                  if stor10.length:
                              else:
                                  require 0 <= _amount
                                  if not stor10.length:
                                      stor10.length++
                                      if stor10.length <= stor10.length + 1:
                                          require stor10.length < stor10.length
                                          stor10[stor10.length].field_0 = uint128(block.number)
                                          stor10[stor10.length].field_128 = uint128(_amount)
                                  else:
                                      require stor10.length - 1 < stor10.length
                                      if stor10[stor10.length].field_0 >= block.number:
                                          require stor10.length - 1 < stor10.length
                                          stor10[stor10.length].field_0 = uint128(_amount)
                                      else:
                                          stor10.length++
                                          if stor10.length <= stor10.length + 1:
                                              require stor10.length < stor10.length
                                              stor10[stor10.length].field_0 = uint128(block.number)
                                              stor10[stor10.length].field_128 = uint128(_amount)
      else:
          if not parentTokenAddress:
              require 0 <= _amount
              if not stor8[address(_owner)].field_0:
                  if not parentTokenAddress:
                      require 0 <= _amount
                      if not stor10.length:
                          stor10.length++
                          if stor10.length <= stor10.length + 1:
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(_amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                                  if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                      require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                                      log Transfer(
                                            address from=_amount,
                                            address to=0,
                                            uint256 value=_owner)
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                                      log Transfer(
                                            address from=_amount,
                                            address to=0,
                                            uint256 value=_owner)
                                      return 1
                                  stor8[address(_owner)].field_0++
                                  if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                      require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                      else:
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(_amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                                  if stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                                  log Transfer(
                                        address from=_amount,
                                        address to=0,
                                        uint256 value=_owner)
                                  return 1
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                                  log Transfer(
                                        address from=_amount,
                                        address to=0,
                                        uint256 value=_owner)
                                  return 1
                              stor8[address(_owner)].field_0++
                              if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(_amount)
                                  if stor8[address(_owner)].field_0:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                                      else:
                                          stor8[address(_owner)].field_0++
                                  else:
                                      stor8[address(_owner)].field_0++
                                      if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                          require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                  else:
                      require ext_code.size(parentTokenAddress)
                      if block.number >= parentSnapShotBlock:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining wei
                              args address(_owner), parentSnapShotBlock
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(_amount)
                                  if stor8[address(_owner)].field_0:
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(_amount)
                                  if not stor8[address(_owner)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(_amount)
                      else:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining wei
                              args address(_owner), block.number
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length > stor10.length + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(_amount)
                              if not stor8[address(_owner)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(_amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(_amount)
              else:
                  require 0 < stor8[address(_owner)].field_0
                  if stor8[address(_owner)].field_0 <= block.number:
                      if not stor8[address(_owner)].field_0:
                          require 0 <= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(_amount)
                                  if not stor8[address(_owner)].field_0:
                                      stor8[address(_owner)].field_0++
                                  else:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(_amount)
                                  if not stor8[address(_owner)].field_0:
                                      stor8[address(_owner)].field_0++
                                  else:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                              else:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(_amount)
                                      if stor8[address(_owner)].field_0:
                      else:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if block.number >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 <= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 + _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(_amount)
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(_amount)
                                      if stor8[address(_owner)].field_0:
                                  else:
                                      stor10.length++
                                      if stor10.length <= stor10.length + 1:
                                          require stor10.length < stor10.length
                                          stor10[stor10.length].field_0 = uint128(block.number)
                                          stor10[stor10.length].field_128 = uint128(_amount)
                          else:
                              require 0 < stor8[address(_owner)].field_0
                              if block.number < stor8[address(_owner)].field_0:
                                  require 0 <= _amount
                                  if not stor10.length:
                                      stor10.length++
                                      if stor10.length <= stor10.length + 1:
                                          require stor10.length < stor10.length
                                          stor10[stor10.length].field_0 = uint128(block.number)
                                          stor10[stor10.length].field_128 = uint128(_amount)
                                  else:
                                      require stor10.length - 1 < stor10.length
                                      if stor10[stor10.length].field_0 >= block.number:
                                          require stor10.length - 1 < stor10.length
                                          stor10[stor10.length].field_0 = uint128(_amount)
                                      else:
                                          stor10.length++
                                          if stor10.length <= stor10.length + 1:
                                              require stor10.length < stor10.length
                                              stor10[stor10.length].field_0 = uint128(block.number)
                                              stor10[stor10.length].field_128 = uint128(_amount)
                  else:
                      if not parentTokenAddress:
                          require 0 <= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(_amount)
                                  if stor8[address(_owner)].field_0:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                                      else:
                                          stor8[address(_owner)].field_0++
                                  else:
                                      stor8[address(_owner)].field_0++
                                      if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                          require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(_amount)
                                  if not stor8[address(_owner)].field_0:
                                      stor8[address(_owner)].field_0++
                                      if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                          require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                                  else:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                                          log Transfer(
                                                address from=_amount,
                                                address to=0,
                                                uint256 value=_owner)
                                      else:
                                          stor8[address(_owner)].field_0++
                                          if stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                              else:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(_amount)
                                      if not stor8[address(_owner)].field_0:
                                          stor8[address(_owner)].field_0++
                                      else:
                                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                          if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                      else:
                          require ext_code.size(parentTokenAddress)
                          if block.number < parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), block.number
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(_amount)
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(_amount)
                                      if stor8[address(_owner)].field_0:
                                  else:
                                      stor10.length++
                                      if stor10.length <= stor10.length + 1:
                                          require stor10.length < stor10.length
                                          stor10[stor10.length].field_0 = uint128(block.number)
                                          stor10[stor10.length].field_128 = uint128(_amount)
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), parentSnapShotBlock
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(_amount)
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(_amount)
                                  else:
                                      stor10.length++
                                      if stor10.length <= stor10.length + 1:
                                          require stor10.length < stor10.length
                                          stor10[stor10.length].field_0 = uint128(block.number)
                                          stor10[stor10.length].field_128 = uint128(_amount)
          else:
              require ext_code.size(parentTokenAddress)
              if block.number < parentSnapShotBlock:
                  call parentTokenAddress.totalSupplyAt(uint256 snapshotId) with:
                       gas gas_remaining wei
                      args block.number
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                  if not stor8[address(_owner)].field_0:
                      if not parentTokenAddress:
                          require 0 <= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length > stor10.length + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor10.length < stor10.length
                              stor10[stor10.length].field_0 = uint128(block.number)
                              stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] + _amount)
                              if not stor8[address(_owner)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor10.length - 1 < stor10.length
                          if stor10[stor10.length].field_0 >= block.number:
                              require stor10.length - 1 < stor10.length
                              stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] + _amount)
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          else:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] + _amount)
                      else:
                          require ext_code.size(parentTokenAddress)
                          if block.number >= parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), parentSnapShotBlock
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                              if not stor10.length:
                                  stor10.length++
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), block.number
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] + _amount)
                                  else:
                                      stor10.length++
                  else:
                      require 0 < stor8[address(_owner)].field_0
                      if stor8[address(_owner)].field_0 <= block.number:
                          if stor8[address(_owner)].field_0:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if block.number < stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                                  require 0 < stor8[address(_owner)].field_0
                                  if block.number >= stor8[address(_owner)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require 0 <= _amount
                                  if not stor10.length:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor10.length - 1 < stor10.length
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 <= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 + _amount
                              if not stor10.length:
                                  stor10.length++
                              else:
                                  require stor10.length - 1 < stor10.length
                          else:
                              require 0 <= _amount
                              if stor10.length:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] + _amount)
                                  else:
                                      stor10.length++
                              else:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] + _amount)
                      else:
                          if not parentTokenAddress:
                              require 0 <= _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] + _amount)
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] + _amount)
                                      if stor8[address(_owner)].field_0:
                                  else:
                                      stor10.length++
                                      if stor10.length <= stor10.length + 1:
                                          require stor10.length < stor10.length
                                          stor10[stor10.length].field_0 = uint128(block.number)
                                          stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] + _amount)
                          else:
                              require ext_code.size(parentTokenAddress)
                              if block.number >= parentSnapShotBlock:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining wei
                                      args address(_owner), parentSnapShotBlock
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                                  require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                                  if not stor10.length:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor10.length - 1 < stor10.length
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), block.number
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                              if not stor10.length:
                                  stor10.length++
                              else:
                                  require stor10.length - 1 < stor10.length
              else:
                  call parentTokenAddress.totalSupplyAt(uint256 snapshotId) with:
                       gas gas_remaining wei
                      args parentSnapShotBlock
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                  if not stor8[address(_owner)].field_0:
                      if not parentTokenAddress:
                          require 0 <= _amount
                          if not stor10.length:
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] + _amount)
                                  if stor8[address(_owner)].field_0:
                          else:
                              require stor10.length - 1 < stor10.length
                              if stor10[stor10.length].field_0 >= block.number:
                                  require stor10.length - 1 < stor10.length
                                  stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] + _amount)
                                  if not stor8[address(_owner)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor10.length++
                              if stor10.length <= stor10.length + 1:
                                  require stor10.length < stor10.length
                                  stor10[stor10.length].field_0 = uint128(block.number)
                                  stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] + _amount)
                      else:
                          require ext_code.size(parentTokenAddress)
                          if block.number >= parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), parentSnapShotBlock
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                              if not stor10.length:
                                  stor10.length++
                              else:
                                  require stor10.length - 1 < stor10.length
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), block.number
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                              if not stor10.length:
                                  stor10.length++
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                  else:
                      require 0 < stor8[address(_owner)].field_0
                      if stor8[address(_owner)].field_0 <= block.number:
                          if not stor8[address(_owner)].field_0:
                              require 0 <= _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] + _amount)
                                  else:
                                      stor10.length++
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if block.number >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 <= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 + _amount
                                  if not stor10.length:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor10.length - 1 < stor10.length
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require 0 < stor8[address(_owner)].field_0
                              if block.number < stor8[address(_owner)].field_0:
                                  require 0 <= _amount
                                  if stor10.length:
                      else:
                          if parentTokenAddress:
                              require ext_code.size(parentTokenAddress)
                              if block.number < parentSnapShotBlock:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining wei
                                      args address(_owner), block.number
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                                  require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                                  if not stor10.length:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor10.length - 1 < stor10.length
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining wei
                                  args address(_owner), parentSnapShotBlock
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require ext_call.return_data[0] <= ext_call.return_data[0] + _amount
                              if stor10.length:
                          else:
                              require 0 <= _amount
                              if not stor10.length:
                                  stor10.length++
                                  if stor10.length <= stor10.length + 1:
                                      require stor10.length < stor10.length
                                      stor10[stor10.length].field_0 = uint128(block.number)
                                      stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] + _amount)
                              else:
                                  require stor10.length - 1 < stor10.length
                                  if stor10[stor10.length].field_0 >= block.number:
                                      require stor10.length - 1 < stor10.length
                                      stor10[stor10.length].field_0 = uint128(ext_call.return_data[0] + _amount)
                                  else:
                                      stor10.length++
                                      if stor10.length <= stor10.length + 1:
                                          require stor10.length < stor10.length
                                          stor10[stor10.length].field_0 = uint128(block.number)
                                          stor10[stor10.length].field_128 = uint128(ext_call.return_data[0] + _amount)
  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)

def transferFrom(address sender, address recipient, uint256 amount): # not payable
  if caller == controllerAddress:
      if not amount:
          return 1
      require block.number > parentSnapShotBlock
      require recipient
      require recipient != this.address
      if not stor8[address(sender)].field_0:
          if not parentTokenAddress:
              if 0 < amount:
                  return 0
              if not controllerAddress:
                  if not stor8[address(sender)].field_0:
                      stor8[address(sender)].field_0++
                      if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require 0 <= amount
                                  if not stor8[address(recipient)].field_0:
                                      stor8[address(recipient)].field_0++
                                  else:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                              else:
                                  require ext_code.size(parentTokenAddress)
                                  if block.number < parentSnapShotBlock:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), block.number
                                  else:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), parentSnapShotBlock
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 <= block.number:
                                  if stor8[address(recipient)].field_0:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require 0 < stor8[address(recipient)].field_0
                              else:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                      if stor8[address(recipient)].field_0:
                                  else:
                                      require ext_code.size(parentTokenAddress)
                                      if block.number >= parentSnapShotBlock:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), parentSnapShotBlock
                                      else:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), block.number
                                          if not ext_call.success:
                                              revert with ext_call.return_data[0 len return_data.size]
                  else:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require 0 <= amount
                                  if not stor8[address(recipient)].field_0:
                                      stor8[address(recipient)].field_0++
                                  else:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      if stor8[address(recipient)][stor8[address(recipient)].field_0].field_0 >= block.number:
                              else:
                                  require ext_code.size(parentTokenAddress)
                                  if block.number >= parentSnapShotBlock:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), parentSnapShotBlock
                                  else:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), block.number
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 <= block.number:
                                  if not stor8[address(recipient)].field_0:
                                      require 0 <= amount
                                  else:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require 0 < stor8[address(recipient)].field_0
                                      if block.number >= stor8[address(recipient)].field_0:
                              else:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                      if not stor8[address(recipient)].field_0:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require ext_code.size(parentTokenAddress)
                                  if block.number < parentSnapShotBlock:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), block.number
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                                      require return_data.size >= 32
                                  else:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), parentSnapShotBlock
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                      else:
                          stor8[address(sender)].field_0++
                          if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                      if stor8[address(recipient)].field_0:
                                  else:
                                      require ext_code.size(parentTokenAddress)
                                      if block.number >= parentSnapShotBlock:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), parentSnapShotBlock
                                      else:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), block.number
                                          if not ext_call.success:
                                              revert with ext_call.return_data[0 len return_data.size]
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                                      if not parentTokenAddress:
                                          require 0 <= amount
                                      else:
                                          if block.number < parentSnapShotBlock:
                                  else:
                                      if stor8[address(recipient)].field_0:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
              else:
                  if ext_code.size(controllerAddress) <= 0:
                      if not stor8[address(sender)].field_0:
                          stor8[address(sender)].field_0++
                          if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                      if not stor8[address(recipient)].field_0:
                                          stor8[address(recipient)].field_0++
                                      else:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                  else:
                                      require ext_code.size(parentTokenAddress)
                                      if block.number < parentSnapShotBlock:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), block.number
                                      else:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), parentSnapShotBlock
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                                      require return_data.size >= 32
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 <= block.number:
                                      if stor8[address(recipient)].field_0:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                                              require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          require 0 < stor8[address(recipient)].field_0
                                  else:
                                      if not parentTokenAddress:
                                          require 0 <= amount
                                          if stor8[address(recipient)].field_0:
                                      else:
                                          require ext_code.size(parentTokenAddress)
                                          if block.number >= parentSnapShotBlock:
                                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                                   gas gas_remaining wei
                                                  args address(recipient), parentSnapShotBlock
                                          else:
                                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                                   gas gas_remaining wei
                                                  args address(recipient), block.number
                                              if not ext_call.success:
                                                  revert with ext_call.return_data[0 len return_data.size]
                      else:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                      if not stor8[address(recipient)].field_0:
                                          stor8[address(recipient)].field_0++
                                      else:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          if stor8[address(recipient)][stor8[address(recipient)].field_0].field_0 >= block.number:
                                  else:
                                      require ext_code.size(parentTokenAddress)
                                      if block.number >= parentSnapShotBlock:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), parentSnapShotBlock
                                      else:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), block.number
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                                      require return_data.size >= 32
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 <= block.number:
                                      if not stor8[address(recipient)].field_0:
                                          require 0 <= amount
                                      else:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                                              require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          require 0 < stor8[address(recipient)].field_0
                                          if block.number >= stor8[address(recipient)].field_0:
                                  else:
                                      if not parentTokenAddress:
                                          require 0 <= amount
                                          if not stor8[address(recipient)].field_0:
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require ext_code.size(parentTokenAddress)
                                      if block.number < parentSnapShotBlock:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), block.number
                                          if not ext_call.success:
                                              revert with ext_call.return_data[0 len return_data.size]
                                          require return_data.size >= 32
                                      else:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), parentSnapShotBlock
                                          if not ext_call.success:
                                              revert with ext_call.return_data[0 len return_data.size]
                          else:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                                  if not stor8[address(recipient)].field_0:
                                      if not parentTokenAddress:
                                          require 0 <= amount
                                          if stor8[address(recipient)].field_0:
                                      else:
                                          require ext_code.size(parentTokenAddress)
                                          if block.number >= parentSnapShotBlock:
                                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                                   gas gas_remaining wei
                                                  args address(recipient), parentSnapShotBlock
                                          else:
                                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                                   gas gas_remaining wei
                                                  args address(recipient), block.number
                                              if not ext_call.success:
                                                  revert with ext_call.return_data[0 len return_data.size]
                                  else:
                                      require 0 < stor8[address(recipient)].field_0
                                      if stor8[address(recipient)].field_0 > block.number:
                                          if not parentTokenAddress:
                                              require 0 <= amount
                                          else:
                                              if block.number < parentSnapShotBlock:
                                      else:
                                          if stor8[address(recipient)].field_0:
                                              require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                              if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                  else:
                      require ext_code.size(controllerAddress)
                      call controllerAddress.'J91I' with:
                           gas gas_remaining wei
                          args address(sender), address(recipient), amount
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >= 32
                      require 1 == bool(ext_call.return_data[0])
                      if not stor8[address(sender)].field_0:
                          stor8[address(sender)].field_0++
                          if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                  else:
                                      if block.number < parentSnapShotBlock:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 <= block.number:
                                      if stor8[address(recipient)].field_0:
                                  else:
                                      if parentTokenAddress:
                      else:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                  else:
                                      if block.number < parentSnapShotBlock:
                                          require ext_code.size(parentTokenAddress)
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), block.number
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                                      if parentTokenAddress:
                                  else:
                                      if stor8[address(recipient)].field_0:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                          else:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                                  if not stor8[address(recipient)].field_0:
                                      if parentTokenAddress:
                                  else:
                                      require 0 < stor8[address(recipient)].field_0
                                      if stor8[address(recipient)].field_0 > block.number:
          else:
              require ext_code.size(parentTokenAddress)
              if block.number < parentSnapShotBlock:
                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                       gas gas_remaining wei
                      args address(sender), block.number
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  if ext_call.return_data[0] < amount:
                      return 0
                  if not controllerAddress:
                      if not stor8[address(sender)].field_0:
                          stor8[address(sender)].field_0++
                          if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                          if not stor8[address(recipient)].field_0:
                              if parentTokenAddress:
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 > block.number:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      stor8[address(sender)].field_0++
                      if stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                      if not stor8[address(recipient)].field_0:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require 0 < stor8[address(recipient)].field_0
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  if ext_code.size(controllerAddress) <= 0:
                      if not stor8[address(sender)].field_0:
                          stor8[address(sender)].field_0++
                          if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                          if not stor8[address(recipient)].field_0:
                              if parentTokenAddress:
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 > block.number:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      stor8[address(sender)].field_0++
                      if stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                      if not stor8[address(recipient)].field_0:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require 0 < stor8[address(recipient)].field_0
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require ext_code.size(controllerAddress)
                  call controllerAddress.'J91I' with:
                       gas gas_remaining wei
                      args address(sender), address(recipient), amount
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require 1 == bool(ext_call.return_data[0])
                  if not stor8[address(sender)].field_0:
                      stor8[address(sender)].field_0++
                      if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                  else:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                          if stor8[address(recipient)].field_0:
                      else:
                          stor8[address(sender)].field_0++
                          if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
              else:
                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                       gas gas_remaining wei
                      args address(sender), parentSnapShotBlock
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  if ext_call.return_data[0] < amount:
                      return 0
                  if not controllerAddress:
                      if not stor8[address(sender)].field_0:
                          stor8[address(sender)].field_0++
                          if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                              if stor8[address(recipient)].field_0:
                                  require 0 < stor8[address(recipient)].field_0
                      else:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                          else:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                                  if stor8[address(recipient)].field_0:
                  else:
                      if ext_code.size(controllerAddress) <= 0:
                          if not stor8[address(sender)].field_0:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                                  if stor8[address(recipient)].field_0:
                                      require 0 < stor8[address(recipient)].field_0
                          else:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                                  if not stor8[address(recipient)].field_0:
                                      if parentTokenAddress:
                                  else:
                                      require 0 < stor8[address(recipient)].field_0
                                      if stor8[address(recipient)].field_0 > block.number:
                              else:
                                  stor8[address(sender)].field_0++
                                  if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                                      if stor8[address(recipient)].field_0:
                      else:
                          require ext_code.size(controllerAddress)
                          call controllerAddress.'J91I' with:
                               gas gas_remaining wei
                              args address(sender), address(recipient), amount
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require 1 == bool(ext_call.return_data[0])
                          if not stor8[address(sender)].field_0:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                          else:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                              else:
                                  stor8[address(sender)].field_0++
                                  if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
      else:
          require 0 < stor8[address(sender)].field_0
          if stor8[address(sender)].field_0 <= block.number:
              if not stor8[address(sender)].field_0:
                  if 0 < amount:
                      return 0
                  if not controllerAddress:
                      if not stor8[address(sender)].field_0:
                          stor8[address(sender)].field_0++
                          if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                      else:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                  else:
                                      if block.number < parentSnapShotBlock:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 <= block.number:
                                      if stor8[address(recipient)].field_0:
                                  else:
                                      if parentTokenAddress:
                          else:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                                  if stor8[address(recipient)].field_0:
                                      require 0 < stor8[address(recipient)].field_0
                  else:
                      if ext_code.size(controllerAddress) <= 0:
                          if not stor8[address(sender)].field_0:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                                  if not stor8[address(recipient)].field_0:
                                      if parentTokenAddress:
                                  else:
                                      require 0 < stor8[address(recipient)].field_0
                                      if stor8[address(recipient)].field_0 > block.number:
                          else:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                                  if not stor8[address(recipient)].field_0:
                                      if not parentTokenAddress:
                                          require 0 <= amount
                                      else:
                                          if block.number < parentSnapShotBlock:
                                  else:
                                      require 0 < stor8[address(recipient)].field_0
                                      if stor8[address(recipient)].field_0 <= block.number:
                                          if stor8[address(recipient)].field_0:
                                      else:
                                          if parentTokenAddress:
                              else:
                                  stor8[address(sender)].field_0++
                                  if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                                      if stor8[address(recipient)].field_0:
                                          require 0 < stor8[address(recipient)].field_0
                      else:
                          require ext_code.size(controllerAddress)
                          call controllerAddress.'J91I' with:
                               gas gas_remaining wei
                              args address(sender), address(recipient), amount
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require 1 == bool(ext_call.return_data[0])
                          if not stor8[address(sender)].field_0:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                                  if stor8[address(recipient)].field_0:
                          else:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                                  if not stor8[address(recipient)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require 0 < stor8[address(recipient)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
              else:
                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                  if block.number >= stor8[address(sender)][stor8[address(sender)].field_0].field_0:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      if stor8[address(sender)][stor8[address(sender)].field_0].field_0 < amount:
                          return 0
                      if not controllerAddress:
                          if not stor8[address(sender)].field_0:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(stor8[address(sender)][stor8[address(sender)].field_0].field_0 - amount)
                              if not stor8[address(recipient)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require 0 < stor8[address(recipient)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(stor8[address(sender)][stor8[address(sender)].field_0].field_0 - amount)
                              if stor8[address(recipient)].field_0:
                                  require 0 < stor8[address(recipient)].field_0
                          else:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(stor8[address(sender)][stor8[address(sender)].field_0].field_0 - amount)
                      else:
                          if ext_code.size(controllerAddress) <= 0:
                              if not stor8[address(sender)].field_0:
                                  stor8[address(sender)].field_0++
                                  if stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(stor8[address(sender)][stor8[address(sender)].field_0].field_0 - amount)
                                  if not stor8[address(recipient)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require 0 < stor8[address(recipient)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(stor8[address(sender)][stor8[address(sender)].field_0].field_0 - amount)
                                  if stor8[address(recipient)].field_0:
                                      require 0 < stor8[address(recipient)].field_0
                              else:
                                  stor8[address(sender)].field_0++
                                  if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(stor8[address(sender)][stor8[address(sender)].field_0].field_0 - amount)
                          else:
                              require ext_code.size(controllerAddress)
                              call controllerAddress.'J91I' with:
                                   gas gas_remaining wei
                                  args address(sender), address(recipient), amount
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require 1 == bool(ext_call.return_data[0])
                              if not stor8[address(sender)].field_0:
                                  stor8[address(sender)].field_0++
                                  if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(stor8[address(sender)][stor8[address(sender)].field_0].field_0 - amount)
                              else:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(stor8[address(sender)][stor8[address(sender)].field_0].field_0 - amount)
                                  else:
                                      stor8[address(sender)].field_0++
                                      if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                  else:
                      require 0 < stor8[address(sender)].field_0
                      if block.number < stor8[address(sender)].field_0:
                          if 0 < amount:
                              return 0
                          if not controllerAddress:
                              if not stor8[address(sender)].field_0:
                                  stor8[address(sender)].field_0++
                                  if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                                      if stor8[address(recipient)].field_0:
                              else:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                                      if not stor8[address(recipient)].field_0:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require 0 < stor8[address(recipient)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  stor8[address(sender)].field_0++
                                  if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                          else:
                              if ext_code.size(controllerAddress) <= 0:
                                  if not stor8[address(sender)].field_0:
                                      stor8[address(sender)].field_0++
                                      if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                                          if stor8[address(recipient)].field_0:
                                  else:
                                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                      if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                                          if not stor8[address(recipient)].field_0:
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          require 0 < stor8[address(recipient)].field_0
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      stor8[address(sender)].field_0++
                                      if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                              else:
                                  require ext_code.size(controllerAddress)
                                  call controllerAddress.'J91I' with:
                                       gas gas_remaining wei
                                      args address(sender), address(recipient), amount
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                                  require 1 == bool(ext_call.return_data[0])
                                  if stor8[address(sender)].field_0:
                                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                      if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                                      else:
                                          stor8[address(sender)].field_0++
                                  else:
                                      stor8[address(sender)].field_0++
                                      if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
          else:
              if not parentTokenAddress:
                  if 0 < amount:
                      return 0
                  if not controllerAddress:
                      if not stor8[address(sender)].field_0:
                          stor8[address(sender)].field_0++
                          if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                      if stor8[address(recipient)].field_0:
                                  else:
                                      require ext_code.size(parentTokenAddress)
                                      if block.number >= parentSnapShotBlock:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), parentSnapShotBlock
                                      else:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), block.number
                                          if not ext_call.success:
                                              revert with ext_call.return_data[0 len return_data.size]
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                                      if not parentTokenAddress:
                                          require 0 <= amount
                                      else:
                                          if block.number < parentSnapShotBlock:
                                  else:
                                      if stor8[address(recipient)].field_0:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                      else:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                      if not stor8[address(recipient)].field_0:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require ext_code.size(parentTokenAddress)
                                  if block.number < parentSnapShotBlock:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), block.number
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                                      require return_data.size >= 32
                                  else:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), parentSnapShotBlock
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 <= block.number:
                                      if stor8[address(recipient)].field_0:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                                              require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          require 0 < stor8[address(recipient)].field_0
                                  else:
                                      if not parentTokenAddress:
                                          require 0 <= amount
                                      else:
                                          if block.number < parentSnapShotBlock:
                                              require ext_code.size(parentTokenAddress)
                                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                                   gas gas_remaining wei
                                                  args address(recipient), block.number
                          else:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                                  if not stor8[address(recipient)].field_0:
                                      if not parentTokenAddress:
                                          require 0 <= amount
                                      else:
                                          if block.number < parentSnapShotBlock:
                                  else:
                                      require 0 < stor8[address(recipient)].field_0
                                      if stor8[address(recipient)].field_0 <= block.number:
                                          if stor8[address(recipient)].field_0:
                                      else:
                                          if parentTokenAddress:
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  if ext_code.size(controllerAddress) <= 0:
                      if not stor8[address(sender)].field_0:
                          stor8[address(sender)].field_0++
                          if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                      if stor8[address(recipient)].field_0:
                                  else:
                                      require ext_code.size(parentTokenAddress)
                                      if block.number >= parentSnapShotBlock:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), parentSnapShotBlock
                                      else:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), block.number
                                          if not ext_call.success:
                                              revert with ext_call.return_data[0 len return_data.size]
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                                      if not parentTokenAddress:
                                          require 0 <= amount
                                      else:
                                          if block.number < parentSnapShotBlock:
                                  else:
                                      if stor8[address(recipient)].field_0:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                      else:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                      if not stor8[address(recipient)].field_0:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require ext_code.size(parentTokenAddress)
                                  if block.number < parentSnapShotBlock:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), block.number
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                                      require return_data.size >= 32
                                  else:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), parentSnapShotBlock
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 <= block.number:
                                      if stor8[address(recipient)].field_0:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                                              require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                          require 0 < stor8[address(recipient)].field_0
                                  else:
                                      if not parentTokenAddress:
                                          require 0 <= amount
                                      else:
                                          if block.number < parentSnapShotBlock:
                                              require ext_code.size(parentTokenAddress)
                                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                                   gas gas_remaining wei
                                                  args address(recipient), block.number
                          else:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                                  if not stor8[address(recipient)].field_0:
                                      if not parentTokenAddress:
                                          require 0 <= amount
                                      else:
                                          if block.number < parentSnapShotBlock:
                                  else:
                                      require 0 < stor8[address(recipient)].field_0
                                      if stor8[address(recipient)].field_0 <= block.number:
                                          if stor8[address(recipient)].field_0:
                                      else:
                                          if parentTokenAddress:
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require ext_code.size(controllerAddress)
                  call controllerAddress.'J91I' with:
                       gas gas_remaining wei
                      args address(sender), address(recipient), amount
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require 1 == bool(ext_call.return_data[0])
                  if not stor8[address(sender)].field_0:
                      stor8[address(sender)].field_0++
                      if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if parentTokenAddress:
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 > block.number:
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                      if not stor8[address(recipient)].field_0:
                          if parentTokenAddress:
                      else:
                          require 0 < stor8[address(recipient)].field_0
                          if stor8[address(recipient)].field_0 > block.number:
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  stor8[address(sender)].field_0++
                  if stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                  if not stor8[address(recipient)].field_0:
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require 0 < stor8[address(recipient)].field_0
                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
              require ext_code.size(parentTokenAddress)
              if block.number < parentSnapShotBlock:
                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                       gas gas_remaining wei
                      args address(sender), block.number
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  if ext_call.return_data[0] < amount:
                      return 0
                  if not controllerAddress:
                      if not stor8[address(sender)].field_0:
                          stor8[address(sender)].field_0++
                          if stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                          if not stor8[address(recipient)].field_0:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require 0 < stor8[address(recipient)].field_0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                          if stor8[address(recipient)].field_0:
                              require 0 < stor8[address(recipient)].field_0
                      else:
                          stor8[address(sender)].field_0++
                          if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                  else:
                      if ext_code.size(controllerAddress) <= 0:
                          if not stor8[address(sender)].field_0:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                              if not stor8[address(recipient)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require 0 < stor8[address(recipient)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                              if stor8[address(recipient)].field_0:
                                  require 0 < stor8[address(recipient)].field_0
                          else:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                      else:
                          require ext_code.size(controllerAddress)
                          call controllerAddress.'J91I' with:
                               gas gas_remaining wei
                              args address(sender), address(recipient), amount
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require 1 == bool(ext_call.return_data[0])
                          if not stor8[address(sender)].field_0:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                          else:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                              else:
                                  stor8[address(sender)].field_0++
                                  if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
              else:
                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                       gas gas_remaining wei
                      args address(sender), parentSnapShotBlock
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  if ext_call.return_data[0] < amount:
                      return 0
                  if not controllerAddress:
                      if not stor8[address(sender)].field_0:
                          stor8[address(sender)].field_0++
                          if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                              if stor8[address(recipient)].field_0:
                      else:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                              if not stor8[address(recipient)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require 0 < stor8[address(recipient)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          stor8[address(sender)].field_0++
                          if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                  else:
                      if ext_code.size(controllerAddress) <= 0:
                          if not stor8[address(sender)].field_0:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                                  if stor8[address(recipient)].field_0:
                          else:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                                  if not stor8[address(recipient)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require 0 < stor8[address(recipient)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                      else:
                          require ext_code.size(controllerAddress)
                          call controllerAddress.'J91I' with:
                               gas gas_remaining wei
                              args address(sender), address(recipient), amount
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require 1 == bool(ext_call.return_data[0])
                          if stor8[address(sender)].field_0:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                              else:
                                  stor8[address(sender)].field_0++
                          else:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
  else:
      require transfersEnabled
      if amount > allowance[address(sender)][caller]:
          return 0
      allowance[address(sender)][caller] -= amount
      if not amount:
          return 1
      require block.number > parentSnapShotBlock
      require recipient
      require recipient != this.address
      if not stor8[address(sender)].field_0:
          if not parentTokenAddress:
              if 0 < amount:
                  return 0
              if not controllerAddress:
                  if not stor8[address(sender)].field_0:
                      stor8[address(sender)].field_0++
                      if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require 0 <= amount
                              else:
                                  if block.number < parentSnapShotBlock:
                                      require ext_code.size(parentTokenAddress)
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), block.number
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 > block.number:
                                  if parentTokenAddress:
                              else:
                                  if stor8[address(recipient)].field_0:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                  else:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require 0 <= amount
                                  if stor8[address(recipient)].field_0:
                              else:
                                  require ext_code.size(parentTokenAddress)
                                  if block.number >= parentSnapShotBlock:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), parentSnapShotBlock
                                  else:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining wei
                                          args address(recipient), block.number
                                      if not ext_call.success:
                                          revert with ext_call.return_data[0 len return_data.size]
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 > block.number:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                  else:
                                      if block.number < parentSnapShotBlock:
                              else:
                                  if stor8[address(recipient)].field_0:
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                      else:
                          stor8[address(sender)].field_0++
                          if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
              else:
                  if ext_code.size(controllerAddress) <= 0:
                      if not stor8[address(sender)].field_0:
                          stor8[address(sender)].field_0++
                          if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                  else:
                                      if block.number < parentSnapShotBlock:
                                          require ext_code.size(parentTokenAddress)
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), block.number
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                                      if parentTokenAddress:
                                  else:
                                      if stor8[address(recipient)].field_0:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                      else:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                      if stor8[address(recipient)].field_0:
                                  else:
                                      require ext_code.size(parentTokenAddress)
                                      if block.number >= parentSnapShotBlock:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), parentSnapShotBlock
                                      else:
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining wei
                                              args address(recipient), block.number
                                          if not ext_call.success:
                                              revert with ext_call.return_data[0 len return_data.size]
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                                      if not parentTokenAddress:
                                          require 0 <= amount
                                      else:
                                          if block.number < parentSnapShotBlock:
                                  else:
                                      if stor8[address(recipient)].field_0:
                                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                          if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                          else:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                                  if not stor8[address(recipient)].field_0:
                                      if parentTokenAddress:
                                  else:
                                      require 0 < stor8[address(recipient)].field_0
                                      if stor8[address(recipient)].field_0 > block.number:
                  else:
                      require ext_code.size(controllerAddress)
                      call controllerAddress.'J91I' with:
                           gas gas_remaining wei
                          args address(sender), address(recipient), amount
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >= 32
                      require 1 == bool(ext_call.return_data[0])
                      if not stor8[address(sender)].field_0:
                          stor8[address(sender)].field_0++
                          if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                              if stor8[address(recipient)].field_0:
                                  require 0 < stor8[address(recipient)].field_0
                      else:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                          else:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                                  if stor8[address(recipient)].field_0:
          else:
              require ext_code.size(parentTokenAddress)
              if block.number >= parentSnapShotBlock:
                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                       gas gas_remaining wei
                      args address(sender), parentSnapShotBlock
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  if ext_call.return_data[0] < amount:
                      return 0
                  if not controllerAddress:
                      if not stor8[address(sender)].field_0:
                          stor8[address(sender)].field_0++
                          if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                      else:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                              if stor8[address(recipient)].field_0:
                          else:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                  else:
                      if ext_code.size(controllerAddress) <= 0:
                          if not stor8[address(sender)].field_0:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                          else:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                                  if stor8[address(recipient)].field_0:
                              else:
                                  stor8[address(sender)].field_0++
                                  if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                      else:
                          require ext_code.size(controllerAddress)
                          call controllerAddress.'J91I' with:
                               gas gas_remaining wei
                              args address(sender), address(recipient), amount
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require 1 == bool(ext_call.return_data[0])
                          if not stor8[address(sender)].field_0:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                          else:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                              else:
                                  stor8[address(sender)].field_0++
              else:
                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                       gas gas_remaining wei
                      args address(sender), block.number
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  if ext_call.return_data[0] < amount:
                      return 0
                  if not controllerAddress:
                      if not stor8[address(sender)].field_0:
                          stor8[address(sender)].field_0++
                          if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                              if stor8[address(recipient)].field_0:
                      else:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                              if not stor8[address(recipient)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require 0 < stor8[address(recipient)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          stor8[address(sender)].field_0++
                          if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                  else:
                      if ext_code.size(controllerAddress) <= 0:
                          if not stor8[address(sender)].field_0:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                                  if stor8[address(recipient)].field_0:
                          else:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                                  if not stor8[address(recipient)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require 0 < stor8[address(recipient)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                      else:
                          require ext_code.size(controllerAddress)
                          call controllerAddress.'J91I' with:
                               gas gas_remaining wei
                              args address(sender), address(recipient), amount
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require 1 == bool(ext_call.return_data[0])
                          if stor8[address(sender)].field_0:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                              else:
                                  stor8[address(sender)].field_0++
                          else:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
      else:
          require 0 < stor8[address(sender)].field_0
          if stor8[address(sender)].field_0 <= block.number:
              if not stor8[address(sender)].field_0:
                  if 0 < amount:
                      return 0
                  if not controllerAddress:
                      if not stor8[address(sender)].field_0:
                          stor8[address(sender)].field_0++
                          if stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require 0 < stor8[address(recipient)].field_0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                          if stor8[address(recipient)].field_0:
                              require 0 < stor8[address(recipient)].field_0
                      else:
                          stor8[address(sender)].field_0++
                          if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                  else:
                      if ext_code.size(controllerAddress) <= 0:
                          if not stor8[address(sender)].field_0:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require 0 < stor8[address(recipient)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                              if stor8[address(recipient)].field_0:
                                  require 0 < stor8[address(recipient)].field_0
                          else:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                      else:
                          require ext_code.size(controllerAddress)
                          call controllerAddress.'J91I' with:
                               gas gas_remaining wei
                              args address(sender), address(recipient), amount
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require 1 == bool(ext_call.return_data[0])
                          if not stor8[address(sender)].field_0:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                          else:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                              else:
                                  stor8[address(sender)].field_0++
                                  if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
              else:
                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                  if block.number < stor8[address(sender)][stor8[address(sender)].field_0].field_0:
                      require 0 < stor8[address(sender)].field_0
                      if block.number < stor8[address(sender)].field_0:
                          if 0 < amount:
                              return 0
                          if not controllerAddress:
                              if not stor8[address(sender)].field_0:
                                  stor8[address(sender)].field_0++
                                  if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                              else:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                                  else:
                                      stor8[address(sender)].field_0++
                                      if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                          else:
                              if ext_code.size(controllerAddress) <= 0:
                                  if not stor8[address(sender)].field_0:
                                      stor8[address(sender)].field_0++
                                      if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                                  else:
                                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                      if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                                      else:
                                          stor8[address(sender)].field_0++
                                          if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                              else:
                                  require ext_code.size(controllerAddress)
                                  call controllerAddress.'J91I' with:
                                       gas gas_remaining wei
                                      args address(sender), address(recipient), amount
                                  if not ext_call.success:
                                      revert with ext_call.return_data[0 len return_data.size]
                                  require return_data.size >= 32
                                  require 1 == bool(ext_call.return_data[0])
                                  if not stor8[address(sender)].field_0:
                                      stor8[address(sender)].field_0++
                                  else:
                                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                  else:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      if stor8[address(sender)][stor8[address(sender)].field_0].field_0 < amount:
                          return 0
                      if not controllerAddress:
                          if not stor8[address(sender)].field_0:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(stor8[address(sender)][stor8[address(sender)].field_0].field_0 - amount)
                          else:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(stor8[address(sender)][stor8[address(sender)].field_0].field_0 - amount)
                              else:
                                  stor8[address(sender)].field_0++
                                  if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(stor8[address(sender)][stor8[address(sender)].field_0].field_0 - amount)
                      else:
                          if ext_code.size(controllerAddress) <= 0:
                              if not stor8[address(sender)].field_0:
                                  stor8[address(sender)].field_0++
                                  if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(stor8[address(sender)][stor8[address(sender)].field_0].field_0 - amount)
                              else:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(stor8[address(sender)][stor8[address(sender)].field_0].field_0 - amount)
                                  else:
                                      stor8[address(sender)].field_0++
                                      if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(stor8[address(sender)][stor8[address(sender)].field_0].field_0 - amount)
                          else:
                              require ext_code.size(controllerAddress)
                              call controllerAddress.'J91I' with:
                                   gas gas_remaining wei
                                  args address(sender), address(recipient), amount
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require 1 == bool(ext_call.return_data[0])
                              if not stor8[address(sender)].field_0:
                                  stor8[address(sender)].field_0++
                              else:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
          else:
              if not parentTokenAddress:
                  if 0 < amount:
                      return 0
                  if not controllerAddress:
                      if not stor8[address(sender)].field_0:
                          stor8[address(sender)].field_0++
                          if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                      else:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require 0 <= amount
                                  else:
                                      if block.number < parentSnapShotBlock:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 <= block.number:
                                      if stor8[address(recipient)].field_0:
                                  else:
                                      if parentTokenAddress:
                          else:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                                  if stor8[address(recipient)].field_0:
                                      require 0 < stor8[address(recipient)].field_0
                  else:
                      if ext_code.size(controllerAddress) <= 0:
                          if not stor8[address(sender)].field_0:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                                  if not stor8[address(recipient)].field_0:
                                      if parentTokenAddress:
                                  else:
                                      require 0 < stor8[address(recipient)].field_0
                                      if stor8[address(recipient)].field_0 > block.number:
                          else:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                                  if not stor8[address(recipient)].field_0:
                                      if not parentTokenAddress:
                                          require 0 <= amount
                                      else:
                                          if block.number < parentSnapShotBlock:
                                  else:
                                      require 0 < stor8[address(recipient)].field_0
                                      if stor8[address(recipient)].field_0 <= block.number:
                                          if stor8[address(recipient)].field_0:
                                      else:
                                          if parentTokenAddress:
                              else:
                                  stor8[address(sender)].field_0++
                                  if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                                      if stor8[address(recipient)].field_0:
                                          require 0 < stor8[address(recipient)].field_0
                      else:
                          require ext_code.size(controllerAddress)
                          call controllerAddress.'J91I' with:
                               gas gas_remaining wei
                              args address(sender), address(recipient), amount
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          require 1 == bool(ext_call.return_data[0])
                          if not stor8[address(sender)].field_0:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                                  if stor8[address(recipient)].field_0:
                          else:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                                  if not stor8[address(recipient)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require 0 < stor8[address(recipient)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
              else:
                  require ext_code.size(parentTokenAddress)
                  if block.number >= parentSnapShotBlock:
                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                           gas gas_remaining wei
                          args address(sender), parentSnapShotBlock
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >= 32
                      if ext_call.return_data[0] < amount:
                          return 0
                      if not controllerAddress:
                          if not stor8[address(sender)].field_0:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                          else:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                              else:
                                  stor8[address(sender)].field_0++
                                  if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                      else:
                          if ext_code.size(controllerAddress) <= 0:
                              if not stor8[address(sender)].field_0:
                                  stor8[address(sender)].field_0++
                                  if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                              else:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                                  else:
                                      stor8[address(sender)].field_0++
                                      if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                          else:
                              require ext_code.size(controllerAddress)
                              call controllerAddress.'J91I' with:
                                   gas gas_remaining wei
                                  args address(sender), address(recipient), amount
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require 1 == bool(ext_call.return_data[0])
                              if not stor8[address(sender)].field_0:
                                  stor8[address(sender)].field_0++
                              else:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                  else:
                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                           gas gas_remaining wei
                          args address(sender), block.number
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >= 32
                      if ext_call.return_data[0] < amount:
                          return 0
                      if not controllerAddress:
                          if not stor8[address(sender)].field_0:
                              stor8[address(sender)].field_0++
                              if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                          else:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                              else:
                                  stor8[address(sender)].field_0++
                                  if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                      else:
                          if ext_code.size(controllerAddress) <= 0:
                              if not stor8[address(sender)].field_0:
                                  stor8[address(sender)].field_0++
                                  if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                              else:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                                  else:
                                      stor8[address(sender)].field_0++
                                      if stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                          else:
                              require ext_code.size(controllerAddress)
                              call controllerAddress.'J91I' with:
                                   gas gas_remaining wei
                                  args address(sender), address(recipient), amount
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              require 1 == bool(ext_call.return_data[0])
                              if not stor8[address(sender)].field_0:
                                  stor8[address(sender)].field_0++
                              else:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)


