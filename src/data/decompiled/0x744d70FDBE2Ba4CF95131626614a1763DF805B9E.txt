# Palkeoramix decompiler. 

def storage:
  controllerAddress is address at storage 0
  name is array of uint256 at storage 1
  decimals is uint8 at storage 2
  symbol is array of uint256 at storage 3
  version is array of uint256 at storage 4
  parentTokenAddress is address at storage 5
  parentSnapShotBlock is uint256 at storage 6
  creationBlock is uint256 at storage 7
  stor8 is array of struct at storage 8
  allowance is mapping of uint256 at storage 9
  stor10 is array of struct at storage 10
  transfersEnabled is uint8 at storage 11
  tokenFactoryAddress is address at storage 11 offset 8

def name(): # not payable
  return name[0 len name.length]

def creationBlock(): # not payable
  return creationBlock

def decimals(): # not payable
  return decimals

def version(): # not payable
  return version[0 len version.length]

def parentToken(): # not payable
  return parentTokenAddress

def symbol(): # not payable
  return symbol[0 len symbol.length]

def transfersEnabled(): # not payable
  return bool(transfersEnabled)

def parentSnapShotBlock(): # not payable
  return parentSnapShotBlock

def allowance(address owner, address spender): # not payable
  return allowance[address(owner)][address(spender)]

def tokenFactory(): # not payable
  return tokenFactoryAddress

def controller(): # not payable
  return controllerAddress

#
#  Regular functions
#

def changeController(address _newController): # not payable
  require controllerAddress == caller
  controllerAddress = _newController

def enableTransfers(bool _transfersEnabled): # not payable
  require controllerAddress == caller
  transfersEnabled = uint8(_transfersEnabled)

def _fallback(?) payable: # default function
  require controllerAddress
  require ext_code.size(controllerAddress) > 0
  require ext_code.size(controllerAddress)
  call controllerAddress.proxyPayment(address _owner) with:
     value call.value wei
       gas gas_remaining - 9710 wei
      args caller
  require ext_call.success
  require ext_call.return_data[0]

def claimTokens(address _token): # not payable
  require controllerAddress == caller
  if not _token:
      call controllerAddress with:
         value eth.balance(this.address) wei
           gas 2300 * is_zero(value) wei
      require ext_call.success
      stop
  require ext_code.size(_token)
  call _token.balanceOf(address account) with:
       gas gas_remaining - 710 wei
      args this.address
  require ext_call.success
  require ext_code.size(_token)
  call _token.transfer(address recipient, uint256 amount) with:
       gas gas_remaining - 710 wei
      args controllerAddress, ext_call.return_data[0]
  require ext_call.success
  log ClaimedTokens(
        address _token=ext_call.return_data[0],
        address _controller=_token,
        uint256 _amount=controllerAddress)

def approve(address spender, uint256 amount): # not payable
  require transfersEnabled
  if amount:
      require not allowance[caller][address(spender)]
  if controllerAddress:
      if ext_code.size(controllerAddress) > 0:
          require ext_code.size(controllerAddress)
          call controllerAddress.onApprove(address _owner, address _spender, uint256 _amount) with:
               gas gas_remaining - 710 wei
              args caller, address(spender), amount
          require ext_call.success
          require ext_call.return_data[0]
  allowance[caller][address(spender)] = amount
  log Approval(
        address owner=amount,
        address spender=caller,
        uint256 value=spender)
  return 1

def totalSupply(): # not payable
  if not stor10.length:
      if not parentTokenAddress:
          return 0
      if block.number < parentSnapShotBlock:
          if ext_code.size(parentTokenAddress):
              call parentTokenAddress.totalSupplyAt(uint256 snapshotId) with:
                   gas gas_remaining - 710 wei
                  args block.number
              if ext_call.success:
                  return ext_call.return_data[0]
      else:
          if ext_code.size(parentTokenAddress):
              call parentTokenAddress.totalSupplyAt(uint256 snapshotId) with:
                   gas gas_remaining - 710 wei
                  args parentSnapShotBlock
              if ext_call.success:
                  return ext_call.return_data[0]
  else:
      if 0 < stor10.length:
          if uint128(stor10.field_0) > block.number:
              if not parentTokenAddress:
                  return 0
              if block.number < parentSnapShotBlock:
                  if ext_code.size(parentTokenAddress):
                      call parentTokenAddress.totalSupplyAt(uint256 snapshotId) with:
                           gas gas_remaining - 710 wei
                          args block.number
                      if ext_call.success:
                          return ext_call.return_data[0]
              else:
                  if ext_code.size(parentTokenAddress):
                      call parentTokenAddress.totalSupplyAt(uint256 snapshotId) with:
                           gas gas_remaining - 710 wei
                          args parentSnapShotBlock
                      if ext_call.success:
                          return ext_call.return_data[0]
          else:
              if not stor10.length:
                  return 0
              if stor10.length - 1 < stor10.length:
                  if block.number >= stor10[stor10.length].field_0:
                      if stor10.length - 1 < stor10.length:
                          return stor10[stor10.length].field_0
                  else:
                      if 0 < stor10.length:
                          if block.number < uint128(stor10.field_0):
                              return 0
                          s = 0
                          idx = 0
                          while stor10.length - 1 > idx:
                              require idx + stor10.length / 2 < stor10.length
                              mem[0] = 10
                              if stor10[0.5 / idx + stor10.length].field_0 > block.number:
                                  s = idx + stor10.length / 2
                                  idx = idx
                                  continue 
                              s = idx + stor10.length / 2
                              idx = idx + stor10.length / 2
                              continue 
                          if idx < stor10.length:
                              return stor10[idx].field_128
  revert

def totalSupplyAt(uint256 snapshotId): # not payable
  if not stor10.length:
      if not parentTokenAddress:
          return 0
      if snapshotId < parentSnapShotBlock:
          if ext_code.size(parentTokenAddress):
              call parentTokenAddress.totalSupplyAt(uint256 snapshotId) with:
                   gas gas_remaining - 710 wei
                  args snapshotId
              if ext_call.success:
                  return ext_call.return_data[0]
      else:
          if ext_code.size(parentTokenAddress):
              call parentTokenAddress.totalSupplyAt(uint256 snapshotId) with:
                   gas gas_remaining - 710 wei
                  args parentSnapShotBlock
              if ext_call.success:
                  return ext_call.return_data[0]
  else:
      if 0 < stor10.length:
          if uint128(stor10.field_0) > snapshotId:
              if not parentTokenAddress:
                  return 0
              if snapshotId < parentSnapShotBlock:
                  if ext_code.size(parentTokenAddress):
                      call parentTokenAddress.totalSupplyAt(uint256 snapshotId) with:
                           gas gas_remaining - 710 wei
                          args snapshotId
                      if ext_call.success:
                          return ext_call.return_data[0]
              else:
                  if ext_code.size(parentTokenAddress):
                      call parentTokenAddress.totalSupplyAt(uint256 snapshotId) with:
                           gas gas_remaining - 710 wei
                          args parentSnapShotBlock
                      if ext_call.success:
                          return ext_call.return_data[0]
          else:
              if not stor10.length:
                  return 0
              if stor10.length - 1 < stor10.length:
                  if snapshotId >= stor10[stor10.length].field_0:
                      if stor10.length - 1 < stor10.length:
                          return stor10[stor10.length].field_0
                  else:
                      if 0 < stor10.length:
                          if snapshotId < uint128(stor10.field_0):
                              return 0
                          s = 0
                          idx = 0
                          while stor10.length - 1 > idx:
                              require idx + stor10.length / 2 < stor10.length
                              mem[0] = 10
                              if stor10[0.5 / idx + stor10.length].field_0 > snapshotId:
                                  s = idx + stor10.length / 2
                                  idx = idx
                                  continue 
                              s = idx + stor10.length / 2
                              idx = idx + stor10.length / 2
                              continue 
                          if idx < stor10.length:
                              return stor10[idx].field_128
  revert

def balanceOf(address account): # not payable
  if not stor8[address(account)].field_0:
      if not parentTokenAddress:
          return 0
      if block.number < parentSnapShotBlock:
          if ext_code.size(parentTokenAddress):
              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                   gas gas_remaining - 710 wei
                  args address(account), block.number
              if ext_call.success:
                  return ext_call.return_data[0]
      else:
          if ext_code.size(parentTokenAddress):
              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                   gas gas_remaining - 710 wei
                  args address(account), parentSnapShotBlock
              if ext_call.success:
                  return ext_call.return_data[0]
  else:
      if 0 < stor8[address(account)].field_0:
          if stor8[address(account)].field_0 > block.number:
              if not parentTokenAddress:
                  return 0
              if block.number < parentSnapShotBlock:
                  if ext_code.size(parentTokenAddress):
                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                           gas gas_remaining - 710 wei
                          args address(account), block.number
                      if ext_call.success:
                          return ext_call.return_data[0]
              else:
                  if ext_code.size(parentTokenAddress):
                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                           gas gas_remaining - 710 wei
                          args address(account), parentSnapShotBlock
                      if ext_call.success:
                          return ext_call.return_data[0]
          else:
              if not stor8[address(account)].field_0:
                  return 0
              if stor8[address(account)].field_0 - 1 < stor8[address(account)].field_0:
                  if block.number >= stor8[address(account)][stor8[address(account)].field_0].field_0:
                      if stor8[address(account)].field_0 - 1 < stor8[address(account)].field_0:
                          return stor8[address(account)][stor8[address(account)].field_0].field_0
                  else:
                      if 0 < stor8[address(account)].field_0:
                          if block.number < stor8[address(account)].field_0:
                              return 0
                          s = 0
                          idx = 0
                          while stor8[address(account)].field_0 - 1 > idx:
                              require idx + stor8[address(account)].field_0 / 2 < stor8[address(account)].field_0
                              mem[0] = sha3(address(account), 8)
                              if stor8[address(account)][0.5 / idx + stor8[address(account)].field_0].field_0 > block.number:
                                  s = idx + stor8[address(account)].field_0 / 2
                                  idx = idx
                                  continue 
                              s = idx + stor8[address(account)].field_0 / 2
                              idx = idx + stor8[address(account)].field_0 / 2
                              continue 
                          if idx < stor8[address(account)].field_0:
                              return stor8[address(account)][idx].field_128
  revert

def balanceOfAt(address account, uint256 snapshotId): # not payable
  if not stor8[address(account)].field_0:
      if not parentTokenAddress:
          return 0
      if snapshotId < parentSnapShotBlock:
          if ext_code.size(parentTokenAddress):
              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                   gas gas_remaining - 710 wei
                  args address(account), snapshotId
              if ext_call.success:
                  return ext_call.return_data[0]
      else:
          if ext_code.size(parentTokenAddress):
              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                   gas gas_remaining - 710 wei
                  args address(account), parentSnapShotBlock
              if ext_call.success:
                  return ext_call.return_data[0]
  else:
      if 0 < stor8[address(account)].field_0:
          if stor8[address(account)].field_0 > snapshotId:
              if not parentTokenAddress:
                  return 0
              if snapshotId < parentSnapShotBlock:
                  if ext_code.size(parentTokenAddress):
                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                           gas gas_remaining - 710 wei
                          args address(account), snapshotId
                      if ext_call.success:
                          return ext_call.return_data[0]
              else:
                  if ext_code.size(parentTokenAddress):
                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                           gas gas_remaining - 710 wei
                          args address(account), parentSnapShotBlock
                      if ext_call.success:
                          return ext_call.return_data[0]
          else:
              if not stor8[address(account)].field_0:
                  return 0
              if stor8[address(account)].field_0 - 1 < stor8[address(account)].field_0:
                  if snapshotId >= stor8[address(account)][stor8[address(account)].field_0].field_0:
                      if stor8[address(account)].field_0 - 1 < stor8[address(account)].field_0:
                          return stor8[address(account)][stor8[address(account)].field_0].field_0
                  else:
                      if 0 < stor8[address(account)].field_0:
                          if snapshotId < stor8[address(account)].field_0:
                              return 0
                          s = 0
                          idx = 0
                          while stor8[address(account)].field_0 - 1 > idx:
                              require idx + stor8[address(account)].field_0 / 2 < stor8[address(account)].field_0
                              mem[0] = sha3(address(account), 8)
                              if stor8[address(account)][0.5 / idx + stor8[address(account)].field_0].field_0 > snapshotId:
                                  s = idx + stor8[address(account)].field_0 / 2
                                  idx = idx
                                  continue 
                              s = idx + stor8[address(account)].field_0 / 2
                              idx = idx + stor8[address(account)].field_0 / 2
                              continue 
                          if idx < stor8[address(account)].field_0:
                              return stor8[address(account)][idx].field_128
  revert

def approveAndCall(address _spender, uint256 _value, bytes _extraData): # not payable
  mem[128 len _extraData.length] = _extraData[all]
  require transfersEnabled
  if _value:
      require not allowance[caller][address(_spender)]
  if not controllerAddress:
      allowance[caller][address(_spender)] = _value
      log Approval(
            address owner=_value,
            address spender=caller,
            uint256 value=_spender)
      mem[ceil32(_extraData.length) + 128] = 0x8f4ffcb100000000000000000000000000000000000000000000000000000000
      mem[ceil32(_extraData.length) + 132] = caller
      mem[ceil32(_extraData.length) + 164] = _value
      mem[ceil32(_extraData.length) + 196] = this.address
      mem[ceil32(_extraData.length) + 228] = 128
      mem[ceil32(_extraData.length) + 260] = _extraData.length
      if not _extraData.length:
          if not _extraData.length % 32:
              if ext_code.size(_spender):
                  call _spender.receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) with:
                       gas gas_remaining - 710 wei
                      args 0, uint32(caller), _value, address(this.address), 128, _extraData.length, mem[ceil32(_extraData.length) + 292 len _extraData.length]
                  if ext_call.success:
                      return 1
          else:
              mem[floor32(_extraData.length) + ceil32(_extraData.length) + 292] = mem[floor32(_extraData.length) + ceil32(_extraData.length) + -(_extraData.length % 32) + 324 len _extraData.length % 32]
              if ext_code.size(_spender):
                  call _spender.receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) with:
                       gas gas_remaining - 710 wei
                      args caller, _value, address(this.address), Array(len=_extraData.length, data=mem[ceil32(_extraData.length) + 292 len floor32(_extraData.length) + 32])
                  if ext_call.success:
                      return 1
      else:
          mem[ceil32(_extraData.length) + 292] = mem[128]
          mem[ceil32(_extraData.length) + 324 len floor32(_extraData.length - 1)] = mem[160 len floor32(_extraData.length - 1)]
          if ext_code.size(_spender):
              call _spender.receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) with:
                   gas gas_remaining - 710 wei
                  args caller, _value, address(this.address), Array(len=_extraData.length, data=mem[ceil32(_extraData.length) + 292 len _extraData.length])
              if ext_call.success:
                  return 1
  else:
      if ext_code.size(controllerAddress) <= 0:
          allowance[caller][address(_spender)] = _value
          log Approval(
                address owner=_value,
                address spender=caller,
                uint256 value=_spender)
          mem[ceil32(_extraData.length) + 128] = 0x8f4ffcb100000000000000000000000000000000000000000000000000000000
          mem[ceil32(_extraData.length) + 132] = caller
          mem[ceil32(_extraData.length) + 164] = _value
          mem[ceil32(_extraData.length) + 196] = this.address
          mem[ceil32(_extraData.length) + 228] = 128
          mem[ceil32(_extraData.length) + 260] = _extraData.length
          if not _extraData.length:
              if not _extraData.length % 32:
                  if ext_code.size(_spender):
                      call _spender.receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) with:
                           gas gas_remaining - 710 wei
                          args 0, uint32(caller), _value, address(this.address), 128, _extraData.length, mem[ceil32(_extraData.length) + 292 len _extraData.length]
                      if ext_call.success:
                          return 1
              else:
                  mem[floor32(_extraData.length) + ceil32(_extraData.length) + 292] = mem[floor32(_extraData.length) + ceil32(_extraData.length) + -(_extraData.length % 32) + 324 len _extraData.length % 32]
                  if ext_code.size(_spender):
                      call _spender.receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) with:
                           gas gas_remaining - 710 wei
                          args caller, _value, address(this.address), Array(len=_extraData.length, data=mem[ceil32(_extraData.length) + 292 len floor32(_extraData.length) + 32])
                      if ext_call.success:
                          return 1
          else:
              mem[ceil32(_extraData.length) + 292] = mem[128]
              mem[ceil32(_extraData.length) + 324 len floor32(_extraData.length - 1)] = mem[160 len floor32(_extraData.length - 1)]
              if ext_code.size(_spender):
                  call _spender.receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) with:
                       gas gas_remaining - 710 wei
                      args caller, _value, address(this.address), Array(len=_extraData.length, data=mem[ceil32(_extraData.length) + 292 len _extraData.length])
                  if ext_call.success:
                      return 1
      else:
          if ext_code.size(controllerAddress):
              call controllerAddress.onApprove(address _owner, address _spender, uint256 _amount) with:
                   gas gas_remaining - 710 wei
                  args caller, address(_spender), _value
              if ext_call.success:
                  require ext_call.return_data[0]
                  allowance[caller][address(_spender)] = _value
                  log Approval(
                        address owner=_value,
                        address spender=caller,
                        uint256 value=_spender)
                  mem[ceil32(_extraData.length) + 128] = 0x8f4ffcb100000000000000000000000000000000000000000000000000000000
                  mem[ceil32(_extraData.length) + 132] = caller
                  mem[ceil32(_extraData.length) + 164] = _value
                  mem[ceil32(_extraData.length) + 196] = this.address
                  mem[ceil32(_extraData.length) + 228] = 128
                  mem[ceil32(_extraData.length) + 260] = _extraData.length
                  if not _extraData.length:
                      if not _extraData.length % 32:
                          if ext_code.size(_spender):
                              call _spender.receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) with:
                                   gas gas_remaining - 710 wei
                                  args 0, uint32(caller), _value, address(this.address), 128, _extraData.length, mem[ceil32(_extraData.length) + 292 len _extraData.length]
                              if ext_call.success:
                                  return 1
                      else:
                          mem[floor32(_extraData.length) + ceil32(_extraData.length) + 292] = mem[floor32(_extraData.length) + ceil32(_extraData.length) + -(_extraData.length % 32) + 324 len _extraData.length % 32]
                          if ext_code.size(_spender):
                              call _spender.receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) with:
                                   gas gas_remaining - 710 wei
                                  args caller, _value, address(this.address), Array(len=_extraData.length, data=mem[ceil32(_extraData.length) + 292 len floor32(_extraData.length) + 32])
                              if ext_call.success:
                                  return 1
                  else:
                      mem[ceil32(_extraData.length) + 292] = mem[128]
                      mem[ceil32(_extraData.length) + 324 len floor32(_extraData.length - 1)] = mem[160 len floor32(_extraData.length - 1)]
                      if ext_code.size(_spender):
                          call _spender.receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) with:
                               gas gas_remaining - 710 wei
                              args caller, _value, address(this.address), Array(len=_extraData.length, data=mem[ceil32(_extraData.length) + 292 len _extraData.length])
                          if ext_call.success:
                              return 1
  revert

def createCloneToken(string _cloneTokenName, uint8 _cloneDecimalUnits, string _cloneTokenSymbol, uint256 _snapshotBlock, bool _transfersEnabled): # not payable
  mem[128 len _cloneTokenName.length] = _cloneTokenName[all]
  mem[ceil32(_cloneTokenName.length) + 128] = _cloneTokenSymbol.length
  mem[ceil32(_cloneTokenName.length) + 160 len _cloneTokenSymbol.length] = _cloneTokenSymbol[all]
  mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 160] = 0x5b7b72c100000000000000000000000000000000000000000000000000000000
  mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 164] = this.address
  if _snapshotBlock:
      mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 196] = _snapshotBlock
      mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 260] = _cloneDecimalUnits
      mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 324] = _transfersEnabled
      mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 228] = 192
      mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 356] = _cloneTokenName.length
      if not _cloneTokenName.length:
          mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 292] = _cloneTokenName.length + 224
          mem[_cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 388] = _cloneTokenSymbol.length
          if not _cloneTokenSymbol.length:
              if not _cloneTokenSymbol.length % 32:
                  require ext_code.size(tokenFactoryAddress)
                  call tokenFactoryAddress.createCloneToken(address _parentToken, uint256 _snapshotBlock, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, bool _transfersEnabled) with:
                       gas gas_remaining - 710 wei
                      args address(this.address), _snapshotBlock, Array(len=_cloneTokenName.length, data=mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 388 len _cloneTokenSymbol.length + _cloneTokenName.length + 32]), _cloneDecimalUnits << 248, _cloneTokenName.length + 224, _transfersEnabled
              else:
                  mem[floor32(_cloneTokenSymbol.length) + _cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 420] = mem[floor32(_cloneTokenSymbol.length) + _cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + -(_cloneTokenSymbol.length % 32) + 452 len _cloneTokenSymbol.length % 32]
                  require ext_code.size(tokenFactoryAddress)
                  call tokenFactoryAddress.createCloneToken(address _parentToken, uint256 _snapshotBlock, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, bool _transfersEnabled) with:
                       gas gas_remaining - 710 wei
                      args address(this.address), _snapshotBlock, Array(len=_cloneTokenName.length, data=mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 388 len floor32(_cloneTokenSymbol.length) + _cloneTokenName.length + 64]), _cloneDecimalUnits << 248, _cloneTokenName.length + 224, _transfersEnabled
          else:
              mem[_cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 420] = mem[ceil32(_cloneTokenName.length) + 160]
              mem[_cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 452 len floor32(_cloneTokenSymbol.length - 1)] = mem[ceil32(_cloneTokenName.length) + 192 len floor32(_cloneTokenSymbol.length - 1)]
              if not _cloneTokenSymbol.length % 32:
                  require ext_code.size(tokenFactoryAddress)
                  call tokenFactoryAddress.createCloneToken(address _parentToken, uint256 _snapshotBlock, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, bool _transfersEnabled) with:
                       gas gas_remaining - 710 wei
                      args address(this.address), _snapshotBlock, Array(len=_cloneTokenName.length, data=mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 388 len _cloneTokenSymbol.length + _cloneTokenName.length + 32]), _cloneDecimalUnits << 248, _cloneTokenName.length + 224, _transfersEnabled
              else:
                  mem[floor32(_cloneTokenSymbol.length) + _cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 420] = mem[floor32(_cloneTokenSymbol.length) + _cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + -(_cloneTokenSymbol.length % 32) + 452 len _cloneTokenSymbol.length % 32]
                  require ext_code.size(tokenFactoryAddress)
                  call tokenFactoryAddress.createCloneToken(address _parentToken, uint256 _snapshotBlock, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, bool _transfersEnabled) with:
                       gas gas_remaining - 710 wei
                      args address(this.address), _snapshotBlock, Array(len=_cloneTokenName.length, data=mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 388 len _cloneTokenName.length + 32], mem[ceil32(_cloneTokenName.length) + 160], mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + _cloneTokenName.length + 452 len floor32(_cloneTokenSymbol.length)]), _cloneDecimalUnits << 248, _cloneTokenName.length + 224, _transfersEnabled
      else:
          mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 388] = mem[128]
          mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 420 len floor32(_cloneTokenName.length - 1)] = mem[160 len floor32(_cloneTokenName.length - 1)]
          mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 292] = _cloneTokenName.length + 224
          mem[_cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 388] = _cloneTokenSymbol.length
          if _cloneTokenSymbol.length:
              mem[_cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 420] = mem[ceil32(_cloneTokenName.length) + 160]
              mem[_cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 452 len floor32(_cloneTokenSymbol.length - 1)] = mem[ceil32(_cloneTokenName.length) + 192 len floor32(_cloneTokenSymbol.length - 1)]
          if not _cloneTokenSymbol.length % 32:
              require ext_code.size(tokenFactoryAddress)
              call tokenFactoryAddress.createCloneToken(address _parentToken, uint256 _snapshotBlock, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, bool _transfersEnabled) with:
                   gas gas_remaining - 710 wei
                  args address(this.address), _snapshotBlock, Array(len=_cloneTokenName.length, data=mem[128], mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 420 len _cloneTokenSymbol.length + _cloneTokenName.length]), _cloneDecimalUnits << 248, _cloneTokenName.length + 224, _transfersEnabled
          else:
              mem[floor32(_cloneTokenSymbol.length) + _cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 420] = mem[floor32(_cloneTokenSymbol.length) + _cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + -(_cloneTokenSymbol.length % 32) + 452 len _cloneTokenSymbol.length % 32]
              require ext_code.size(tokenFactoryAddress)
              call tokenFactoryAddress.createCloneToken(address _parentToken, uint256 _snapshotBlock, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, bool _transfersEnabled) with:
                   gas gas_remaining - 710 wei
                  args address(this.address), _snapshotBlock, Array(len=_cloneTokenName.length, data=mem[128], mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 420 len floor32(_cloneTokenSymbol.length) + _cloneTokenName.length + 32]), _cloneDecimalUnits << 248, _cloneTokenName.length + 224, _transfersEnabled
      require ext_call.success
      require ext_code.size(address(ext_call.return_data[0]))
      call address(ext_call.return_data[0]).changeController(address _newController) with:
           gas gas_remaining - 710 wei
          args caller
      require ext_call.success
      log NewCloneToken(
            address _cloneToken=_snapshotBlock,
            uint256 _snapshotBlock=address(ext_call.return_data[0]))
  else:
      mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 196] = block.number
      mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 260] = _cloneDecimalUnits
      mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 324] = _transfersEnabled
      mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 228] = 192
      mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 356] = _cloneTokenName.length
      if not _cloneTokenName.length:
          mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 292] = _cloneTokenName.length + 224
          mem[_cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 388] = _cloneTokenSymbol.length
          if not _cloneTokenSymbol.length:
              if not _cloneTokenSymbol.length % 32:
                  require ext_code.size(tokenFactoryAddress)
                  call tokenFactoryAddress.createCloneToken(address _parentToken, uint256 _snapshotBlock, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, bool _transfersEnabled) with:
                       gas gas_remaining - 710 wei
                      args address(this.address), block.number, Array(len=_cloneTokenName.length, data=mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 388 len _cloneTokenSymbol.length + _cloneTokenName.length + 32]), _cloneDecimalUnits << 248, _cloneTokenName.length + 224, _transfersEnabled
              else:
                  mem[floor32(_cloneTokenSymbol.length) + _cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 420] = mem[floor32(_cloneTokenSymbol.length) + _cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + -(_cloneTokenSymbol.length % 32) + 452 len _cloneTokenSymbol.length % 32]
                  require ext_code.size(tokenFactoryAddress)
                  call tokenFactoryAddress.createCloneToken(address _parentToken, uint256 _snapshotBlock, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, bool _transfersEnabled) with:
                       gas gas_remaining - 710 wei
                      args address(this.address), block.number, Array(len=_cloneTokenName.length, data=mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 388 len floor32(_cloneTokenSymbol.length) + _cloneTokenName.length + 64]), _cloneDecimalUnits << 248, _cloneTokenName.length + 224, _transfersEnabled
          else:
              mem[_cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 420] = mem[ceil32(_cloneTokenName.length) + 160]
              mem[_cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 452 len floor32(_cloneTokenSymbol.length - 1)] = mem[ceil32(_cloneTokenName.length) + 192 len floor32(_cloneTokenSymbol.length - 1)]
              if not _cloneTokenSymbol.length % 32:
                  require ext_code.size(tokenFactoryAddress)
                  call tokenFactoryAddress.createCloneToken(address _parentToken, uint256 _snapshotBlock, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, bool _transfersEnabled) with:
                       gas gas_remaining - 710 wei
                      args address(this.address), block.number, Array(len=_cloneTokenName.length, data=mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 388 len _cloneTokenSymbol.length + _cloneTokenName.length + 32]), _cloneDecimalUnits << 248, _cloneTokenName.length + 224, _transfersEnabled
              else:
                  mem[floor32(_cloneTokenSymbol.length) + _cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 420] = mem[floor32(_cloneTokenSymbol.length) + _cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + -(_cloneTokenSymbol.length % 32) + 452 len _cloneTokenSymbol.length % 32]
                  require ext_code.size(tokenFactoryAddress)
                  call tokenFactoryAddress.createCloneToken(address _parentToken, uint256 _snapshotBlock, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, bool _transfersEnabled) with:
                       gas gas_remaining - 710 wei
                      args address(this.address), block.number, Array(len=_cloneTokenName.length, data=mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 388 len _cloneTokenName.length + 32], mem[ceil32(_cloneTokenName.length) + 160], mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + _cloneTokenName.length + 452 len floor32(_cloneTokenSymbol.length)]), _cloneDecimalUnits << 248, _cloneTokenName.length + 224, _transfersEnabled
      else:
          mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 388] = mem[128]
          mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 420 len floor32(_cloneTokenName.length - 1)] = mem[160 len floor32(_cloneTokenName.length - 1)]
          mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 292] = _cloneTokenName.length + 224
          mem[_cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 388] = _cloneTokenSymbol.length
          if _cloneTokenSymbol.length:
              mem[_cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 420] = mem[ceil32(_cloneTokenName.length) + 160]
              mem[_cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 452 len floor32(_cloneTokenSymbol.length - 1)] = mem[ceil32(_cloneTokenName.length) + 192 len floor32(_cloneTokenSymbol.length - 1)]
          if not _cloneTokenSymbol.length % 32:
              require ext_code.size(tokenFactoryAddress)
              call tokenFactoryAddress.createCloneToken(address _parentToken, uint256 _snapshotBlock, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, bool _transfersEnabled) with:
                   gas gas_remaining - 710 wei
                  args address(this.address), block.number, Array(len=_cloneTokenName.length, data=mem[128], mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 420 len _cloneTokenSymbol.length + _cloneTokenName.length]), _cloneDecimalUnits << 248, _cloneTokenName.length + 224, _transfersEnabled
          else:
              mem[floor32(_cloneTokenSymbol.length) + _cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 420] = mem[floor32(_cloneTokenSymbol.length) + _cloneTokenName.length + ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + -(_cloneTokenSymbol.length % 32) + 452 len _cloneTokenSymbol.length % 32]
              require ext_code.size(tokenFactoryAddress)
              call tokenFactoryAddress.createCloneToken(address _parentToken, uint256 _snapshotBlock, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, bool _transfersEnabled) with:
                   gas gas_remaining - 710 wei
                  args address(this.address), block.number, Array(len=_cloneTokenName.length, data=mem[128], mem[ceil32(_cloneTokenName.length) + ceil32(_cloneTokenSymbol.length) + 420 len floor32(_cloneTokenSymbol.length) + _cloneTokenName.length + 32]), _cloneDecimalUnits << 248, _cloneTokenName.length + 224, _transfersEnabled
      require ext_call.success
      require ext_code.size(address(ext_call.return_data[0]))
      call address(ext_call.return_data[0]).changeController(address _newController) with:
           gas gas_remaining - 710 wei
          args caller
      require ext_call.success
      log NewCloneToken(
            address _cloneToken=block.number,
            uint256 _snapshotBlock=address(ext_call.return_data[0]))
  return address(ext_call.return_data[0])

def transfer(address recipient, uint256 amount): # not payable
  require transfersEnabled
  if not amount:
      return 1
  require parentSnapShotBlock < block.number
  require recipient
  require recipient != this.address
  if not stor8[caller].field_0:
      if parentTokenAddress:
          require ext_code.size(parentTokenAddress)
          if block.number < parentSnapShotBlock:
              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                   gas gas_remaining - 710 wei
                  args caller, block.number
          else:
              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                   gas gas_remaining - 710 wei
                  args caller, parentSnapShotBlock
          require ext_call.success
          if ext_call.return_data[0] < amount:
              return 0
          if not controllerAddress:
              if not stor8[caller].field_0:
                  stor8[caller].field_0++
                  if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                      require stor8[caller].field_0 < stor8[caller].field_0
                      stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                      stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                      if not stor8[address(recipient)].field_0:
                          if not parentTokenAddress:
                              require amount >= 0
                          else:
                      else:
                          require 0 < stor8[address(recipient)].field_0
                          if stor8[address(recipient)].field_0 > block.number:
              else:
                  require stor8[caller].field_0 - 1 < stor8[caller].field_0
                  if stor8[caller][stor8[caller].field_0].field_0 < block.number:
                      stor8[caller].field_0++
                      if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                          require stor8[caller].field_0 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                          stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                  else:
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      stor8[caller][stor8[caller].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                      if not stor8[address(recipient)].field_0:
                          if not parentTokenAddress:
                              require amount >= 0
                      else:
                          require 0 < stor8[address(recipient)].field_0
                          if stor8[address(recipient)].field_0 <= block.number:
                              if stor8[address(recipient)].field_0:
                          else:
                              if parentTokenAddress:
          else:
              if ext_code.size(controllerAddress) <= 0:
                  if not stor8[caller].field_0:
                      stor8[caller].field_0++
                      if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                          require stor8[caller].field_0 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                          stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require amount >= 0
                              else:
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 > block.number:
                  else:
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      if stor8[caller][stor8[caller].field_0].field_0 < block.number:
                          stor8[caller].field_0++
                          if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                      else:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require amount >= 0
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 <= block.number:
                                  if stor8[address(recipient)].field_0:
                              else:
                                  if parentTokenAddress:
              else:
                  require ext_code.size(controllerAddress)
                  call controllerAddress.'J91I' with:
                       gas gas_remaining - 710 wei
                      args caller, address(recipient), amount
                  require ext_call.success
                  require ext_call.return_data[0]
                  if not stor8[caller].field_0:
                      stor8[caller].field_0++
                      if not stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[caller].field_0 < stor8[caller].field_0
                      stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                      stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                      if not stor8[address(recipient)].field_0:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require 0 < stor8[address(recipient)].field_0
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require stor8[caller].field_0 - 1 < stor8[caller].field_0
                  if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      stor8[caller][stor8[caller].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                      if not stor8[address(recipient)].field_0:
                          if parentTokenAddress:
                      else:
                          require 0 < stor8[address(recipient)].field_0
                  else:
                      stor8[caller].field_0++
                      if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                          require stor8[caller].field_0 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                          stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
      else:
          if 0 < amount:
              return 0
          if not controllerAddress:
              if not stor8[caller].field_0:
                  stor8[caller].field_0++
                  if not stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require stor8[caller].field_0 < stor8[caller].field_0
                  stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                  stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                  if not stor8[address(recipient)].field_0:
                      if not parentTokenAddress:
                          require amount >= 0
                          if stor8[address(recipient)].field_0:
                              require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          stor8[address(recipient)].field_0++
                          if not stor8[address(recipient)].field_0 > stor8[address(recipient)].field_0 + 1:
                      else:
                          require ext_code.size(parentTokenAddress)
                          if block.number < parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(recipient), block.number
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(recipient), parentSnapShotBlock
                          require ext_call.success
                          require ext_call.return_data[0] + amount >= ext_call.return_data[0]
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require 0 < stor8[address(recipient)].field_0
                  if stor8[address(recipient)].field_0 <= block.number:
                      if not stor8[address(recipient)].field_0:
                          require amount >= 0
                      else:
                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                          if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                              require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require 0 < stor8[address(recipient)].field_0
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  if not parentTokenAddress:
                      require amount >= 0
                      if not stor8[address(recipient)].field_0:
                          stor8[address(recipient)].field_0++
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  if block.number < parentSnapShotBlock:
                      if ext_code.size(parentTokenAddress):
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining - 710 wei
                              args address(recipient), block.number
                          if ext_call.success:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  else:
                      if ext_code.size(parentTokenAddress):
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining - 710 wei
                              args address(recipient), parentSnapShotBlock
                          if ext_call.success:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  revert
              require stor8[caller].field_0 - 1 < stor8[caller].field_0
              if stor8[caller][stor8[caller].field_0].field_0 < block.number:
                  stor8[caller].field_0++
                  if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                      require stor8[caller].field_0 < stor8[caller].field_0
                      stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                      stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                      if not stor8[address(recipient)].field_0:
                          if not parentTokenAddress:
                              require amount >= 0
                      else:
                          require 0 < stor8[address(recipient)].field_0
                          if stor8[address(recipient)].field_0 <= block.number:
                              if stor8[address(recipient)].field_0:
                          else:
                              if parentTokenAddress:
              else:
                  require stor8[caller].field_0 - 1 < stor8[caller].field_0
                  stor8[caller][stor8[caller].field_0].field_0 = uint128(-amount)
                  if not stor8[address(recipient)].field_0:
                      if not parentTokenAddress:
                          require amount >= 0
                          if stor8[address(recipient)].field_0:
                              require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          stor8[address(recipient)].field_0++
                          if not stor8[address(recipient)].field_0 <= stor8[address(recipient)].field_0 + 1:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[address(recipient)].field_0 < stor8[address(recipient)].field_0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require ext_code.size(parentTokenAddress)
                      if block.number < parentSnapShotBlock:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining - 710 wei
                              args address(recipient), block.number
                      else:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining - 710 wei
                              args address(recipient), parentSnapShotBlock
                      require ext_call.success
                      require ext_call.return_data[0] + amount >= ext_call.return_data[0]
                  else:
                      require 0 < stor8[address(recipient)].field_0
                      if stor8[address(recipient)].field_0 > block.number:
                          if not parentTokenAddress:
                              require amount >= 0
                              if not stor8[address(recipient)].field_0:
                                  stor8[address(recipient)].field_0++
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          if block.number < parentSnapShotBlock:
                              if ext_code.size(parentTokenAddress):
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining - 710 wei
                                      args address(recipient), block.number
                                  if ext_call.success:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          else:
                              if ext_code.size(parentTokenAddress):
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining - 710 wei
                                      args address(recipient), parentSnapShotBlock
                                  if ext_call.success:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          revert
                      if not stor8[address(recipient)].field_0:
                          require amount >= 0
                      else:
                          require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                          if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                              require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require 0 < stor8[address(recipient)].field_0
                          if block.number >= stor8[address(recipient)].field_0:
          else:
              if ext_code.size(controllerAddress) <= 0:
                  if not stor8[caller].field_0:
                      stor8[caller].field_0++
                      if not stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[caller].field_0 < stor8[caller].field_0
                      stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                      stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                      if not stor8[address(recipient)].field_0:
                          if not parentTokenAddress:
                              require amount >= 0
                              if stor8[address(recipient)].field_0:
                                  require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(recipient)].field_0++
                              if not stor8[address(recipient)].field_0 > stor8[address(recipient)].field_0 + 1:
                          else:
                              require ext_code.size(parentTokenAddress)
                              if block.number < parentSnapShotBlock:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining - 710 wei
                                      args address(recipient), block.number
                              else:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining - 710 wei
                                      args address(recipient), parentSnapShotBlock
                              require ext_call.success
                              require ext_call.return_data[0] + amount >= ext_call.return_data[0]
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require 0 < stor8[address(recipient)].field_0
                      if stor8[address(recipient)].field_0 <= block.number:
                          if not stor8[address(recipient)].field_0:
                              require amount >= 0
                          else:
                              require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                              if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                                  require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require 0 < stor8[address(recipient)].field_0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      if not parentTokenAddress:
                          require amount >= 0
                          if not stor8[address(recipient)].field_0:
                              stor8[address(recipient)].field_0++
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      if block.number < parentSnapShotBlock:
                          if ext_code.size(parentTokenAddress):
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(recipient), block.number
                              if ext_call.success:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      else:
                          if ext_code.size(parentTokenAddress):
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(recipient), parentSnapShotBlock
                              if ext_call.success:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      revert
                  require stor8[caller].field_0 - 1 < stor8[caller].field_0
                  if stor8[caller][stor8[caller].field_0].field_0 < block.number:
                      stor8[caller].field_0++
                      if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                          require stor8[caller].field_0 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                          stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require amount >= 0
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 <= block.number:
                                  if stor8[address(recipient)].field_0:
                              else:
                                  if parentTokenAddress:
                  else:
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      stor8[caller][stor8[caller].field_0].field_0 = uint128(-amount)
                      if not stor8[address(recipient)].field_0:
                          if not parentTokenAddress:
                              require amount >= 0
                              if stor8[address(recipient)].field_0:
                                  require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(recipient)].field_0++
                              if not stor8[address(recipient)].field_0 <= stor8[address(recipient)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(recipient)].field_0 < stor8[address(recipient)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require ext_code.size(parentTokenAddress)
                          if block.number < parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(recipient), block.number
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(recipient), parentSnapShotBlock
                          require ext_call.success
                          require ext_call.return_data[0] + amount >= ext_call.return_data[0]
                      else:
                          require 0 < stor8[address(recipient)].field_0
                          if stor8[address(recipient)].field_0 > block.number:
                              if not parentTokenAddress:
                                  require amount >= 0
                                  if not stor8[address(recipient)].field_0:
                                      stor8[address(recipient)].field_0++
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              if block.number < parentSnapShotBlock:
                                  if ext_code.size(parentTokenAddress):
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining - 710 wei
                                          args address(recipient), block.number
                                      if ext_call.success:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              else:
                                  if ext_code.size(parentTokenAddress):
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining - 710 wei
                                          args address(recipient), parentSnapShotBlock
                                      if ext_call.success:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              revert
                          if not stor8[address(recipient)].field_0:
                              require amount >= 0
                          else:
                              require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                              if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                                  require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require 0 < stor8[address(recipient)].field_0
                              if block.number >= stor8[address(recipient)].field_0:
              else:
                  require ext_code.size(controllerAddress)
                  call controllerAddress.'J91I' with:
                       gas gas_remaining - 710 wei
                      args caller, address(recipient), amount
                  require ext_call.success
                  require ext_call.return_data[0]
                  if stor8[caller].field_0:
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      if stor8[caller][stor8[caller].field_0].field_0 < block.number:
                          stor8[caller].field_0++
                          if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      stor8[caller][stor8[caller].field_0].field_0 = uint128(-amount)
                      if not stor8[address(recipient)].field_0:
                          if not parentTokenAddress:
                              require amount >= 0
                              if not stor8[address(recipient)].field_0:
                                  stor8[address(recipient)].field_0++
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          if block.number < parentSnapShotBlock:
                              if ext_code.size(parentTokenAddress):
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining - 710 wei
                                      args address(recipient), block.number
                                  if ext_call.success:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          else:
                              if ext_code.size(parentTokenAddress):
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining - 710 wei
                                      args address(recipient), parentSnapShotBlock
                                  if ext_call.success:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      else:
                          if 0 < stor8[address(recipient)].field_0:
                              if stor8[address(recipient)].field_0 > block.number:
                                  if not parentTokenAddress:
                                      require amount >= 0
                                  else:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              if not stor8[address(recipient)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              if stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0:
                                  if block.number < stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                                      if 0 < stor8[address(recipient)].field_0:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  else:
                                      if stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      revert
                  stor8[caller].field_0++
                  if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                      require stor8[caller].field_0 < stor8[caller].field_0
                      stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                      stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                      if not stor8[address(recipient)].field_0:
                          if not parentTokenAddress:
                              require amount >= 0
                              if not stor8[address(recipient)].field_0:
                                  stor8[address(recipient)].field_0++
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          if block.number < parentSnapShotBlock:
                              if ext_code.size(parentTokenAddress):
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining - 710 wei
                                      args address(recipient), block.number
                                  if ext_call.success:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          else:
                              if ext_code.size(parentTokenAddress):
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining - 710 wei
                                      args address(recipient), parentSnapShotBlock
                                  if ext_call.success:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          revert
                      require 0 < stor8[address(recipient)].field_0
                      if stor8[address(recipient)].field_0 > block.number:
                          if not parentTokenAddress:
                              require amount >= 0
                      else:
                          if stor8[address(recipient)].field_0:
                              require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                              if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
  else:
      require 0 < stor8[caller].field_0
      if stor8[caller].field_0 <= block.number:
          if not stor8[caller].field_0:
              if 0 < amount:
                  return 0
              if not controllerAddress:
                  if stor8[caller].field_0:
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require amount >= 0
                              else:
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 <= block.number:
                                  if not stor8[address(recipient)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              if parentTokenAddress:
                      else:
                          stor8[caller].field_0++
                          if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                              if stor8[address(recipient)].field_0:
                  else:
                      stor8[caller].field_0++
                      if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                          require stor8[caller].field_0 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                          stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require amount >= 0
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 <= block.number:
                                  if stor8[address(recipient)].field_0:
                              else:
                                  if parentTokenAddress:
              else:
                  if ext_code.size(controllerAddress) <= 0:
                      if stor8[caller].field_0:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                              require stor8[caller].field_0 - 1 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require amount >= 0
                                  else:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 <= block.number:
                                      if not stor8[address(recipient)].field_0:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if parentTokenAddress:
                          else:
                              stor8[caller].field_0++
                              if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                                  require stor8[caller].field_0 < stor8[caller].field_0
                                  stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                                  stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                                  if stor8[address(recipient)].field_0:
                      else:
                          stor8[caller].field_0++
                          if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require amount >= 0
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 <= block.number:
                                      if stor8[address(recipient)].field_0:
                                  else:
                                      if parentTokenAddress:
                  else:
                      require ext_code.size(controllerAddress)
                      call controllerAddress.'J91I' with:
                           gas gas_remaining - 710 wei
                          args caller, address(recipient), amount
                      require ext_call.success
                      require ext_call.return_data[0]
                      if not stor8[caller].field_0:
                          stor8[caller].field_0++
                          if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                      else:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          if stor8[caller][stor8[caller].field_0].field_0 < block.number:
                              stor8[caller].field_0++
                              if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                                  require stor8[caller].field_0 < stor8[caller].field_0
                                  stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                                  stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                          else:
                              require stor8[caller].field_0 - 1 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
          else:
              require stor8[caller].field_0 - 1 < stor8[caller].field_0
              if block.number < stor8[caller][stor8[caller].field_0].field_0:
                  require 0 < stor8[caller].field_0
                  if block.number >= stor8[caller].field_0:
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  if 0 < amount:
                      return 0
                  if not controllerAddress:
                      if not stor8[caller].field_0:
                          stor8[caller].field_0++
                          if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                              if stor8[address(recipient)].field_0:
                      else:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                              require stor8[caller].field_0 - 1 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require 0 < stor8[address(recipient)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          stor8[caller].field_0++
                          if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  if ext_code.size(controllerAddress) <= 0:
                      if not stor8[caller].field_0:
                          stor8[caller].field_0++
                          if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                              if stor8[address(recipient)].field_0:
                      else:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                              require stor8[caller].field_0 - 1 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require 0 < stor8[address(recipient)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          stor8[caller].field_0++
                          if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require ext_code.size(controllerAddress)
                  call controllerAddress.'J91I' with:
                       gas gas_remaining - 710 wei
                      args caller, address(recipient), amount
                  require ext_call.success
                  require ext_call.return_data[0]
                  if not stor8[caller].field_0:
                      stor8[caller].field_0++
                      if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                          require stor8[caller].field_0 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                          stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require stor8[caller].field_0 - 1 < stor8[caller].field_0
                  if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      stor8[caller][stor8[caller].field_0].field_0 = uint128(-amount)
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  stor8[caller].field_0++
                  if not stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require stor8[caller].field_0 < stor8[caller].field_0
                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
              require stor8[caller].field_0 - 1 < stor8[caller].field_0
              if stor8[caller][stor8[caller].field_0].field_0 < amount:
                  return 0
              if not controllerAddress:
                  if not stor8[caller].field_0:
                      stor8[caller].field_0++
                      if not stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[caller].field_0 < stor8[caller].field_0
                      stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                      stor8[caller][stor8[caller].field_0].field_128 = uint128(stor8[caller][stor8[caller].field_0].field_0 - amount)
                      if not stor8[address(recipient)].field_0:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require 0 < stor8[address(recipient)].field_0
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require stor8[caller].field_0 - 1 < stor8[caller].field_0
                  if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      stor8[caller][stor8[caller].field_0].field_0 = uint128(stor8[caller][stor8[caller].field_0].field_0 - amount)
                      if not stor8[address(recipient)].field_0:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require 0 < stor8[address(recipient)].field_0
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  stor8[caller].field_0++
                  if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                      require stor8[caller].field_0 < stor8[caller].field_0
                      stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                      stor8[caller][stor8[caller].field_0].field_128 = uint128(stor8[caller][stor8[caller].field_0].field_0 - amount)
              else:
                  if ext_code.size(controllerAddress) <= 0:
                      if not stor8[caller].field_0:
                          stor8[caller].field_0++
                          if not stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[caller].field_0 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                          stor8[caller][stor8[caller].field_0].field_128 = uint128(stor8[caller][stor8[caller].field_0].field_0 - amount)
                          if not stor8[address(recipient)].field_0:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require 0 < stor8[address(recipient)].field_0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(stor8[caller][stor8[caller].field_0].field_0 - amount)
                          if not stor8[address(recipient)].field_0:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require 0 < stor8[address(recipient)].field_0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      stor8[caller].field_0++
                      if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                          require stor8[caller].field_0 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                          stor8[caller][stor8[caller].field_0].field_128 = uint128(stor8[caller][stor8[caller].field_0].field_0 - amount)
                  else:
                      require ext_code.size(controllerAddress)
                      call controllerAddress.'J91I' with:
                           gas gas_remaining - 710 wei
                          args caller, address(recipient), amount
                      require ext_call.success
                      require ext_call.return_data[0]
                      if not stor8[caller].field_0:
                          stor8[caller].field_0++
                          if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(stor8[caller][stor8[caller].field_0].field_0 - amount)
                      else:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                              require stor8[caller].field_0 - 1 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(stor8[caller][stor8[caller].field_0].field_0 - amount)
                          else:
                              stor8[caller].field_0++
                              if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                                  require stor8[caller].field_0 < stor8[caller].field_0
                                  stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                                  stor8[caller][stor8[caller].field_0].field_128 = uint128(stor8[caller][stor8[caller].field_0].field_0 - amount)
      else:
          if not parentTokenAddress:
              if 0 < amount:
                  return 0
              if not controllerAddress:
                  if stor8[caller].field_0:
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      if stor8[caller][stor8[caller].field_0].field_0 < block.number:
                          stor8[caller].field_0++
                          if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      stor8[caller][stor8[caller].field_0].field_0 = uint128(-amount)
                      if not stor8[address(recipient)].field_0:
                          if not parentTokenAddress:
                              require amount >= 0
                              if not stor8[address(recipient)].field_0:
                                  stor8[address(recipient)].field_0++
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          if block.number < parentSnapShotBlock:
                              if ext_code.size(parentTokenAddress):
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining - 710 wei
                                      args address(recipient), block.number
                                  if ext_call.success:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          else:
                              if ext_code.size(parentTokenAddress):
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining - 710 wei
                                      args address(recipient), parentSnapShotBlock
                                  if ext_call.success:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      else:
                          if 0 < stor8[address(recipient)].field_0:
                              if stor8[address(recipient)].field_0 > block.number:
                                  if not parentTokenAddress:
                                      require amount >= 0
                                  else:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              if not stor8[address(recipient)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              if stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0:
                                  if block.number < stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                                      if 0 < stor8[address(recipient)].field_0:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  else:
                                      if stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      revert
                  stor8[caller].field_0++
                  if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                      require stor8[caller].field_0 < stor8[caller].field_0
                      stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                      stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                      if not stor8[address(recipient)].field_0:
                          if not parentTokenAddress:
                              require amount >= 0
                              if not stor8[address(recipient)].field_0:
                                  stor8[address(recipient)].field_0++
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          if block.number < parentSnapShotBlock:
                              if ext_code.size(parentTokenAddress):
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining - 710 wei
                                      args address(recipient), block.number
                                  if ext_call.success:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          else:
                              if ext_code.size(parentTokenAddress):
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining - 710 wei
                                      args address(recipient), parentSnapShotBlock
                                  if ext_call.success:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          revert
                      require 0 < stor8[address(recipient)].field_0
                      if stor8[address(recipient)].field_0 > block.number:
                          if not parentTokenAddress:
                              require amount >= 0
                      else:
                          if stor8[address(recipient)].field_0:
                              require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                              if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
              else:
                  if ext_code.size(controllerAddress) <= 0:
                      if stor8[caller].field_0:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          if stor8[caller][stor8[caller].field_0].field_0 < block.number:
                              stor8[caller].field_0++
                              if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                                  require stor8[caller].field_0 < stor8[caller].field_0
                                  stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                                  stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                                  if not stor8[address(recipient)].field_0:
                                      if parentTokenAddress:
                                  else:
                                      require 0 < stor8[address(recipient)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require amount >= 0
                                  if not stor8[address(recipient)].field_0:
                                      stor8[address(recipient)].field_0++
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              if block.number < parentSnapShotBlock:
                                  if ext_code.size(parentTokenAddress):
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining - 710 wei
                                          args address(recipient), block.number
                                      if ext_call.success:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              else:
                                  if ext_code.size(parentTokenAddress):
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining - 710 wei
                                          args address(recipient), parentSnapShotBlock
                                      if ext_call.success:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          else:
                              if 0 < stor8[address(recipient)].field_0:
                                  if stor8[address(recipient)].field_0 > block.number:
                                      if not parentTokenAddress:
                                          require amount >= 0
                                      else:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if not stor8[address(recipient)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0:
                                      if block.number < stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                                          if 0 < stor8[address(recipient)].field_0:
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      else:
                                          if stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0:
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          revert
                      stor8[caller].field_0++
                      if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                          require stor8[caller].field_0 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                          stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require amount >= 0
                                  if not stor8[address(recipient)].field_0:
                                      stor8[address(recipient)].field_0++
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              if block.number < parentSnapShotBlock:
                                  if ext_code.size(parentTokenAddress):
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining - 710 wei
                                          args address(recipient), block.number
                                      if ext_call.success:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              else:
                                  if ext_code.size(parentTokenAddress):
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining - 710 wei
                                          args address(recipient), parentSnapShotBlock
                                      if ext_call.success:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              revert
                          require 0 < stor8[address(recipient)].field_0
                          if stor8[address(recipient)].field_0 > block.number:
                              if not parentTokenAddress:
                                  require amount >= 0
                          else:
                              if stor8[address(recipient)].field_0:
                                  require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                  if block.number >= stor8[address(recipient)][stor8[address(recipient)].field_0].field_0:
                  else:
                      require ext_code.size(controllerAddress)
                      call controllerAddress.'J91I' with:
                           gas gas_remaining - 710 wei
                          args caller, address(recipient), amount
                      require ext_call.success
                      require ext_call.return_data[0]
                      if stor8[caller].field_0:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                              require stor8[caller].field_0 - 1 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require amount >= 0
                                  else:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 <= block.number:
                                      if not stor8[address(recipient)].field_0:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if parentTokenAddress:
                          else:
                              stor8[caller].field_0++
                              if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                                  require stor8[caller].field_0 < stor8[caller].field_0
                                  stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                                  stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                                  if stor8[address(recipient)].field_0:
                      else:
                          stor8[caller].field_0++
                          if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require amount >= 0
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 <= block.number:
                                      if stor8[address(recipient)].field_0:
                                  else:
                                      if parentTokenAddress:
          else:
              require ext_code.size(parentTokenAddress)
              if block.number < parentSnapShotBlock:
                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                       gas gas_remaining - 710 wei
                      args caller, block.number
              else:
                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                       gas gas_remaining - 710 wei
                      args caller, parentSnapShotBlock
              require ext_call.success
              if ext_call.return_data[0] < amount:
                  return 0
              if not controllerAddress:
                  if not stor8[caller].field_0:
                      stor8[caller].field_0++
                      if not stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[caller].field_0 < stor8[caller].field_0
                      stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                      stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                      if not stor8[address(recipient)].field_0:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require 0 < stor8[address(recipient)].field_0
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require stor8[caller].field_0 - 1 < stor8[caller].field_0
                  if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      stor8[caller][stor8[caller].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                      if not stor8[address(recipient)].field_0:
                          if parentTokenAddress:
                      else:
                          require 0 < stor8[address(recipient)].field_0
                  else:
                      stor8[caller].field_0++
                      if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                          require stor8[caller].field_0 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                          stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
              else:
                  if ext_code.size(controllerAddress) <= 0:
                      if not stor8[caller].field_0:
                          stor8[caller].field_0++
                          if not stor8[caller].field_0 <= stor8[caller].field_0 + 1:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[caller].field_0 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                          stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                          if not stor8[address(recipient)].field_0:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require 0 < stor8[address(recipient)].field_0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[caller].field_0 - 1 < stor8[caller].field_0
                      if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          stor8[caller][stor8[caller].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                          if not stor8[address(recipient)].field_0:
                              if parentTokenAddress:
                          else:
                              require 0 < stor8[address(recipient)].field_0
                      else:
                          stor8[caller].field_0++
                          if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                  else:
                      require ext_code.size(controllerAddress)
                      call controllerAddress.'J91I' with:
                           gas gas_remaining - 710 wei
                          args caller, address(recipient), amount
                      require ext_call.success
                      require ext_call.return_data[0]
                      if not stor8[caller].field_0:
                          stor8[caller].field_0++
                          if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                              require stor8[caller].field_0 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                              stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                      else:
                          require stor8[caller].field_0 - 1 < stor8[caller].field_0
                          if stor8[caller][stor8[caller].field_0].field_0 >= block.number:
                              require stor8[caller].field_0 - 1 < stor8[caller].field_0
                              stor8[caller][stor8[caller].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                              if stor8[address(recipient)].field_0:
                          else:
                              stor8[caller].field_0++
                              if not stor8[caller].field_0 > stor8[caller].field_0 + 1:
                                  require stor8[caller].field_0 < stor8[caller].field_0
                                  stor8[caller][stor8[caller].field_0].field_0 = uint128(block.number)
                                  stor8[caller][stor8[caller].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)

def destroyTokens(address _owner, uint256 _amount): # not payable
  require controllerAddress == caller
  if not stor10.length:
      require 0 >= _amount
      if not stor10.length:
          stor10.length++
          if not stor10.length > stor10.length + 1:
              require stor10.length < stor10.length
              stor10[stor10.length].field_0 = uint128(block.number)
              stor10[stor10.length].field_128 = uint128(-_amount)
              if not stor8[address(_owner)].field_0:
                  if not parentTokenAddress:
                      require 0 >= _amount
                      if not stor8[address(_owner)].field_0:
                          stor8[address(_owner)].field_0++
                          if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                          log Transfer(
                                address from=_amount,
                                address to=_owner,
                                uint256 value=0)
                          return 1
                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                      if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                          log Transfer(
                                address from=_amount,
                                address to=_owner,
                                uint256 value=0)
                          return 1
                      stor8[address(_owner)].field_0++
                      if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                          require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                  else:
                      require ext_code.size(parentTokenAddress)
                      if block.number < parentSnapShotBlock:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining - 710 wei
                              args address(_owner), block.number
                      else:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining - 710 wei
                              args address(_owner), parentSnapShotBlock
                      require ext_call.success
                      require ext_call.return_data[0] >= _amount
                      if stor8[address(_owner)].field_0:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(ext_call.return_data[0] - _amount)
                          else:
                              stor8[address(_owner)].field_0++
                      else:
                          stor8[address(_owner)].field_0++
                          if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(ext_call.return_data[0] - _amount)
              else:
                  require 0 < stor8[address(_owner)].field_0
                  if stor8[address(_owner)].field_0 <= block.number:
                      if not stor8[address(_owner)].field_0:
                          require 0 >= _amount
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                              else:
                                  stor8[address(_owner)].field_0++
                                  if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                      else:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if block.number >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= _amount
                              if stor8[address(_owner)].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require 0 < stor8[address(_owner)].field_0
                          if block.number < stor8[address(_owner)].field_0:
                              require 0 >= _amount
                              if stor8[address(_owner)].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                  else:
                      if not parentTokenAddress:
                          require 0 >= _amount
                          if stor8[address(_owner)].field_0:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                                  log Transfer(
                                        address from=_amount,
                                        address to=_owner,
                                        uint256 value=0)
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          stor8[address(_owner)].field_0++
                          if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                              log Transfer(
                                    address from=_amount,
                                    address to=_owner,
                                    uint256 value=0)
                      else:
                          require ext_code.size(parentTokenAddress)
                          if block.number < parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(_owner), block.number
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(_owner), parentSnapShotBlock
                          require ext_call.success
                          require ext_call.return_data[0] >= _amount
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
      else:
          require stor10.length - 1 < stor10.length
          if stor10[stor10.length].field_0 < block.number:
              stor10.length++
              if not stor10.length > stor10.length + 1:
                  require stor10.length < stor10.length
                  stor10[stor10.length].field_0 = uint128(block.number)
                  stor10[stor10.length].field_128 = uint128(-_amount)
                  if not stor8[address(_owner)].field_0:
                      if not parentTokenAddress:
                          require 0 >= _amount
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                              else:
                                  stor8[address(_owner)].field_0++
                                  if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                      else:
                          require ext_code.size(parentTokenAddress)
                          if block.number < parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(_owner), block.number
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(_owner), parentSnapShotBlock
                          require ext_call.success
                          require ext_call.return_data[0] >= _amount
                          if stor8[address(_owner)].field_0:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          stor8[address(_owner)].field_0++
                  else:
                      require 0 < stor8[address(_owner)].field_0
                      if stor8[address(_owner)].field_0 <= block.number:
                          if not stor8[address(_owner)].field_0:
                              require 0 >= _amount
                              if stor8[address(_owner)].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if block.number >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= _amount
                              else:
                                  require 0 < stor8[address(_owner)].field_0
                                  if block.number < stor8[address(_owner)].field_0:
                                      require 0 >= _amount
                      else:
                          if not parentTokenAddress:
                              require 0 >= _amount
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                                  if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(_owner)].field_0++
                          else:
                              require ext_code.size(parentTokenAddress)
                              if block.number < parentSnapShotBlock:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining - 710 wei
                                      args address(_owner), block.number
                              else:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining - 710 wei
                                      args address(_owner), parentSnapShotBlock
                              require ext_call.success
                              require ext_call.return_data[0] >= _amount
          else:
              require stor10.length - 1 < stor10.length
              stor10[stor10.length].field_0 = uint128(-_amount)
              if not stor8[address(_owner)].field_0:
                  if not parentTokenAddress:
                      require 0 >= _amount
                      if not stor8[address(_owner)].field_0:
                          stor8[address(_owner)].field_0++
                          if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                          log Transfer(
                                address from=_amount,
                                address to=_owner,
                                uint256 value=0)
                          return 1
                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                      if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                          log Transfer(
                                address from=_amount,
                                address to=_owner,
                                uint256 value=0)
                          return 1
                      stor8[address(_owner)].field_0++
                      if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                          require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                  else:
                      require ext_code.size(parentTokenAddress)
                      if block.number < parentSnapShotBlock:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining - 710 wei
                              args address(_owner), block.number
                      else:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining - 710 wei
                              args address(_owner), parentSnapShotBlock
                      require ext_call.success
                      require ext_call.return_data[0] >= _amount
                      if not stor8[address(_owner)].field_0:
                          stor8[address(_owner)].field_0++
                          if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(ext_call.return_data[0] - _amount)
                      else:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(ext_call.return_data[0] - _amount)
                          else:
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
              else:
                  require 0 < stor8[address(_owner)].field_0
                  if stor8[address(_owner)].field_0 <= block.number:
                      if not stor8[address(_owner)].field_0:
                          require 0 >= _amount
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          if stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0:
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                                  log Transfer(
                                        address from=_amount,
                                        address to=_owner,
                                        uint256 value=0)
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              if stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      else:
                          if stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0:
                              if block.number >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= _amount
                                  if not stor8[address(_owner)].field_0:
                                      stor8[address(_owner)].field_0++
                                      if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              if 0 < stor8[address(_owner)].field_0:
                                  if block.number >= stor8[address(_owner)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require 0 >= _amount
                                  if stor8[address(_owner)].field_0:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  stor8[address(_owner)].field_0++
                                  if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      revert
                  if not parentTokenAddress:
                      require 0 >= _amount
                      if stor8[address(_owner)].field_0:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                              log Transfer(
                                    address from=_amount,
                                    address to=_owner,
                                    uint256 value=0)
                              return 1
                          stor8[address(_owner)].field_0++
                          if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      stor8[address(_owner)].field_0++
                      if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                          require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                          log Transfer(
                                address from=_amount,
                                address to=_owner,
                                uint256 value=0)
                  else:
                      require ext_code.size(parentTokenAddress)
                      if block.number < parentSnapShotBlock:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining - 710 wei
                              args address(_owner), block.number
                      else:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining - 710 wei
                              args address(_owner), parentSnapShotBlock
                      require ext_call.success
                      require ext_call.return_data[0] >= _amount
                      if not stor8[address(_owner)].field_0:
                          stor8[address(_owner)].field_0++
                          if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                      if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      stor8[address(_owner)].field_0++
  else:
      require stor10.length - 1 < stor10.length
      if block.number >= stor10[stor10.length].field_0:
          require stor10.length - 1 < stor10.length
          require stor10[stor10.length].field_0 >= _amount
          if not stor10.length:
              stor10.length++
              if not stor10.length > stor10.length + 1:
                  require stor10.length < stor10.length
                  stor10[stor10.length].field_0 = uint128(block.number)
                  stor10[stor10.length].field_128 = uint128(stor10[stor10.length].field_0 - _amount)
                  if not stor8[address(_owner)].field_0:
                      if not parentTokenAddress:
                          require 0 >= _amount
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                              log Transfer(
                                    address from=_amount,
                                    address to=_owner,
                                    uint256 value=0)
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          stor8[address(_owner)].field_0++
                          if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require ext_code.size(parentTokenAddress)
                      if block.number < parentSnapShotBlock:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining - 710 wei
                              args address(_owner), block.number
                      else:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining - 710 wei
                              args address(_owner), parentSnapShotBlock
                      require ext_call.success
                      require ext_call.return_data[0] >= _amount
                      if stor8[address(_owner)].field_0:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      stor8[address(_owner)].field_0++
                      if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                  else:
                      require 0 < stor8[address(_owner)].field_0
                      if stor8[address(_owner)].field_0 <= block.number:
                          if not stor8[address(_owner)].field_0:
                              require 0 >= _amount
                              if stor8[address(_owner)].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if block.number >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= _amount
                          else:
                              require 0 < stor8[address(_owner)].field_0
                              if block.number < stor8[address(_owner)].field_0:
                                  require 0 >= _amount
                      else:
                          if not parentTokenAddress:
                              require 0 >= _amount
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                                  if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                              else:
                                  stor8[address(_owner)].field_0++
                          else:
                              require ext_code.size(parentTokenAddress)
                              if block.number < parentSnapShotBlock:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining - 710 wei
                                      args address(_owner), block.number
                              else:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining - 710 wei
                                      args address(_owner), parentSnapShotBlock
                              require ext_call.success
                              require ext_call.return_data[0] >= _amount
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
          else:
              require stor10.length - 1 < stor10.length
              if stor10[stor10.length].field_0 >= block.number:
                  require stor10.length - 1 < stor10.length
                  stor10[stor10.length].field_0 = uint128(stor10[stor10.length].field_0 - _amount)
                  if not stor8[address(_owner)].field_0:
                      if not parentTokenAddress:
                          require 0 >= _amount
                          if stor8[address(_owner)].field_0:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                                  log Transfer(
                                        address from=_amount,
                                        address to=_owner,
                                        uint256 value=0)
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          stor8[address(_owner)].field_0++
                          if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                              log Transfer(
                                    address from=_amount,
                                    address to=_owner,
                                    uint256 value=0)
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      if block.number < parentSnapShotBlock:
                          if ext_code.size(parentTokenAddress):
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(_owner), block.number
                              if ext_call.success:
                                  require ext_call.return_data[0] >= _amount
                                  if stor8[address(_owner)].field_0:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  stor8[address(_owner)].field_0++
                                  if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      else:
                          if ext_code.size(parentTokenAddress):
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(_owner), parentSnapShotBlock
                              if ext_call.success:
                                  require ext_call.return_data[0] >= _amount
                                  if stor8[address(_owner)].field_0:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  stor8[address(_owner)].field_0++
                                  if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      revert
                  require 0 < stor8[address(_owner)].field_0
                  if stor8[address(_owner)].field_0 <= block.number:
                      if not stor8[address(_owner)].field_0:
                          require 0 >= _amount
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                      else:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if block.number < stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                              require 0 < stor8[address(_owner)].field_0
                              if block.number < stor8[address(_owner)].field_0:
                                  require 0 >= _amount
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= _amount
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                  else:
                      if not parentTokenAddress:
                          require 0 >= _amount
                          if stor8[address(_owner)].field_0:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                              else:
                                  stor8[address(_owner)].field_0++
                          else:
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                      else:
                          require ext_code.size(parentTokenAddress)
                          if block.number < parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(_owner), block.number
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(_owner), parentSnapShotBlock
                          require ext_call.success
                          require ext_call.return_data[0] >= _amount
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
              else:
                  stor10.length++
                  if not stor10.length > stor10.length + 1:
                      require stor10.length < stor10.length
                      stor10[stor10.length].field_0 = uint128(block.number)
                      stor10[stor10.length].field_128 = uint128(stor10[stor10.length].field_0 - _amount)
                      if not stor8[address(_owner)].field_0:
                          if not parentTokenAddress:
                              require 0 >= _amount
                              if stor8[address(_owner)].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require ext_code.size(parentTokenAddress)
                          if block.number < parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(_owner), block.number
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(_owner), parentSnapShotBlock
                          require ext_call.success
                          require ext_call.return_data[0] >= _amount
                      else:
                          require 0 < stor8[address(_owner)].field_0
                          if stor8[address(_owner)].field_0 > block.number:
                              if not parentTokenAddress:
                                  require 0 >= _amount
                                  if not stor8[address(_owner)].field_0:
                                      stor8[address(_owner)].field_0++
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              if block.number < parentSnapShotBlock:
                                  if ext_code.size(parentTokenAddress):
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining - 710 wei
                                          args address(_owner), block.number
                                      if ext_call.success:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              else:
                                  if ext_code.size(parentTokenAddress):
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining - 710 wei
                                          args address(_owner), parentSnapShotBlock
                                      if ext_call.success:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              revert
                          if not stor8[address(_owner)].field_0:
                              require 0 >= _amount
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if block.number >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require 0 < stor8[address(_owner)].field_0
                              if block.number >= stor8[address(_owner)].field_0:
                                  if stor8[address(_owner)].field_0 - 1 <= 0:
                                      require 0 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
      else:
          require 0 < stor10.length
          if block.number < uint128(stor10.field_0):
              require 0 >= _amount
              if not stor10.length:
                  stor10.length++
                  if not stor10.length > stor10.length + 1:
                      require stor10.length < stor10.length
                      stor10[stor10.length].field_0 = uint128(block.number)
                      stor10[stor10.length].field_128 = uint128(-_amount)
                      if not stor8[address(_owner)].field_0:
                          if not parentTokenAddress:
                              require 0 >= _amount
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                                  if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                                      require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                                  else:
                                      stor8[address(_owner)].field_0++
                                      if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                          else:
                              require ext_code.size(parentTokenAddress)
                              if block.number < parentSnapShotBlock:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining - 710 wei
                                      args address(_owner), block.number
                              else:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining - 710 wei
                                      args address(_owner), parentSnapShotBlock
                              require ext_call.success
                              require ext_call.return_data[0] >= _amount
                              if stor8[address(_owner)].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(_owner)].field_0++
                      else:
                          require 0 < stor8[address(_owner)].field_0
                          if stor8[address(_owner)].field_0 <= block.number:
                              if not stor8[address(_owner)].field_0:
                                  require 0 >= _amount
                                  if stor8[address(_owner)].field_0:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  stor8[address(_owner)].field_0++
                                  if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if block.number >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= _amount
                                  else:
                                      require 0 < stor8[address(_owner)].field_0
                                      if block.number < stor8[address(_owner)].field_0:
                                          require 0 >= _amount
                          else:
                              if not parentTokenAddress:
                                  require 0 >= _amount
                                  if not stor8[address(_owner)].field_0:
                                      stor8[address(_owner)].field_0++
                                      if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  stor8[address(_owner)].field_0++
                              else:
                                  require ext_code.size(parentTokenAddress)
                                  if block.number < parentSnapShotBlock:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining - 710 wei
                                          args address(_owner), block.number
                                  else:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining - 710 wei
                                          args address(_owner), parentSnapShotBlock
                                  require ext_call.success
                                  require ext_call.return_data[0] >= _amount
              else:
                  require stor10.length - 1 < stor10.length
                  if stor10[stor10.length].field_0 >= block.number:
                      require stor10.length - 1 < stor10.length
                      stor10[stor10.length].field_0 = uint128(-_amount)
                      if not stor8[address(_owner)].field_0:
                          if not parentTokenAddress:
                              require 0 >= _amount
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                                  if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                                      require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(-_amount)
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                                  log Transfer(
                                        address from=_amount,
                                        address to=_owner,
                                        uint256 value=0)
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require ext_code.size(parentTokenAddress)
                          if block.number < parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(_owner), block.number
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(_owner), parentSnapShotBlock
                          require ext_call.success
                          require ext_call.return_data[0] >= _amount
                          if stor8[address(_owner)].field_0:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          stor8[address(_owner)].field_0++
                          if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                      else:
                          require 0 < stor8[address(_owner)].field_0
                          if stor8[address(_owner)].field_0 <= block.number:
                              if not stor8[address(_owner)].field_0:
                                  require 0 >= _amount
                                  if stor8[address(_owner)].field_0:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  stor8[address(_owner)].field_0++
                                  if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if block.number >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= _amount
                              else:
                                  require 0 < stor8[address(_owner)].field_0
                                  if block.number < stor8[address(_owner)].field_0:
                                      require 0 >= _amount
                          else:
                              if not parentTokenAddress:
                                  require 0 >= _amount
                                  if not stor8[address(_owner)].field_0:
                                      stor8[address(_owner)].field_0++
                                      if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(-_amount)
                                  else:
                                      stor8[address(_owner)].field_0++
                              else:
                                  require ext_code.size(parentTokenAddress)
                                  if block.number < parentSnapShotBlock:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining - 710 wei
                                          args address(_owner), block.number
                                  else:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining - 710 wei
                                          args address(_owner), parentSnapShotBlock
                                  require ext_call.success
                                  require ext_call.return_data[0] >= _amount
                                  if not stor8[address(_owner)].field_0:
                                      stor8[address(_owner)].field_0++
                  else:
                      stor10.length++
                      if not stor10.length > stor10.length + 1:
                          require stor10.length < stor10.length
                          stor10[stor10.length].field_0 = uint128(block.number)
                          stor10[stor10.length].field_128 = uint128(-_amount)
                          if not stor8[address(_owner)].field_0:
                              if not parentTokenAddress:
                                  require 0 >= _amount
                                  if stor8[address(_owner)].field_0:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  stor8[address(_owner)].field_0++
                                  if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                              else:
                                  require ext_code.size(parentTokenAddress)
                                  if block.number < parentSnapShotBlock:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining - 710 wei
                                          args address(_owner), block.number
                                  else:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining - 710 wei
                                          args address(_owner), parentSnapShotBlock
                                  require ext_call.success
                                  require ext_call.return_data[0] >= _amount
                          else:
                              require 0 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)].field_0 > block.number:
                                  if not parentTokenAddress:
                                      require 0 >= _amount
                                      if not stor8[address(_owner)].field_0:
                                          stor8[address(_owner)].field_0++
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if block.number < parentSnapShotBlock:
                                      if ext_code.size(parentTokenAddress):
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining - 710 wei
                                              args address(_owner), block.number
                                          if ext_call.success:
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  else:
                                      if ext_code.size(parentTokenAddress):
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining - 710 wei
                                              args address(_owner), parentSnapShotBlock
                                          if ext_call.success:
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  revert
                              if not stor8[address(_owner)].field_0:
                                  require 0 >= _amount
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if block.number >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require 0 < stor8[address(_owner)].field_0
                                  if block.number >= stor8[address(_owner)].field_0:
                                      if stor8[address(_owner)].field_0 - 1 <= 0:
  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)

def generateTokens(address _owner, uint256 _amount): # not payable
  require controllerAddress == caller
  if not stor10.length:
      require _amount >= 0
      if not stor10.length:
          stor10.length++
          if not stor10.length > stor10.length + 1:
              require stor10.length < stor10.length
              stor10[stor10.length].field_0 = uint128(block.number)
              stor10[stor10.length].field_128 = uint128(_amount)
              if not stor8[address(_owner)].field_0:
                  if not parentTokenAddress:
                      require _amount >= 0
                      if not stor8[address(_owner)].field_0:
                          stor8[address(_owner)].field_0++
                          if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                          log Transfer(
                                address from=_amount,
                                address to=0,
                                uint256 value=_owner)
                          return 1
                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                      if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                          log Transfer(
                                address from=_amount,
                                address to=0,
                                uint256 value=_owner)
                          return 1
                      stor8[address(_owner)].field_0++
                      if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                          require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                  else:
                      require ext_code.size(parentTokenAddress)
                      if block.number < parentSnapShotBlock:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining - 710 wei
                              args address(_owner), block.number
                      else:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining - 710 wei
                              args address(_owner), parentSnapShotBlock
                      require ext_call.success
                      require ext_call.return_data[0] + _amount >= ext_call.return_data[0]
                      if stor8[address(_owner)].field_0:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount + ext_call.return_data[0])
                          else:
                              stor8[address(_owner)].field_0++
                      else:
                          stor8[address(_owner)].field_0++
                          if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount + ext_call.return_data[0])
              else:
                  require 0 < stor8[address(_owner)].field_0
                  if stor8[address(_owner)].field_0 <= block.number:
                      if not stor8[address(_owner)].field_0:
                          require _amount >= 0
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                              else:
                                  stor8[address(_owner)].field_0++
                                  if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                      else:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if block.number >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 + _amount >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0
                              if stor8[address(_owner)].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require 0 < stor8[address(_owner)].field_0
                          if block.number < stor8[address(_owner)].field_0:
                              require _amount >= 0
                              if stor8[address(_owner)].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                  else:
                      if not parentTokenAddress:
                          require _amount >= 0
                          if stor8[address(_owner)].field_0:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                                  log Transfer(
                                        address from=_amount,
                                        address to=0,
                                        uint256 value=_owner)
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          stor8[address(_owner)].field_0++
                          if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                              log Transfer(
                                    address from=_amount,
                                    address to=0,
                                    uint256 value=_owner)
                      else:
                          require ext_code.size(parentTokenAddress)
                          if block.number < parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(_owner), block.number
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(_owner), parentSnapShotBlock
                          require ext_call.success
                          require ext_call.return_data[0] + _amount >= ext_call.return_data[0]
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
      else:
          require stor10.length - 1 < stor10.length
          if stor10[stor10.length].field_0 < block.number:
              stor10.length++
              if not stor10.length > stor10.length + 1:
                  require stor10.length < stor10.length
                  stor10[stor10.length].field_0 = uint128(block.number)
                  stor10[stor10.length].field_128 = uint128(_amount)
                  if not stor8[address(_owner)].field_0:
                      if not parentTokenAddress:
                          require _amount >= 0
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                              else:
                                  stor8[address(_owner)].field_0++
                                  if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                      else:
                          require ext_code.size(parentTokenAddress)
                          if block.number < parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(_owner), block.number
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(_owner), parentSnapShotBlock
                          require ext_call.success
                          require ext_call.return_data[0] + _amount >= ext_call.return_data[0]
                          if stor8[address(_owner)].field_0:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          stor8[address(_owner)].field_0++
                  else:
                      require 0 < stor8[address(_owner)].field_0
                      if stor8[address(_owner)].field_0 <= block.number:
                          if not stor8[address(_owner)].field_0:
                              require _amount >= 0
                              if stor8[address(_owner)].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if block.number >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 + _amount >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0
                              else:
                                  require 0 < stor8[address(_owner)].field_0
                                  if block.number < stor8[address(_owner)].field_0:
                                      require _amount >= 0
                      else:
                          if not parentTokenAddress:
                              require _amount >= 0
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                                  if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(_owner)].field_0++
                          else:
                              require ext_code.size(parentTokenAddress)
                              if block.number < parentSnapShotBlock:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining - 710 wei
                                      args address(_owner), block.number
                              else:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining - 710 wei
                                      args address(_owner), parentSnapShotBlock
                              require ext_call.success
                              require ext_call.return_data[0] + _amount >= ext_call.return_data[0]
          else:
              require stor10.length - 1 < stor10.length
              stor10[stor10.length].field_0 = uint128(_amount)
              if not stor8[address(_owner)].field_0:
                  if not parentTokenAddress:
                      require _amount >= 0
                      if not stor8[address(_owner)].field_0:
                          stor8[address(_owner)].field_0++
                          if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                          log Transfer(
                                address from=_amount,
                                address to=0,
                                uint256 value=_owner)
                          return 1
                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                      if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                          log Transfer(
                                address from=_amount,
                                address to=0,
                                uint256 value=_owner)
                          return 1
                      stor8[address(_owner)].field_0++
                      if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                          require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                  else:
                      require ext_code.size(parentTokenAddress)
                      if block.number < parentSnapShotBlock:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining - 710 wei
                              args address(_owner), block.number
                      else:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining - 710 wei
                              args address(_owner), parentSnapShotBlock
                      require ext_call.success
                      require ext_call.return_data[0] + _amount >= ext_call.return_data[0]
                      if not stor8[address(_owner)].field_0:
                          stor8[address(_owner)].field_0++
                          if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount + ext_call.return_data[0])
                      else:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount + ext_call.return_data[0])
                          else:
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
              else:
                  require 0 < stor8[address(_owner)].field_0
                  if stor8[address(_owner)].field_0 <= block.number:
                      if not stor8[address(_owner)].field_0:
                          require _amount >= 0
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          if stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0:
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                                  log Transfer(
                                        address from=_amount,
                                        address to=0,
                                        uint256 value=_owner)
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              if stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      else:
                          if stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0:
                              if block.number >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 + _amount >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0
                                  if not stor8[address(_owner)].field_0:
                                      stor8[address(_owner)].field_0++
                                      if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              if 0 < stor8[address(_owner)].field_0:
                                  if block.number >= stor8[address(_owner)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require _amount >= 0
                                  if stor8[address(_owner)].field_0:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  stor8[address(_owner)].field_0++
                                  if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      revert
                  if not parentTokenAddress:
                      require _amount >= 0
                      if stor8[address(_owner)].field_0:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                              log Transfer(
                                    address from=_amount,
                                    address to=0,
                                    uint256 value=_owner)
                              return 1
                          stor8[address(_owner)].field_0++
                          if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      stor8[address(_owner)].field_0++
                      if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                          require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                          stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                          log Transfer(
                                address from=_amount,
                                address to=0,
                                uint256 value=_owner)
                  else:
                      require ext_code.size(parentTokenAddress)
                      if block.number < parentSnapShotBlock:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining - 710 wei
                              args address(_owner), block.number
                      else:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining - 710 wei
                              args address(_owner), parentSnapShotBlock
                      require ext_call.success
                      require ext_call.return_data[0] + _amount >= ext_call.return_data[0]
                      if not stor8[address(_owner)].field_0:
                          stor8[address(_owner)].field_0++
                          if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                      if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      stor8[address(_owner)].field_0++
  else:
      require stor10.length - 1 < stor10.length
      if block.number >= stor10[stor10.length].field_0:
          require stor10.length - 1 < stor10.length
          require stor10[stor10.length].field_0 + _amount >= stor10[stor10.length].field_0
          if not stor10.length:
              stor10.length++
              if not stor10.length > stor10.length + 1:
                  require stor10.length < stor10.length
                  stor10[stor10.length].field_0 = uint128(block.number)
                  stor10[stor10.length].field_128 = uint128(stor10[stor10.length].field_0 + _amount)
                  if not stor8[address(_owner)].field_0:
                      if not parentTokenAddress:
                          require _amount >= 0
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                              log Transfer(
                                    address from=_amount,
                                    address to=0,
                                    uint256 value=_owner)
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          stor8[address(_owner)].field_0++
                          if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require ext_code.size(parentTokenAddress)
                      if block.number < parentSnapShotBlock:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining - 710 wei
                              args address(_owner), block.number
                      else:
                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                               gas gas_remaining - 710 wei
                              args address(_owner), parentSnapShotBlock
                      require ext_call.success
                      require ext_call.return_data[0] + _amount >= ext_call.return_data[0]
                      if stor8[address(_owner)].field_0:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      stor8[address(_owner)].field_0++
                      if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                  else:
                      require 0 < stor8[address(_owner)].field_0
                      if stor8[address(_owner)].field_0 <= block.number:
                          if not stor8[address(_owner)].field_0:
                              require _amount >= 0
                              if stor8[address(_owner)].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if block.number >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 + _amount >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0
                          else:
                              require 0 < stor8[address(_owner)].field_0
                              if block.number < stor8[address(_owner)].field_0:
                                  require _amount >= 0
                      else:
                          if not parentTokenAddress:
                              require _amount >= 0
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                                  if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                              else:
                                  stor8[address(_owner)].field_0++
                          else:
                              require ext_code.size(parentTokenAddress)
                              if block.number < parentSnapShotBlock:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining - 710 wei
                                      args address(_owner), block.number
                              else:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining - 710 wei
                                      args address(_owner), parentSnapShotBlock
                              require ext_call.success
                              require ext_call.return_data[0] + _amount >= ext_call.return_data[0]
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
          else:
              require stor10.length - 1 < stor10.length
              if stor10[stor10.length].field_0 >= block.number:
                  require stor10.length - 1 < stor10.length
                  stor10[stor10.length].field_0 = uint128(stor10[stor10.length].field_0 + _amount)
                  if not stor8[address(_owner)].field_0:
                      if not parentTokenAddress:
                          require _amount >= 0
                          if stor8[address(_owner)].field_0:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                                  log Transfer(
                                        address from=_amount,
                                        address to=0,
                                        uint256 value=_owner)
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          stor8[address(_owner)].field_0++
                          if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                              stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                              log Transfer(
                                    address from=_amount,
                                    address to=0,
                                    uint256 value=_owner)
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      if block.number < parentSnapShotBlock:
                          if ext_code.size(parentTokenAddress):
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(_owner), block.number
                              if ext_call.success:
                                  require ext_call.return_data[0] + _amount >= ext_call.return_data[0]
                                  if stor8[address(_owner)].field_0:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  stor8[address(_owner)].field_0++
                                  if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      else:
                          if ext_code.size(parentTokenAddress):
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(_owner), parentSnapShotBlock
                              if ext_call.success:
                                  require ext_call.return_data[0] + _amount >= ext_call.return_data[0]
                                  if stor8[address(_owner)].field_0:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  stor8[address(_owner)].field_0++
                                  if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      revert
                  require 0 < stor8[address(_owner)].field_0
                  if stor8[address(_owner)].field_0 <= block.number:
                      if not stor8[address(_owner)].field_0:
                          require _amount >= 0
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                      else:
                          require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                          if block.number < stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                              require 0 < stor8[address(_owner)].field_0
                              if block.number < stor8[address(_owner)].field_0:
                                  require _amount >= 0
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 + _amount >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                  else:
                      if not parentTokenAddress:
                          require _amount >= 0
                          if stor8[address(_owner)].field_0:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                              else:
                                  stor8[address(_owner)].field_0++
                          else:
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                      else:
                          require ext_code.size(parentTokenAddress)
                          if block.number < parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(_owner), block.number
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(_owner), parentSnapShotBlock
                          require ext_call.success
                          require ext_call.return_data[0] + _amount >= ext_call.return_data[0]
                          if not stor8[address(_owner)].field_0:
                              stor8[address(_owner)].field_0++
              else:
                  stor10.length++
                  if not stor10.length > stor10.length + 1:
                      require stor10.length < stor10.length
                      stor10[stor10.length].field_0 = uint128(block.number)
                      stor10[stor10.length].field_128 = uint128(stor10[stor10.length].field_0 + _amount)
                      if not stor8[address(_owner)].field_0:
                          if not parentTokenAddress:
                              require _amount >= 0
                              if stor8[address(_owner)].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require ext_code.size(parentTokenAddress)
                          if block.number < parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(_owner), block.number
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(_owner), parentSnapShotBlock
                          require ext_call.success
                          require ext_call.return_data[0] + _amount >= ext_call.return_data[0]
                      else:
                          require 0 < stor8[address(_owner)].field_0
                          if stor8[address(_owner)].field_0 > block.number:
                              if not parentTokenAddress:
                                  require _amount >= 0
                                  if not stor8[address(_owner)].field_0:
                                      stor8[address(_owner)].field_0++
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              if block.number < parentSnapShotBlock:
                                  if ext_code.size(parentTokenAddress):
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining - 710 wei
                                          args address(_owner), block.number
                                      if ext_call.success:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              else:
                                  if ext_code.size(parentTokenAddress):
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining - 710 wei
                                          args address(_owner), parentSnapShotBlock
                                      if ext_call.success:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              revert
                          if not stor8[address(_owner)].field_0:
                              require _amount >= 0
                          else:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if block.number >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require 0 < stor8[address(_owner)].field_0
                              if block.number >= stor8[address(_owner)].field_0:
                                  if stor8[address(_owner)].field_0 - 1 <= 0:
                                      require 0 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
      else:
          require 0 < stor10.length
          if block.number < uint128(stor10.field_0):
              require _amount >= 0
              if not stor10.length:
                  stor10.length++
                  if not stor10.length > stor10.length + 1:
                      require stor10.length < stor10.length
                      stor10[stor10.length].field_0 = uint128(block.number)
                      stor10[stor10.length].field_128 = uint128(_amount)
                      if not stor8[address(_owner)].field_0:
                          if not parentTokenAddress:
                              require _amount >= 0
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                                  if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                                      require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                                  else:
                                      stor8[address(_owner)].field_0++
                                      if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                          else:
                              require ext_code.size(parentTokenAddress)
                              if block.number < parentSnapShotBlock:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining - 710 wei
                                      args address(_owner), block.number
                              else:
                                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                       gas gas_remaining - 710 wei
                                      args address(_owner), parentSnapShotBlock
                              require ext_call.success
                              require ext_call.return_data[0] + _amount >= ext_call.return_data[0]
                              if stor8[address(_owner)].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(_owner)].field_0++
                      else:
                          require 0 < stor8[address(_owner)].field_0
                          if stor8[address(_owner)].field_0 <= block.number:
                              if not stor8[address(_owner)].field_0:
                                  require _amount >= 0
                                  if stor8[address(_owner)].field_0:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  stor8[address(_owner)].field_0++
                                  if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if block.number >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 + _amount >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0
                                  else:
                                      require 0 < stor8[address(_owner)].field_0
                                      if block.number < stor8[address(_owner)].field_0:
                                          require _amount >= 0
                          else:
                              if not parentTokenAddress:
                                  require _amount >= 0
                                  if not stor8[address(_owner)].field_0:
                                      stor8[address(_owner)].field_0++
                                      if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  stor8[address(_owner)].field_0++
                              else:
                                  require ext_code.size(parentTokenAddress)
                                  if block.number < parentSnapShotBlock:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining - 710 wei
                                          args address(_owner), block.number
                                  else:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining - 710 wei
                                          args address(_owner), parentSnapShotBlock
                                  require ext_call.success
                                  require ext_call.return_data[0] + _amount >= ext_call.return_data[0]
              else:
                  require stor10.length - 1 < stor10.length
                  if stor10[stor10.length].field_0 >= block.number:
                      require stor10.length - 1 < stor10.length
                      stor10[stor10.length].field_0 = uint128(_amount)
                      if not stor8[address(_owner)].field_0:
                          if not parentTokenAddress:
                              require _amount >= 0
                              if not stor8[address(_owner)].field_0:
                                  stor8[address(_owner)].field_0++
                                  if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                                      require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(block.number)
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_128 = uint128(_amount)
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                                  log Transfer(
                                        address from=_amount,
                                        address to=0,
                                        uint256 value=_owner)
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(_owner)].field_0++
                              if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require ext_code.size(parentTokenAddress)
                          if block.number < parentSnapShotBlock:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(_owner), block.number
                          else:
                              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                   gas gas_remaining - 710 wei
                                  args address(_owner), parentSnapShotBlock
                          require ext_call.success
                          require ext_call.return_data[0] + _amount >= ext_call.return_data[0]
                          if stor8[address(_owner)].field_0:
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          stor8[address(_owner)].field_0++
                          if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                      else:
                          require 0 < stor8[address(_owner)].field_0
                          if stor8[address(_owner)].field_0 <= block.number:
                              if not stor8[address(_owner)].field_0:
                                  require _amount >= 0
                                  if stor8[address(_owner)].field_0:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  stor8[address(_owner)].field_0++
                                  if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                              if block.number >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  require stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 + _amount >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0
                              else:
                                  require 0 < stor8[address(_owner)].field_0
                                  if block.number < stor8[address(_owner)].field_0:
                                      require _amount >= 0
                          else:
                              if not parentTokenAddress:
                                  require _amount >= 0
                                  if not stor8[address(_owner)].field_0:
                                      stor8[address(_owner)].field_0++
                                      if not stor8[address(_owner)].field_0 <= stor8[address(_owner)].field_0 + 1:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require stor8[address(_owner)].field_0 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 >= block.number:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      stor8[address(_owner)][stor8[address(_owner)].field_0].field_0 = uint128(_amount)
                                  else:
                                      stor8[address(_owner)].field_0++
                              else:
                                  require ext_code.size(parentTokenAddress)
                                  if block.number < parentSnapShotBlock:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining - 710 wei
                                          args address(_owner), block.number
                                  else:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining - 710 wei
                                          args address(_owner), parentSnapShotBlock
                                  require ext_call.success
                                  require ext_call.return_data[0] + _amount >= ext_call.return_data[0]
                                  if not stor8[address(_owner)].field_0:
                                      stor8[address(_owner)].field_0++
                  else:
                      stor10.length++
                      if not stor10.length > stor10.length + 1:
                          require stor10.length < stor10.length
                          stor10[stor10.length].field_0 = uint128(block.number)
                          stor10[stor10.length].field_128 = uint128(_amount)
                          if not stor8[address(_owner)].field_0:
                              if not parentTokenAddress:
                                  require _amount >= 0
                                  if stor8[address(_owner)].field_0:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  stor8[address(_owner)].field_0++
                                  if not stor8[address(_owner)].field_0 > stor8[address(_owner)].field_0 + 1:
                              else:
                                  require ext_code.size(parentTokenAddress)
                                  if block.number < parentSnapShotBlock:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining - 710 wei
                                          args address(_owner), block.number
                                  else:
                                      call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                           gas gas_remaining - 710 wei
                                          args address(_owner), parentSnapShotBlock
                                  require ext_call.success
                                  require ext_call.return_data[0] + _amount >= ext_call.return_data[0]
                          else:
                              require 0 < stor8[address(_owner)].field_0
                              if stor8[address(_owner)].field_0 > block.number:
                                  if not parentTokenAddress:
                                      require _amount >= 0
                                      if not stor8[address(_owner)].field_0:
                                          stor8[address(_owner)].field_0++
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if block.number < parentSnapShotBlock:
                                      if ext_code.size(parentTokenAddress):
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining - 710 wei
                                              args address(_owner), block.number
                                          if ext_call.success:
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  else:
                                      if ext_code.size(parentTokenAddress):
                                          call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                                               gas gas_remaining - 710 wei
                                              args address(_owner), parentSnapShotBlock
                                          if ext_call.success:
                                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  revert
                              if not stor8[address(_owner)].field_0:
                                  require _amount >= 0
                              else:
                                  require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                  if block.number >= stor8[address(_owner)][stor8[address(_owner)].field_0].field_0:
                                      require stor8[address(_owner)].field_0 - 1 < stor8[address(_owner)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require 0 < stor8[address(_owner)].field_0
                                  if block.number >= stor8[address(_owner)].field_0:
                                      if stor8[address(_owner)].field_0 - 1 <= 0:
  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)

def transferFrom(address sender, address recipient, uint256 amount): # not payable
  if controllerAddress == caller:
      if not amount:
          return 1
      require parentSnapShotBlock < block.number
      require recipient
      require recipient != this.address
      if not stor8[address(sender)].field_0:
          if not parentTokenAddress:
              if 0 < amount:
                  return 0
              if not controllerAddress:
                  if stor8[address(sender)].field_0:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require amount >= 0
                              else:
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 <= block.number:
                                  if not stor8[address(recipient)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              if parentTokenAddress:
                      else:
                          stor8[address(sender)].field_0++
                          if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                              if stor8[address(recipient)].field_0:
                  else:
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if not parentTokenAddress:
                                  require amount >= 0
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 <= block.number:
                                  if stor8[address(recipient)].field_0:
                              else:
                                  if parentTokenAddress:
              else:
                  if ext_code.size(controllerAddress) <= 0:
                      if stor8[address(sender)].field_0:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require amount >= 0
                                  else:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 <= block.number:
                                      if not stor8[address(recipient)].field_0:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require stor8[address(recipient)].field_0 - 1 < stor8[address(recipient)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if parentTokenAddress:
                          else:
                              stor8[address(sender)].field_0++
                              if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                                  if stor8[address(recipient)].field_0:
                      else:
                          stor8[address(sender)].field_0++
                          if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if not parentTokenAddress:
                                      require amount >= 0
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 <= block.number:
                                      if stor8[address(recipient)].field_0:
                                  else:
                                      if parentTokenAddress:
                  else:
                      require ext_code.size(controllerAddress)
                      call controllerAddress.'J91I' with:
                           gas gas_remaining - 710 wei
                          args address(sender), address(recipient), amount
                      require ext_call.success
                      require ext_call.return_data[0]
                      if not stor8[address(sender)].field_0:
                          stor8[address(sender)].field_0++
                          if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                      else:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          if stor8[address(sender)][stor8[address(sender)].field_0].field_0 < block.number:
                              stor8[address(sender)].field_0++
                              if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                          else:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
          if block.number < parentSnapShotBlock:
              if ext_code.size(parentTokenAddress):
                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                       gas gas_remaining - 710 wei
                      args address(sender), block.number
                  if ext_call.success:
                      if ext_call.return_data[0] < amount:
                          return 0
                      if not controllerAddress:
                          if not stor8[address(sender)].field_0:
                              stor8[address(sender)].field_0++
                              if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                          else:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                                  if stor8[address(recipient)].field_0:
                              else:
                                  stor8[address(sender)].field_0++
                                  if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      if ext_code.size(controllerAddress) <= 0:
                          if not stor8[address(sender)].field_0:
                              stor8[address(sender)].field_0++
                              if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                          else:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                                  if stor8[address(recipient)].field_0:
                              else:
                                  stor8[address(sender)].field_0++
                                  if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      if ext_code.size(controllerAddress):
                          call controllerAddress.'J91I' with:
                               gas gas_remaining - 710 wei
                              args address(sender), address(recipient), amount
                          if ext_call.success:
                              require ext_call.return_data[0]
                              if not stor8[address(sender)].field_0:
                                  stor8[address(sender)].field_0++
                                  if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              if stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0:
                                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  stor8[address(sender)].field_0++
                                  if not stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if stor8[address(sender)].field_0 < stor8[address(sender)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
          else:
              if ext_code.size(parentTokenAddress):
                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                       gas gas_remaining - 710 wei
                      args address(sender), parentSnapShotBlock
                  if ext_call.success:
                      if ext_call.return_data[0] < amount:
                          return 0
                      if not controllerAddress:
                          if not stor8[address(sender)].field_0:
                              stor8[address(sender)].field_0++
                              if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                          else:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                                  if stor8[address(recipient)].field_0:
                              else:
                                  stor8[address(sender)].field_0++
                                  if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      if ext_code.size(controllerAddress) <= 0:
                          if not stor8[address(sender)].field_0:
                              stor8[address(sender)].field_0++
                              if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                          else:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                                  if stor8[address(recipient)].field_0:
                              else:
                                  stor8[address(sender)].field_0++
                                  if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      if ext_code.size(controllerAddress):
                          call controllerAddress.'J91I' with:
                               gas gas_remaining - 710 wei
                              args address(sender), address(recipient), amount
                          if ext_call.success:
                              require ext_call.return_data[0]
                              if not stor8[address(sender)].field_0:
                                  stor8[address(sender)].field_0++
                                  if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              if stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0:
                                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  stor8[address(sender)].field_0++
                                  if not stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if stor8[address(sender)].field_0 < stor8[address(sender)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
          revert
      require 0 < stor8[address(sender)].field_0
      if stor8[address(sender)].field_0 <= block.number:
          if not stor8[address(sender)].field_0:
              if 0 < amount:
                  return 0
              if not controllerAddress:
                  if not stor8[address(sender)].field_0:
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                          if stor8[address(recipient)].field_0:
                  else:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require 0 < stor8[address(recipient)].field_0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
              if ext_code.size(controllerAddress) <= 0:
                  if not stor8[address(sender)].field_0:
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                          if stor8[address(recipient)].field_0:
                  else:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require 0 < stor8[address(recipient)].field_0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
              require ext_code.size(controllerAddress)
              call controllerAddress.'J91I' with:
                   gas gas_remaining - 710 wei
                  args address(sender), address(recipient), amount
              require ext_call.success
              require ext_call.return_data[0]
              if not stor8[address(sender)].field_0:
                  stor8[address(sender)].field_0++
                  if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
              stor8[address(sender)].field_0++
              if not stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
          if block.number < stor8[address(sender)][stor8[address(sender)].field_0].field_0:
              require 0 < stor8[address(sender)].field_0
              if block.number < stor8[address(sender)].field_0:
                  if 0 < amount:
                      return 0
                  if not controllerAddress:
                      if not stor8[address(sender)].field_0:
                          stor8[address(sender)].field_0++
                          if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  if ext_code.size(controllerAddress) <= 0:
                      if not stor8[address(sender)].field_0:
                          stor8[address(sender)].field_0++
                          if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require ext_code.size(controllerAddress)
                  call controllerAddress.'J91I' with:
                       gas gas_remaining - 710 wei
                      args address(sender), address(recipient), amount
                  require ext_call.success
                  require ext_call.return_data[0]
                  if not stor8[address(sender)].field_0:
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                  else:
                      stor8[address(sender)].field_0++
          else:
              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 < amount:
                  return 0
              if not controllerAddress:
                  if not stor8[address(sender)].field_0:
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(stor8[address(sender)][stor8[address(sender)].field_0].field_0 - amount)
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(stor8[address(sender)][stor8[address(sender)].field_0].field_0 - amount)
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  stor8[address(sender)].field_0++
                  if not stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
              if ext_code.size(controllerAddress) <= 0:
                  if not stor8[address(sender)].field_0:
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(stor8[address(sender)][stor8[address(sender)].field_0].field_0 - amount)
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(stor8[address(sender)][stor8[address(sender)].field_0].field_0 - amount)
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  stor8[address(sender)].field_0++
                  if not stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
              require ext_code.size(controllerAddress)
              call controllerAddress.'J91I' with:
                   gas gas_remaining - 710 wei
                  args address(sender), address(recipient), amount
              require ext_call.success
              require ext_call.return_data[0]
              if stor8[address(sender)].field_0:
                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(stor8[address(sender)][stor8[address(sender)].field_0].field_0 - amount)
                  else:
                      stor8[address(sender)].field_0++
              else:
                  stor8[address(sender)].field_0++
                  if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(stor8[address(sender)][stor8[address(sender)].field_0].field_0 - amount)
      else:
          if not parentTokenAddress:
              if 0 < amount:
                  return 0
              if not controllerAddress:
                  if not stor8[address(sender)].field_0:
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if parentTokenAddress:
                          else:
                              require 0 < stor8[address(recipient)].field_0
                  else:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      if stor8[address(sender)][stor8[address(sender)].field_0].field_0 < block.number:
                          stor8[address(sender)].field_0++
                          if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                      else:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if parentTokenAddress:
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 > block.number:
              else:
                  if ext_code.size(controllerAddress) <= 0:
                      if not stor8[address(sender)].field_0:
                          stor8[address(sender)].field_0++
                          if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                      else:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          if stor8[address(sender)][stor8[address(sender)].field_0].field_0 < block.number:
                              stor8[address(sender)].field_0++
                              if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                          else:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                  else:
                      require ext_code.size(controllerAddress)
                      call controllerAddress.'J91I' with:
                           gas gas_remaining - 710 wei
                          args address(sender), address(recipient), amount
                      require ext_call.success
                      require ext_call.return_data[0]
                      if not stor8[address(sender)].field_0:
                          stor8[address(sender)].field_0++
                          if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                              if stor8[address(recipient)].field_0:
                      else:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require 0 < stor8[address(recipient)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          stor8[address(sender)].field_0++
                          if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
          else:
              require ext_code.size(parentTokenAddress)
              if block.number < parentSnapShotBlock:
                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                       gas gas_remaining - 710 wei
                      args address(sender), block.number
              else:
                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                       gas gas_remaining - 710 wei
                      args address(sender), parentSnapShotBlock
              require ext_call.success
              if ext_call.return_data[0] < amount:
                  return 0
              if not controllerAddress:
                  if not stor8[address(sender)].field_0:
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  stor8[address(sender)].field_0++
                  if not stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
              if ext_code.size(controllerAddress) <= 0:
                  if not stor8[address(sender)].field_0:
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  stor8[address(sender)].field_0++
                  if not stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
              require ext_code.size(controllerAddress)
              call controllerAddress.'J91I' with:
                   gas gas_remaining - 710 wei
                  args address(sender), address(recipient), amount
              require ext_call.success
              require ext_call.return_data[0]
              if not stor8[address(sender)].field_0:
                  stor8[address(sender)].field_0++
                  if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
              else:
                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                  else:
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
  else:
      require transfersEnabled
      if allowance[address(sender)][caller] < amount:
          return 0
      allowance[address(sender)][caller] -= amount
      if not amount:
          return 1
      require parentSnapShotBlock < block.number
      require recipient
      require recipient != this.address
      if not stor8[address(sender)].field_0:
          if not parentTokenAddress:
              if 0 < amount:
                  return 0
              if not controllerAddress:
                  if not stor8[address(sender)].field_0:
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if parentTokenAddress:
                          else:
                              require 0 < stor8[address(recipient)].field_0
                  else:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      if stor8[address(sender)][stor8[address(sender)].field_0].field_0 < block.number:
                          stor8[address(sender)].field_0++
                          if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                      else:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              if parentTokenAddress:
                          else:
                              require 0 < stor8[address(recipient)].field_0
                              if stor8[address(recipient)].field_0 > block.number:
              else:
                  if ext_code.size(controllerAddress) <= 0:
                      if not stor8[address(sender)].field_0:
                          stor8[address(sender)].field_0++
                          if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                      else:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          if stor8[address(sender)][stor8[address(sender)].field_0].field_0 < block.number:
                              stor8[address(sender)].field_0++
                              if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                          else:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  if parentTokenAddress:
                              else:
                                  require 0 < stor8[address(recipient)].field_0
                                  if stor8[address(recipient)].field_0 > block.number:
                  else:
                      require ext_code.size(controllerAddress)
                      call controllerAddress.'J91I' with:
                           gas gas_remaining - 710 wei
                          args address(sender), address(recipient), amount
                      require ext_call.success
                      require ext_call.return_data[0]
                      if not stor8[address(sender)].field_0:
                          stor8[address(sender)].field_0++
                          if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                              if stor8[address(recipient)].field_0:
                      else:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                              if not stor8[address(recipient)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require 0 < stor8[address(recipient)].field_0
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          stor8[address(sender)].field_0++
                          if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
          else:
              require ext_code.size(parentTokenAddress)
              if block.number < parentSnapShotBlock:
                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                       gas gas_remaining - 710 wei
                      args address(sender), block.number
              else:
                  call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                       gas gas_remaining - 710 wei
                      args address(sender), parentSnapShotBlock
              require ext_call.success
              if ext_call.return_data[0] < amount:
                  return 0
              if not controllerAddress:
                  if not stor8[address(sender)].field_0:
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  stor8[address(sender)].field_0++
                  if not stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
              if ext_code.size(controllerAddress) <= 0:
                  if not stor8[address(sender)].field_0:
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  stor8[address(sender)].field_0++
                  if not stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
              require ext_code.size(controllerAddress)
              call controllerAddress.'J91I' with:
                   gas gas_remaining - 710 wei
                  args address(sender), address(recipient), amount
              require ext_call.success
              require ext_call.return_data[0]
              if not stor8[address(sender)].field_0:
                  stor8[address(sender)].field_0++
                  if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
              else:
                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                  else:
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
      else:
          require 0 < stor8[address(sender)].field_0
          if stor8[address(sender)].field_0 <= block.number:
              if not stor8[address(sender)].field_0:
                  if 0 < amount:
                      return 0
                  if not controllerAddress:
                      if not stor8[address(sender)].field_0:
                          stor8[address(sender)].field_0++
                          if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                              stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      if stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0:
                          if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          stor8[address(sender)].field_0++
                          if not stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          if stor8[address(sender)].field_0 < stor8[address(sender)].field_0:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  else:
                      if ext_code.size(controllerAddress) <= 0:
                          if not stor8[address(sender)].field_0:
                              stor8[address(sender)].field_0++
                              if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          if stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0:
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              stor8[address(sender)].field_0++
                              if not stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              if stor8[address(sender)].field_0 < stor8[address(sender)].field_0:
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      else:
                          if ext_code.size(controllerAddress):
                              call controllerAddress.'J91I' with:
                                   gas gas_remaining - 710 wei
                                  args address(sender), address(recipient), amount
                              if ext_call.success:
                                  require ext_call.return_data[0]
                                  if not stor8[address(sender)].field_0:
                                      stor8[address(sender)].field_0++
                                      if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0:
                                      if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      stor8[address(sender)].field_0++
                                      if not stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      if stor8[address(sender)].field_0 < stor8[address(sender)].field_0:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
              else:
                  if stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0:
                      if block.number >= stor8[address(sender)][stor8[address(sender)].field_0].field_0:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          if stor8[address(sender)][stor8[address(sender)].field_0].field_0 < amount:
                              return 0
                          if not controllerAddress:
                              if stor8[address(sender)].field_0:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(stor8[address(sender)][stor8[address(sender)].field_0].field_0 - amount)
                                  else:
                                      stor8[address(sender)].field_0++
                              else:
                                  stor8[address(sender)].field_0++
                                  if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(stor8[address(sender)][stor8[address(sender)].field_0].field_0 - amount)
                          else:
                              if ext_code.size(controllerAddress) <= 0:
                                  if stor8[address(sender)].field_0:
                                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                      if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(stor8[address(sender)][stor8[address(sender)].field_0].field_0 - amount)
                                      else:
                                          stor8[address(sender)].field_0++
                                  else:
                                      stor8[address(sender)].field_0++
                                      if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(stor8[address(sender)][stor8[address(sender)].field_0].field_0 - amount)
                              else:
                                  require ext_code.size(controllerAddress)
                                  call controllerAddress.'J91I' with:
                                       gas gas_remaining - 710 wei
                                      args address(sender), address(recipient), amount
                                  require ext_call.success
                                  require ext_call.return_data[0]
                                  if not stor8[address(sender)].field_0:
                                      stor8[address(sender)].field_0++
                                      if not stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      if 0 < stor8[address(sender)].field_0:
                          if block.number >= stor8[address(sender)].field_0:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          if 0 < amount:
                              return 0
                          if not controllerAddress:
                              if not stor8[address(sender)].field_0:
                                  stor8[address(sender)].field_0++
                                  if not stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                              else:
                                  stor8[address(sender)].field_0++
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          if ext_code.size(controllerAddress) <= 0:
                              if not stor8[address(sender)].field_0:
                                  stor8[address(sender)].field_0++
                                  if not stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                              else:
                                  stor8[address(sender)].field_0++
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          if ext_code.size(controllerAddress):
                              call controllerAddress.'J91I' with:
                                   gas gas_remaining - 710 wei
                                  args address(sender), address(recipient), amount
                              if ext_call.success:
                                  require ext_call.return_data[0]
                                  if stor8[address(sender)].field_0:
                                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  stor8[address(sender)].field_0++
                                  if not stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                                  if stor8[address(sender)].field_0 < stor8[address(sender)].field_0:
                                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
              revert
          if not parentTokenAddress:
              if 0 < amount:
                  return 0
              if not controllerAddress:
                  if not stor8[address(sender)].field_0:
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                          if stor8[address(recipient)].field_0:
                  else:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require 0 < stor8[address(recipient)].field_0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
              if ext_code.size(controllerAddress) <= 0:
                  if not stor8[address(sender)].field_0:
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                          if stor8[address(recipient)].field_0:
                  else:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                          if not stor8[address(recipient)].field_0:
                              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                          require 0 < stor8[address(recipient)].field_0
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
              require ext_code.size(controllerAddress)
              call controllerAddress.'J91I' with:
                   gas gas_remaining - 710 wei
                  args address(sender), address(recipient), amount
              require ext_call.success
              require ext_call.return_data[0]
              if not stor8[address(sender)].field_0:
                  stor8[address(sender)].field_0++
                  if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(-amount)
                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
              require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
              if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                  stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(-amount)
                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
              stor8[address(sender)].field_0++
              if not stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
              require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
              ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
          require ext_code.size(parentTokenAddress)
          if block.number < parentSnapShotBlock:
              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                   gas gas_remaining - 710 wei
                  args address(sender), block.number
          else:
              call parentTokenAddress.balanceOfAt(address account, uint256 snapshotId) with:
                   gas gas_remaining - 710 wei
                  args address(sender), parentSnapShotBlock
          require ext_call.success
          if ext_call.return_data[0] < amount:
              return 0
          if not controllerAddress:
              if not stor8[address(sender)].field_0:
                  stor8[address(sender)].field_0++
                  if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                      stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
              else:
                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                  else:
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
          else:
              if ext_code.size(controllerAddress) <= 0:
                  if not stor8[address(sender)].field_0:
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
                          require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(block.number)
                          stor8[address(sender)][stor8[address(sender)].field_0].field_128 = uint128(ext_call.return_data[0] - amount)
                  else:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                          require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                          stor8[address(sender)][stor8[address(sender)].field_0].field_0 = uint128(ext_call.return_data[0] - amount)
                      else:
                          stor8[address(sender)].field_0++
                          if not stor8[address(sender)].field_0 > stor8[address(sender)].field_0 + 1:
              else:
                  require ext_code.size(controllerAddress)
                  call controllerAddress.'J91I' with:
                       gas gas_remaining - 710 wei
                      args address(sender), address(recipient), amount
                  require ext_call.success
                  require ext_call.return_data[0]
                  if not stor8[address(sender)].field_0:
                      stor8[address(sender)].field_0++
                      if not stor8[address(sender)].field_0 <= stor8[address(sender)].field_0 + 1:
                          ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                      require stor8[address(sender)].field_0 < stor8[address(sender)].field_0
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                  if stor8[address(sender)][stor8[address(sender)].field_0].field_0 >= block.number:
                      require stor8[address(sender)].field_0 - 1 < stor8[address(sender)].field_0
                      ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)
                  stor8[address(sender)].field_0++
  ...  # Decompilation aborted, sorry: ("decompilation didn't finish",)


