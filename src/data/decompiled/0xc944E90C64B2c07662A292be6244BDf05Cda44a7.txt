# Palkeoramix decompiler. 

def storage:
  governorAddress is address at storage 0
  pendingGovernorAddress is address at storage 1
  balanceOf is mapping of uint256 at storage 2
  allowance is mapping of uint256 at storage 3
  totalSupply is uint256 at storage 4
  name is array of uint256 at storage 5
  symbol is array of uint256 at storage 6
  decimals is uint8 at storage 7
  stor9 is mapping of uint8 at storage 9
  nonces is mapping of uint256 at storage 10

def name() payable: 
  return name[0 len name.length]

def governor() payable: 
  return governorAddress

def totalSupply() payable: 
  return totalSupply

def decimals() payable: 
  return decimals

def balanceOf(address account) payable: 
  require calldata.size - 4 >= 32
  return balanceOf[address(account)]

def nonces(address _param1) payable: 
  require calldata.size - 4 >= 32
  return nonces[_param1]

def symbol() payable: 
  return symbol[0 len symbol.length]

def isMinter(address account) payable: 
  require calldata.size - 4 >= 32
  return bool(stor9[address(account)])

def allowance(address owner, address spender) payable: 
  require calldata.size - 4 >= 64
  return allowance[address(owner)][address(spender)]

def pendingGovernor() payable: 
  return pendingGovernorAddress

#
#  Regular functions
#

def _fallback(?) payable: # default function
  revert

def renounceMinter() payable: 
  stor9[caller] = 0
  log MinterRemoved(address account=caller)

def addMinter(address account) payable: 
  require calldata.size - 4 >= 32
  if governorAddress != caller:
      revert with 0, 'Only Governor can call'
  stor9[address(account)] = 1
  log MinterAdded(address account=account)

def removeMinter(address _minter) payable: 
  require calldata.size - 4 >= 32
  if governorAddress != caller:
      revert with 0, 'Only Governor can call'
  stor9[address(_minter)] = 0
  log MinterRemoved(address account=_minter)

def transferOwnership(address newOwner) payable: 
  require calldata.size - 4 >= 32
  if governorAddress != caller:
      revert with 0, 'Only Governor can call'
  if not newOwner:
      revert with 0, 'Governor must be set'
  pendingGovernorAddress = newOwner
  log NewPendingOwnership(
        address from=pendingGovernorAddress,
        address to=newOwner)

def acceptOwnership() payable: 
  if not pendingGovernorAddress:
      revert with 0, 'Caller must be pending governor'
  if pendingGovernorAddress != caller:
      revert with 0, 'Caller must be pending governor'
  governorAddress = pendingGovernorAddress
  pendingGovernorAddress = 0
  log NewOwnership(
        address from=governorAddress,
        address to=pendingGovernorAddress)
  log NewPendingOwnership(
        address from=pendingGovernorAddress,
        address to=pendingGovernorAddress)

def permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) payable: 
  require calldata.size - 4 >= 224
  if nonces[address(owner)] + 1 < nonces[address(owner)]:
      revert with 0, 'SafeMath: addition overflow'
  nonces[address(owner)]++
  if s > 0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0:
      revert with 0, 32, 34, 0x6545434453413a20696e76616c6964207369676e6174757265202773272076616c75, mem[617 len 30]
  revert with 0, 32, 34, 0x6545434453413a20696e76616c6964207369676e6174757265202776272076616c75, mem[617 len 30]

def mint(address _to, uint256 _amount) payable: 
  require calldata.size - 4 >= 64
  if not stor9[caller]:
      revert with 0, 'Only minter can call'
  if not _to:
      revert with 0, 'ERC20: mint to the zero address'
  if _amount + totalSupply < totalSupply:
      revert with 0, 'SafeMath: addition overflow'
  totalSupply += _amount
  if _amount + balanceOf[address(_to)] < balanceOf[address(_to)]:
      revert with 0, 'SafeMath: addition overflow'
  balanceOf[address(_to)] += _amount
  log Transfer(
        address from=_amount,
        address to=0,
        uint256 value=_to)

def burn(uint256 _value) payable: 
  require calldata.size - 4 >= 32
  if not caller:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  33,
                  0x6545524332303a206275726e2066726f6d20746865207a65726f20616464726573,
                  mem[197 len 31]
  if _value > balanceOf[caller]:
      revert with 0, 32, 34, 0x7345524332303a206275726e20616d6f756e7420657863656564732062616c616e63, mem[162 len 30], mem[222 len 2]
  balanceOf[caller] -= _value
  if _value > totalSupply:
      revert with 0, 'SafeMath: subtraction overflow'
  totalSupply -= _value
  log Transfer(
        address from=_value,
        address to=caller,
        uint256 value=0)

def approve(address spender, uint256 amount) payable: 
  require calldata.size - 4 >= 64
  if not caller:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  36,
                  0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573,
                  mem[200 len 28]
  if not spender:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  34,
                  0x6545524332303a20617070726f766520746f20746865207a65726f20616464726573,
                  mem[198 len 30]
  allowance[caller][address(spender)] = amount
  log Approval(
        address owner=amount,
        address spender=caller,
        uint256 value=spender)
  return 1

def decreaseAllowance(address spender, uint256 subtractedValue) payable: 
  require calldata.size - 4 >= 64
  if subtractedValue > allowance[caller][address(spender)]:
      revert with 0, 
                  32,
                  37,
                  0x7345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a6572,
                  mem[165 len 27],
                  mem[219 len 5]
  if not caller:
      revert with 0, 32, 36, 0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573, mem[296 len 28]
  if not spender:
      revert with 0, 32, 34, 0x6545524332303a20617070726f766520746f20746865207a65726f20616464726573, mem[294 len 30]
  allowance[caller][address(spender)] -= subtractedValue
  log Approval(
        address owner=(allowance[caller][address(spender)] - subtractedValue),
        address spender=caller,
        uint256 value=spender)
  return 1

def increaseAllowance(address spender, uint256 addedValue) payable: 
  require calldata.size - 4 >= 64
  if addedValue + allowance[caller][address(spender)] < allowance[caller][address(spender)]:
      revert with 0, 'SafeMath: addition overflow'
  if not caller:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  36,
                  0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573,
                  mem[200 len 28]
  if not spender:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  34,
                  0x6545524332303a20617070726f766520746f20746865207a65726f20616464726573,
                  mem[198 len 30]
  allowance[caller][address(spender)] += addedValue
  log Approval(
        address owner=(addedValue + allowance[caller][address(spender)]),
        address spender=caller,
        uint256 value=spender)
  return 1

def transfer(address recipient, uint256 amount) payable: 
  require calldata.size - 4 >= 64
  if not caller:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  37,
                  0x7345524332303a207472616e736665722066726f6d20746865207a65726f20616464726573,
                  mem[201 len 27]
  if not recipient:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  35,
                  0xfe45524332303a207472616e7366657220746f20746865207a65726f20616464726573,
                  mem[199 len 29]
  if amount > balanceOf[caller]:
      revert with 0, 
                  32,
                  38,
                  0x7345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63,
                  mem[166 len 26],
                  mem[218 len 6]
  balanceOf[caller] -= amount
  if amount + balanceOf[recipient] < balanceOf[recipient]:
      revert with 0, 'SafeMath: addition overflow'
  balanceOf[address(recipient)] = amount + balanceOf[recipient]
  log Transfer(
        address from=amount,
        address to=caller,
        uint256 value=recipient)
  return 1

def burnFrom(address _from, uint256 _value) payable: 
  require calldata.size - 4 >= 64
  if _value > allowance[address(_from)][caller]:
      revert with 0, 32, 36, 0x6545524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e63, mem[164 len 28], mem[220 len 4]
  if not _from:
      revert with 0, 32, 36, 0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573, mem[296 len 28]
  if not caller:
      revert with 0, 32, 34, 0x6545524332303a20617070726f766520746f20746865207a65726f20616464726573, mem[294 len 30]
  allowance[address(_from)][caller] -= _value
  log Approval(
        address owner=(allowance[address(_from)][caller] - _value),
        address spender=_from,
        uint256 value=caller)
  if not _from:
      revert with 0, 32, 33, 0x6545524332303a206275726e2066726f6d20746865207a65726f20616464726573, mem[293 len 31]
  if _value > balanceOf[address(_from)]:
      revert with 0, 32, 34, 0x7345524332303a206275726e20616d6f756e7420657863656564732062616c616e63, mem[258 len 30], mem[318 len 2]
  balanceOf[address(_from)] -= _value
  if _value > totalSupply:
      revert with 0, 'SafeMath: subtraction overflow'
  totalSupply -= _value
  log Transfer(
        address from=_value,
        address to=_from,
        uint256 value=0)

def transferFrom(address sender, address recipient, uint256 amount) payable: 
  require calldata.size - 4 >= 96
  if not sender:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  37,
                  0x7345524332303a207472616e736665722066726f6d20746865207a65726f20616464726573,
                  mem[201 len 27]
  if not recipient:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  35,
                  0xfe45524332303a207472616e7366657220746f20746865207a65726f20616464726573,
                  mem[199 len 29]
  if amount > balanceOf[address(sender)]:
      revert with 0, 
                  32,
                  38,
                  0x7345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63,
                  mem[166 len 26],
                  mem[218 len 6]
  balanceOf[address(sender)] -= amount
  if amount + balanceOf[recipient] < balanceOf[recipient]:
      revert with 0, 'SafeMath: addition overflow'
  balanceOf[address(recipient)] = amount + balanceOf[recipient]
  log Transfer(
        address from=amount,
        address to=sender,
        uint256 value=recipient)
  if amount > allowance[address(sender)][caller]:
      revert with 0, 
                  32,
                  40,
                  0x6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63,
                  mem[264 len 24],
                  mem[312 len 8]
  if not sender:
      revert with 0, 32, 36, 0x7345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573, mem[392 len 28]
  if not caller:
      revert with 0, 32, 34, 0x6545524332303a20617070726f766520746f20746865207a65726f20616464726573, mem[390 len 30]
  allowance[address(sender)][caller] -= amount
  log Approval(
        address owner=(allowance[address(sender)][caller] - amount),
        address spender=sender,
        uint256 value=caller)
  return 1


